//   Ordt 190725.01 autogenerated file 
//   Input: ./rdl_hier_02/test.rdl
//   Parms: ./rdl_hier_02/test.parms
//   Date: Sun Nov 17 17:09:28 EST 2019
//

#include "ordt_pio_common.hpp"
#include "ordt_pio.hpp"

// ------------------ ordt_addr_elem methods ------------------

ordt_addr_elem::ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : m_startaddress(_m_startaddress),
    m_endaddress(_m_endaddress) {
}

bool  ordt_addr_elem::containsAddress(const uint64_t &addr) {
  return ((addr >= m_startaddress) && (addr <= m_endaddress));
}

bool  ordt_addr_elem::isBelowAddress(const uint64_t &addr) {
  return (addr > m_endaddress);
}

bool  ordt_addr_elem::isAboveAddress(const uint64_t &addr) {
  return (addr < m_startaddress);
}

bool  ordt_addr_elem::hasStartAddress(const uint64_t &addr) {
  return (addr == m_startaddress);
}

void  ordt_addr_elem::update_child_ptrs() {
}

// ------------------ ordt_regset methods ------------------

ordt_addr_elem*  ordt_regset::findAddrElem(const uint64_t &addr) {
  int lo = 0;
  int hi = m_children.size()-1;
  int mid = 0;
  while (lo <= hi) {
     mid = (lo + hi) / 2;
     if (m_children[mid]->containsAddress(addr)) {
        //outElem = m_children[mid];
        return m_children[mid];
     }
     else if (m_children[mid]->isAboveAddress(addr))
        hi = mid - 1;
     else
        lo = mid + 1;
  }
  return nullptr;
}

ordt_regset::ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

int  ordt_regset::write(const uint64_t &addr, const ordt_data &wdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->write(addr, wdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in regset\n";
  #endif
     return 8;
}

int  ordt_regset::read(const uint64_t &addr, ordt_data &rdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->read(addr, rdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in regset\n";
  #endif
     rdata.clear();
     return 8;
}

// ------------------ ordt_reg methods ------------------

ordt_reg::ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

ordt_reg::ordt_reg(const ordt_reg &_old)
  : ordt_addr_elem(_old),
    m_mutex() {
}

void  ordt_reg::write(const ordt_data &wdata) {
}

int  ordt_reg::write(const uint64_t &addr, const ordt_data &wdata) {
     return 0;
}

void  ordt_reg::read(ordt_data &rdata) {
}

int  ordt_reg::read(const uint64_t &addr, ordt_data &rdata) {
     return 0;
}

// ------------------ ordt_rg_base_regs_config_regs methods ------------------

ordt_rg_base_regs_config_regs::ordt_rg_base_regs_config_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_base_regs_config_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_base_regs_config_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_base_regs_config_regs\n";
  #endif
     return 8;
}

void  ordt_rg_base_regs_config_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_base_regs_config_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_base_regs_config_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_base_regs_config_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_base_regs_config_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_base_regs_state_regs methods ------------------

ordt_rg_base_regs_state_regs::ordt_rg_base_regs_state_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_none) {
}

int  ordt_rg_base_regs_state_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_base_regs_state_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_base_regs_state_regs\n";
  #endif
     return 8;
}

void  ordt_rg_base_regs_state_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
}

int  ordt_rg_base_regs_state_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_base_regs_state_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_base_regs_state_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_base_regs_state_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
}

// ------------------ ordt_rset_base_regs methods ------------------

ordt_rset_base_regs::ordt_rset_base_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    config_regs(_m_startaddress + 0x0, _m_startaddress + 0x3, 8, 0x4),
    state_regs(_m_startaddress + 0x100, _m_startaddress + 0x103, 8, 0x4) {
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

void  ordt_rset_base_regs::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

// ------------------ ordt_rg_ext_base_regs_config_regs methods ------------------

ordt_rg_ext_base_regs_config_regs::ordt_rg_ext_base_regs_config_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_ext_base_regs_config_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_ext_base_regs_config_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_ext_base_regs_config_regs\n";
  #endif
     return 8;
}

void  ordt_rg_ext_base_regs_config_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_ext_base_regs_config_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_ext_base_regs_config_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_ext_base_regs_config_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_ext_base_regs_config_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_ext_base_regs_state_regs methods ------------------

ordt_rg_ext_base_regs_state_regs::ordt_rg_ext_base_regs_state_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_none) {
}

int  ordt_rg_ext_base_regs_state_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_ext_base_regs_state_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_ext_base_regs_state_regs\n";
  #endif
     return 8;
}

void  ordt_rg_ext_base_regs_state_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
}

int  ordt_rg_ext_base_regs_state_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_ext_base_regs_state_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_ext_base_regs_state_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_ext_base_regs_state_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
}

// ------------------ ordt_rset_ext_base_regs methods ------------------

ordt_rset_ext_base_regs::ordt_rset_ext_base_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    config_regs(_m_startaddress + 0x0, _m_startaddress + 0x3, 8, 0x4),
    state_regs(_m_startaddress + 0x100, _m_startaddress + 0x103, 8, 0x4) {
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

void  ordt_rset_ext_base_regs::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

// ------------------ ordt_rg_l2_r16_child_base_regs_config_regs methods ------------------

ordt_rg_l2_r16_child_base_regs_config_regs::ordt_rg_l2_r16_child_base_regs_config_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_l2_r16_child_base_regs_config_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_r16_child_base_regs_config_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_r16_child_base_regs_config_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_r16_child_base_regs_config_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_l2_r16_child_base_regs_config_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_r16_child_base_regs_config_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_r16_child_base_regs_config_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_r16_child_base_regs_config_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_l2_r16_child_base_regs_state_regs methods ------------------

ordt_rg_l2_r16_child_base_regs_state_regs::ordt_rg_l2_r16_child_base_regs_state_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_none) {
}

int  ordt_rg_l2_r16_child_base_regs_state_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_r16_child_base_regs_state_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_r16_child_base_regs_state_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_r16_child_base_regs_state_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
}

int  ordt_rg_l2_r16_child_base_regs_state_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_r16_child_base_regs_state_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_r16_child_base_regs_state_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_r16_child_base_regs_state_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
}

// ------------------ ordt_rset_l2_r16_child_base_regs methods ------------------

ordt_rset_l2_r16_child_base_regs::ordt_rset_l2_r16_child_base_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    config_regs(_m_startaddress + 0x0, _m_startaddress + 0x3, 8, 0x4),
    state_regs(_m_startaddress + 0x100, _m_startaddress + 0x103, 8, 0x4) {
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

void  ordt_rset_l2_r16_child_base_regs::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

// ------------------ ordt_rg_l2_r16_child_ext_base_regs_config_regs methods ------------------

ordt_rg_l2_r16_child_ext_base_regs_config_regs::ordt_rg_l2_r16_child_ext_base_regs_config_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_l2_r16_child_ext_base_regs_config_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_r16_child_ext_base_regs_config_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_r16_child_ext_base_regs_config_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_r16_child_ext_base_regs_config_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_l2_r16_child_ext_base_regs_config_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_r16_child_ext_base_regs_config_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_r16_child_ext_base_regs_config_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_r16_child_ext_base_regs_config_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_l2_r16_child_ext_base_regs_state_regs methods ------------------

ordt_rg_l2_r16_child_ext_base_regs_state_regs::ordt_rg_l2_r16_child_ext_base_regs_state_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_none) {
}

int  ordt_rg_l2_r16_child_ext_base_regs_state_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_r16_child_ext_base_regs_state_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_r16_child_ext_base_regs_state_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_r16_child_ext_base_regs_state_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
}

int  ordt_rg_l2_r16_child_ext_base_regs_state_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_r16_child_ext_base_regs_state_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_r16_child_ext_base_regs_state_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_r16_child_ext_base_regs_state_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
}

// ------------------ ordt_rset_l2_r16_child_ext_base_regs methods ------------------

ordt_rset_l2_r16_child_ext_base_regs::ordt_rset_l2_r16_child_ext_base_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    config_regs(_m_startaddress + 0x0, _m_startaddress + 0x3, 8, 0x4),
    state_regs(_m_startaddress + 0x100, _m_startaddress + 0x103, 8, 0x4) {
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

void  ordt_rset_l2_r16_child_ext_base_regs::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

// ------------------ ordt_rg_l2_r16_child_l3_child_base_regs_config_regs methods ------------------

ordt_rg_l2_r16_child_l3_child_base_regs_config_regs::ordt_rg_l2_r16_child_l3_child_base_regs_config_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_l2_r16_child_l3_child_base_regs_config_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_r16_child_l3_child_base_regs_config_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_r16_child_l3_child_base_regs_config_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_r16_child_l3_child_base_regs_config_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_l2_r16_child_l3_child_base_regs_config_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_r16_child_l3_child_base_regs_config_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_r16_child_l3_child_base_regs_config_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_r16_child_l3_child_base_regs_config_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_l2_r16_child_l3_child_base_regs_state_regs methods ------------------

ordt_rg_l2_r16_child_l3_child_base_regs_state_regs::ordt_rg_l2_r16_child_l3_child_base_regs_state_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_none) {
}

int  ordt_rg_l2_r16_child_l3_child_base_regs_state_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_r16_child_l3_child_base_regs_state_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_r16_child_l3_child_base_regs_state_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_r16_child_l3_child_base_regs_state_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
}

int  ordt_rg_l2_r16_child_l3_child_base_regs_state_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_r16_child_l3_child_base_regs_state_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_r16_child_l3_child_base_regs_state_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_r16_child_l3_child_base_regs_state_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
}

// ------------------ ordt_rset_l2_r16_child_l3_child_base_regs methods ------------------

ordt_rset_l2_r16_child_l3_child_base_regs::ordt_rset_l2_r16_child_l3_child_base_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    config_regs(_m_startaddress + 0x0, _m_startaddress + 0x3, 8, 0x4),
    state_regs(_m_startaddress + 0x100, _m_startaddress + 0x103, 8, 0x4) {
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

void  ordt_rset_l2_r16_child_l3_child_base_regs::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

// ------------------ ordt_rg_l2_r16_child_l3_child_ext_base_regs_config_regs methods ------------------

ordt_rg_l2_r16_child_l3_child_ext_base_regs_config_regs::ordt_rg_l2_r16_child_l3_child_ext_base_regs_config_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_l2_r16_child_l3_child_ext_base_regs_config_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_r16_child_l3_child_ext_base_regs_config_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_r16_child_l3_child_ext_base_regs_config_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_r16_child_l3_child_ext_base_regs_config_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_l2_r16_child_l3_child_ext_base_regs_config_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_r16_child_l3_child_ext_base_regs_config_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_r16_child_l3_child_ext_base_regs_config_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_r16_child_l3_child_ext_base_regs_config_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_l2_r16_child_l3_child_ext_base_regs_state_regs methods ------------------

ordt_rg_l2_r16_child_l3_child_ext_base_regs_state_regs::ordt_rg_l2_r16_child_l3_child_ext_base_regs_state_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_none) {
}

int  ordt_rg_l2_r16_child_l3_child_ext_base_regs_state_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_r16_child_l3_child_ext_base_regs_state_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_r16_child_l3_child_ext_base_regs_state_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_r16_child_l3_child_ext_base_regs_state_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
}

int  ordt_rg_l2_r16_child_l3_child_ext_base_regs_state_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_r16_child_l3_child_ext_base_regs_state_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_r16_child_l3_child_ext_base_regs_state_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_r16_child_l3_child_ext_base_regs_state_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
}

// ------------------ ordt_rset_l2_r16_child_l3_child_ext_base_regs methods ------------------

ordt_rset_l2_r16_child_l3_child_ext_base_regs::ordt_rset_l2_r16_child_l3_child_ext_base_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    config_regs(_m_startaddress + 0x0, _m_startaddress + 0x3, 8, 0x4),
    state_regs(_m_startaddress + 0x100, _m_startaddress + 0x103, 8, 0x4) {
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

void  ordt_rset_l2_r16_child_l3_child_ext_base_regs::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

// ------------------ ordt_rset_l2_r16_child_l3_child methods ------------------

ordt_rset_l2_r16_child_l3_child::ordt_rset_l2_r16_child_l3_child(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    base_regs(_m_startaddress + 0x0, _m_startaddress + 0x1ff),
    ext_base_regs(_m_startaddress + 0x800, _m_startaddress + 0x9ff) {
  m_children.push_back(&base_regs);
  m_children.push_back(&ext_base_regs);
}

void  ordt_rset_l2_r16_child_l3_child::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&base_regs);
  m_children.push_back(&ext_base_regs);
}

// ------------------ ordt_rset_l2_r16_child methods ------------------

ordt_rset_l2_r16_child::ordt_rset_l2_r16_child(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    base_regs(_m_startaddress + 0x0, _m_startaddress + 0x1ff),
    ext_base_regs(_m_startaddress + 0x1000, _m_startaddress + 0x11ff),
    l3_child(_m_startaddress + 0x2000, _m_startaddress + 0x2fff) {
  m_children.push_back(&base_regs);
  m_children.push_back(&ext_base_regs);
  m_children.push_back(&l3_child);
}

void  ordt_rset_l2_r16_child::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&base_regs);
  m_children.push_back(&ext_base_regs);
  m_children.push_back(&l3_child);
}

// ------------------ ordt_rg_l2_s8_child_base_regs_config_regs methods ------------------

ordt_rg_l2_s8_child_base_regs_config_regs::ordt_rg_l2_s8_child_base_regs_config_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_l2_s8_child_base_regs_config_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_s8_child_base_regs_config_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_s8_child_base_regs_config_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_s8_child_base_regs_config_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_l2_s8_child_base_regs_config_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_s8_child_base_regs_config_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_s8_child_base_regs_config_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_s8_child_base_regs_config_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_l2_s8_child_base_regs_state_regs methods ------------------

ordt_rg_l2_s8_child_base_regs_state_regs::ordt_rg_l2_s8_child_base_regs_state_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_none) {
}

int  ordt_rg_l2_s8_child_base_regs_state_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_s8_child_base_regs_state_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_s8_child_base_regs_state_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_s8_child_base_regs_state_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
}

int  ordt_rg_l2_s8_child_base_regs_state_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_s8_child_base_regs_state_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_s8_child_base_regs_state_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_s8_child_base_regs_state_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
}

// ------------------ ordt_rset_l2_s8_child_base_regs methods ------------------

ordt_rset_l2_s8_child_base_regs::ordt_rset_l2_s8_child_base_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    config_regs(_m_startaddress + 0x0, _m_startaddress + 0x3, 8, 0x4),
    state_regs(_m_startaddress + 0x100, _m_startaddress + 0x103, 8, 0x4) {
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

void  ordt_rset_l2_s8_child_base_regs::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

// ------------------ ordt_rg_l2_s8_child_ext_base_regs_config_regs methods ------------------

ordt_rg_l2_s8_child_ext_base_regs_config_regs::ordt_rg_l2_s8_child_ext_base_regs_config_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_l2_s8_child_ext_base_regs_config_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_s8_child_ext_base_regs_config_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_s8_child_ext_base_regs_config_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_s8_child_ext_base_regs_config_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_l2_s8_child_ext_base_regs_config_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_s8_child_ext_base_regs_config_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_s8_child_ext_base_regs_config_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_s8_child_ext_base_regs_config_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_l2_s8_child_ext_base_regs_state_regs methods ------------------

ordt_rg_l2_s8_child_ext_base_regs_state_regs::ordt_rg_l2_s8_child_ext_base_regs_state_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_none) {
}

int  ordt_rg_l2_s8_child_ext_base_regs_state_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_s8_child_ext_base_regs_state_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_s8_child_ext_base_regs_state_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_s8_child_ext_base_regs_state_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
}

int  ordt_rg_l2_s8_child_ext_base_regs_state_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_s8_child_ext_base_regs_state_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_s8_child_ext_base_regs_state_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_s8_child_ext_base_regs_state_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
}

// ------------------ ordt_rset_l2_s8_child_ext_base_regs methods ------------------

ordt_rset_l2_s8_child_ext_base_regs::ordt_rset_l2_s8_child_ext_base_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    config_regs(_m_startaddress + 0x0, _m_startaddress + 0x3, 8, 0x4),
    state_regs(_m_startaddress + 0x100, _m_startaddress + 0x103, 8, 0x4) {
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

void  ordt_rset_l2_s8_child_ext_base_regs::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

// ------------------ ordt_rg_l2_s8_child_l3_child_base_regs_config_regs methods ------------------

ordt_rg_l2_s8_child_l3_child_base_regs_config_regs::ordt_rg_l2_s8_child_l3_child_base_regs_config_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_l2_s8_child_l3_child_base_regs_config_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_s8_child_l3_child_base_regs_config_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_s8_child_l3_child_base_regs_config_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_s8_child_l3_child_base_regs_config_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_l2_s8_child_l3_child_base_regs_config_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_s8_child_l3_child_base_regs_config_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_s8_child_l3_child_base_regs_config_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_s8_child_l3_child_base_regs_config_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_l2_s8_child_l3_child_base_regs_state_regs methods ------------------

ordt_rg_l2_s8_child_l3_child_base_regs_state_regs::ordt_rg_l2_s8_child_l3_child_base_regs_state_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_none) {
}

int  ordt_rg_l2_s8_child_l3_child_base_regs_state_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_s8_child_l3_child_base_regs_state_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_s8_child_l3_child_base_regs_state_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_s8_child_l3_child_base_regs_state_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
}

int  ordt_rg_l2_s8_child_l3_child_base_regs_state_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_s8_child_l3_child_base_regs_state_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_s8_child_l3_child_base_regs_state_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_s8_child_l3_child_base_regs_state_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
}

// ------------------ ordt_rset_l2_s8_child_l3_child_base_regs methods ------------------

ordt_rset_l2_s8_child_l3_child_base_regs::ordt_rset_l2_s8_child_l3_child_base_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    config_regs(_m_startaddress + 0x0, _m_startaddress + 0x3, 8, 0x4),
    state_regs(_m_startaddress + 0x100, _m_startaddress + 0x103, 8, 0x4) {
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

void  ordt_rset_l2_s8_child_l3_child_base_regs::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

// ------------------ ordt_rg_l2_s8_child_l3_child_ext_base_regs_config_regs methods ------------------

ordt_rg_l2_s8_child_l3_child_ext_base_regs_config_regs::ordt_rg_l2_s8_child_l3_child_ext_base_regs_config_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_l2_s8_child_l3_child_ext_base_regs_config_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_s8_child_l3_child_ext_base_regs_config_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_s8_child_l3_child_ext_base_regs_config_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_s8_child_l3_child_ext_base_regs_config_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_l2_s8_child_l3_child_ext_base_regs_config_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_s8_child_l3_child_ext_base_regs_config_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_s8_child_l3_child_ext_base_regs_config_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_s8_child_l3_child_ext_base_regs_config_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_l2_s8_child_l3_child_ext_base_regs_state_regs methods ------------------

ordt_rg_l2_s8_child_l3_child_ext_base_regs_state_regs::ordt_rg_l2_s8_child_l3_child_ext_base_regs_state_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_none) {
}

int  ordt_rg_l2_s8_child_l3_child_ext_base_regs_state_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_s8_child_l3_child_ext_base_regs_state_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_s8_child_l3_child_ext_base_regs_state_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_s8_child_l3_child_ext_base_regs_state_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
}

int  ordt_rg_l2_s8_child_l3_child_ext_base_regs_state_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_s8_child_l3_child_ext_base_regs_state_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_s8_child_l3_child_ext_base_regs_state_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_s8_child_l3_child_ext_base_regs_state_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
}

// ------------------ ordt_rset_l2_s8_child_l3_child_ext_base_regs methods ------------------

ordt_rset_l2_s8_child_l3_child_ext_base_regs::ordt_rset_l2_s8_child_l3_child_ext_base_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    config_regs(_m_startaddress + 0x0, _m_startaddress + 0x3, 8, 0x4),
    state_regs(_m_startaddress + 0x100, _m_startaddress + 0x103, 8, 0x4) {
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

void  ordt_rset_l2_s8_child_l3_child_ext_base_regs::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

// ------------------ ordt_rset_l2_s8_child_l3_child methods ------------------

ordt_rset_l2_s8_child_l3_child::ordt_rset_l2_s8_child_l3_child(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    base_regs(_m_startaddress + 0x0, _m_startaddress + 0x1ff),
    ext_base_regs(_m_startaddress + 0x800, _m_startaddress + 0x9ff) {
  m_children.push_back(&base_regs);
  m_children.push_back(&ext_base_regs);
}

void  ordt_rset_l2_s8_child_l3_child::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&base_regs);
  m_children.push_back(&ext_base_regs);
}

// ------------------ ordt_rset_l2_s8_child methods ------------------

ordt_rset_l2_s8_child::ordt_rset_l2_s8_child(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    base_regs(_m_startaddress + 0x0, _m_startaddress + 0x1ff),
    ext_base_regs(_m_startaddress + 0x1000, _m_startaddress + 0x11ff),
    l3_child(_m_startaddress + 0x2000, _m_startaddress + 0x2fff) {
  m_children.push_back(&base_regs);
  m_children.push_back(&ext_base_regs);
  m_children.push_back(&l3_child);
}

void  ordt_rset_l2_s8_child::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&base_regs);
  m_children.push_back(&ext_base_regs);
  m_children.push_back(&l3_child);
}

// ------------------ ordt_rg_l2_dflt_child_base_regs_config_regs methods ------------------

ordt_rg_l2_dflt_child_base_regs_config_regs::ordt_rg_l2_dflt_child_base_regs_config_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_l2_dflt_child_base_regs_config_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_dflt_child_base_regs_config_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_base_regs_config_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_dflt_child_base_regs_config_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_l2_dflt_child_base_regs_config_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_dflt_child_base_regs_config_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_base_regs_config_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_dflt_child_base_regs_config_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_l2_dflt_child_base_regs_state_regs methods ------------------

ordt_rg_l2_dflt_child_base_regs_state_regs::ordt_rg_l2_dflt_child_base_regs_state_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_none) {
}

int  ordt_rg_l2_dflt_child_base_regs_state_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_dflt_child_base_regs_state_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_base_regs_state_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_dflt_child_base_regs_state_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
}

int  ordt_rg_l2_dflt_child_base_regs_state_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_dflt_child_base_regs_state_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_base_regs_state_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_dflt_child_base_regs_state_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
}

// ------------------ ordt_rset_l2_dflt_child_base_regs methods ------------------

ordt_rset_l2_dflt_child_base_regs::ordt_rset_l2_dflt_child_base_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    config_regs(_m_startaddress + 0x0, _m_startaddress + 0x3, 8, 0x4),
    state_regs(_m_startaddress + 0x100, _m_startaddress + 0x103, 8, 0x4) {
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

void  ordt_rset_l2_dflt_child_base_regs::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

// ------------------ ordt_rg_l2_dflt_child_ext_base_regs_config_regs methods ------------------

ordt_rg_l2_dflt_child_ext_base_regs_config_regs::ordt_rg_l2_dflt_child_ext_base_regs_config_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_l2_dflt_child_ext_base_regs_config_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_dflt_child_ext_base_regs_config_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_ext_base_regs_config_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_dflt_child_ext_base_regs_config_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_l2_dflt_child_ext_base_regs_config_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_dflt_child_ext_base_regs_config_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_ext_base_regs_config_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_dflt_child_ext_base_regs_config_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_l2_dflt_child_ext_base_regs_state_regs methods ------------------

ordt_rg_l2_dflt_child_ext_base_regs_state_regs::ordt_rg_l2_dflt_child_ext_base_regs_state_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_none) {
}

int  ordt_rg_l2_dflt_child_ext_base_regs_state_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_dflt_child_ext_base_regs_state_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_ext_base_regs_state_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_dflt_child_ext_base_regs_state_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
}

int  ordt_rg_l2_dflt_child_ext_base_regs_state_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_dflt_child_ext_base_regs_state_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_ext_base_regs_state_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_dflt_child_ext_base_regs_state_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
}

// ------------------ ordt_rset_l2_dflt_child_ext_base_regs methods ------------------

ordt_rset_l2_dflt_child_ext_base_regs::ordt_rset_l2_dflt_child_ext_base_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    config_regs(_m_startaddress + 0x0, _m_startaddress + 0x3, 8, 0x4),
    state_regs(_m_startaddress + 0x100, _m_startaddress + 0x103, 8, 0x4) {
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

void  ordt_rset_l2_dflt_child_ext_base_regs::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

// ------------------ ordt_rg_l2_dflt_child_l3_child_base_regs_config_regs methods ------------------

ordt_rg_l2_dflt_child_l3_child_base_regs_config_regs::ordt_rg_l2_dflt_child_l3_child_base_regs_config_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_l2_dflt_child_l3_child_base_regs_config_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_dflt_child_l3_child_base_regs_config_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_l3_child_base_regs_config_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_dflt_child_l3_child_base_regs_config_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_l2_dflt_child_l3_child_base_regs_config_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_dflt_child_l3_child_base_regs_config_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_l3_child_base_regs_config_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_dflt_child_l3_child_base_regs_config_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_l2_dflt_child_l3_child_base_regs_state_regs methods ------------------

ordt_rg_l2_dflt_child_l3_child_base_regs_state_regs::ordt_rg_l2_dflt_child_l3_child_base_regs_state_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_none) {
}

int  ordt_rg_l2_dflt_child_l3_child_base_regs_state_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_dflt_child_l3_child_base_regs_state_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_l3_child_base_regs_state_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_dflt_child_l3_child_base_regs_state_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
}

int  ordt_rg_l2_dflt_child_l3_child_base_regs_state_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_dflt_child_l3_child_base_regs_state_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_l3_child_base_regs_state_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_dflt_child_l3_child_base_regs_state_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
}

// ------------------ ordt_rset_l2_dflt_child_l3_child_base_regs methods ------------------

ordt_rset_l2_dflt_child_l3_child_base_regs::ordt_rset_l2_dflt_child_l3_child_base_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    config_regs(_m_startaddress + 0x0, _m_startaddress + 0x3, 8, 0x4),
    state_regs(_m_startaddress + 0x100, _m_startaddress + 0x103, 8, 0x4) {
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

void  ordt_rset_l2_dflt_child_l3_child_base_regs::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

// ------------------ ordt_rg_l2_dflt_child_l3_child_ext_base_regs_config_regs methods ------------------

ordt_rg_l2_dflt_child_l3_child_ext_base_regs_config_regs::ordt_rg_l2_dflt_child_l3_child_ext_base_regs_config_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_l2_dflt_child_l3_child_ext_base_regs_config_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_dflt_child_l3_child_ext_base_regs_config_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_l3_child_ext_base_regs_config_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_dflt_child_l3_child_ext_base_regs_config_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_l2_dflt_child_l3_child_ext_base_regs_config_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_dflt_child_l3_child_ext_base_regs_config_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_l3_child_ext_base_regs_config_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_dflt_child_l3_child_ext_base_regs_config_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_l2_dflt_child_l3_child_ext_base_regs_state_regs methods ------------------

ordt_rg_l2_dflt_child_l3_child_ext_base_regs_state_regs::ordt_rg_l2_dflt_child_l3_child_ext_base_regs_state_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_none) {
}

int  ordt_rg_l2_dflt_child_l3_child_ext_base_regs_state_regs::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_l2_dflt_child_l3_child_ext_base_regs_state_regs at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_l3_child_ext_base_regs_state_regs\n";
  #endif
     return 8;
}

void  ordt_rg_l2_dflt_child_l3_child_ext_base_regs_state_regs::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
}

int  ordt_rg_l2_dflt_child_l3_child_ext_base_regs_state_regs::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_l2_dflt_child_l3_child_ext_base_regs_state_regs at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_l2_dflt_child_l3_child_ext_base_regs_state_regs\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_l2_dflt_child_l3_child_ext_base_regs_state_regs::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
}

// ------------------ ordt_rset_l2_dflt_child_l3_child_ext_base_regs methods ------------------

ordt_rset_l2_dflt_child_l3_child_ext_base_regs::ordt_rset_l2_dflt_child_l3_child_ext_base_regs(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    config_regs(_m_startaddress + 0x0, _m_startaddress + 0x3, 8, 0x4),
    state_regs(_m_startaddress + 0x100, _m_startaddress + 0x103, 8, 0x4) {
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

void  ordt_rset_l2_dflt_child_l3_child_ext_base_regs::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&config_regs);
  m_children.push_back(&state_regs);
}

// ------------------ ordt_rset_l2_dflt_child_l3_child methods ------------------

ordt_rset_l2_dflt_child_l3_child::ordt_rset_l2_dflt_child_l3_child(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    base_regs(_m_startaddress + 0x0, _m_startaddress + 0x1ff),
    ext_base_regs(_m_startaddress + 0x800, _m_startaddress + 0x9ff) {
  m_children.push_back(&base_regs);
  m_children.push_back(&ext_base_regs);
}

void  ordt_rset_l2_dflt_child_l3_child::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&base_regs);
  m_children.push_back(&ext_base_regs);
}

// ------------------ ordt_rset_l2_dflt_child methods ------------------

ordt_rset_l2_dflt_child::ordt_rset_l2_dflt_child(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    base_regs(_m_startaddress + 0x0, _m_startaddress + 0x1ff),
    ext_base_regs(_m_startaddress + 0x1000, _m_startaddress + 0x11ff),
    l3_child(_m_startaddress + 0x2000, _m_startaddress + 0x2fff) {
  m_children.push_back(&base_regs);
  m_children.push_back(&ext_base_regs);
  m_children.push_back(&l3_child);
}

void  ordt_rset_l2_dflt_child::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&base_regs);
  m_children.push_back(&ext_base_regs);
  m_children.push_back(&l3_child);
}

// ------------------ ordt_rg_singleton_rf_s8_sing_reg methods ------------------

ordt_rg_singleton_rf_s8_sing_reg::ordt_rg_singleton_rf_s8_sing_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_singleton_rf_s8_sing_reg::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_singleton_rf_s8_sing_reg at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_singleton_rf_s8_sing_reg\n";
  #endif
     return 8;
}

void  ordt_rg_singleton_rf_s8_sing_reg::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_singleton_rf_s8_sing_reg::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_singleton_rf_s8_sing_reg at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_singleton_rf_s8_sing_reg\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_singleton_rf_s8_sing_reg::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rset_singleton_rf_s8 methods ------------------

ordt_rset_singleton_rf_s8::ordt_rset_singleton_rf_s8(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    sing_reg(_m_startaddress + 0x0, _m_startaddress + 0x3) {
  m_children.push_back(&sing_reg);
}

void  ordt_rset_singleton_rf_s8::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&sing_reg);
}

// ------------------ ordt_rg_singleton_rf_r16_sing_reg methods ------------------

ordt_rg_singleton_rf_r16_sing_reg::ordt_rg_singleton_rf_r16_sing_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_singleton_rf_r16_sing_reg::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_singleton_rf_r16_sing_reg at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_singleton_rf_r16_sing_reg\n";
  #endif
     return 8;
}

void  ordt_rg_singleton_rf_r16_sing_reg::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_singleton_rf_r16_sing_reg::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_singleton_rf_r16_sing_reg at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_singleton_rf_r16_sing_reg\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_singleton_rf_r16_sing_reg::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rset_singleton_rf_r16 methods ------------------

ordt_rset_singleton_rf_r16::ordt_rset_singleton_rf_r16(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    sing_reg(_m_startaddress + 0x0, _m_startaddress + 0x3) {
  m_children.push_back(&sing_reg);
}

void  ordt_rset_singleton_rf_r16::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&sing_reg);
}

// ------------------ ordt_rg_singleton_rf_dflt_sing_reg methods ------------------

ordt_rg_singleton_rf_dflt_sing_reg::ordt_rg_singleton_rf_dflt_sing_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_singleton_rf_dflt_sing_reg::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_singleton_rf_dflt_sing_reg at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_singleton_rf_dflt_sing_reg\n";
  #endif
     return 8;
}

void  ordt_rg_singleton_rf_dflt_sing_reg::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_singleton_rf_dflt_sing_reg::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_singleton_rf_dflt_sing_reg at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_singleton_rf_dflt_sing_reg\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_singleton_rf_dflt_sing_reg::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rset_singleton_rf_dflt methods ------------------

ordt_rset_singleton_rf_dflt::ordt_rset_singleton_rf_dflt(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    sing_reg(_m_startaddress + 0x0, _m_startaddress + 0x3) {
  m_children.push_back(&sing_reg);
}

void  ordt_rset_singleton_rf_dflt::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&sing_reg);
}

// ------------------ ordt_rg_rf_lvl2_rf_lvl1_reg_dflt methods ------------------

ordt_rg_rf_lvl2_rf_lvl1_reg_dflt::ordt_rg_rf_lvl2_rf_lvl1_reg_dflt(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_rf_lvl2_rf_lvl1_reg_dflt::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_rf_lvl2_rf_lvl1_reg_dflt at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_rf_lvl2_rf_lvl1_reg_dflt\n";
  #endif
     return 8;
}

void  ordt_rg_rf_lvl2_rf_lvl1_reg_dflt::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_rf_lvl2_rf_lvl1_reg_dflt::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_rf_lvl2_rf_lvl1_reg_dflt at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_rf_lvl2_rf_lvl1_reg_dflt\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_rf_lvl2_rf_lvl1_reg_dflt::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_rf_lvl2_rf_lvl1_reg_l1 methods ------------------

ordt_rg_rf_lvl2_rf_lvl1_reg_l1::ordt_rg_rf_lvl2_rf_lvl1_reg_l1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_rf_lvl2_rf_lvl1_reg_l1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_rf_lvl2_rf_lvl1_reg_l1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_rf_lvl2_rf_lvl1_reg_l1\n";
  #endif
     return 8;
}

void  ordt_rg_rf_lvl2_rf_lvl1_reg_l1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_rf_lvl2_rf_lvl1_reg_l1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_rf_lvl2_rf_lvl1_reg_l1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_rf_lvl2_rf_lvl1_reg_l1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_rf_lvl2_rf_lvl1_reg_l1::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rg_rf_lvl2_rf_lvl1_reg_l2 methods ------------------

ordt_rg_rf_lvl2_rf_lvl1_reg_l2::ordt_rg_rf_lvl2_rf_lvl1_reg_l2(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    lsb_field(0, 16, 0xffff, r_std, w_std),
    msb_field(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_rf_lvl2_rf_lvl1_reg_l2::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_rf_lvl2_rf_lvl1_reg_l2 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_rf_lvl2_rf_lvl1_reg_l2\n";
  #endif
     return 8;
}

void  ordt_rg_rf_lvl2_rf_lvl1_reg_l2::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  lsb_field.write(wdata);
  msb_field.write(wdata);
}

int  ordt_rg_rf_lvl2_rf_lvl1_reg_l2::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_rf_lvl2_rf_lvl1_reg_l2 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_rf_lvl2_rf_lvl1_reg_l2\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_rf_lvl2_rf_lvl1_reg_l2::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  lsb_field.read(rdata);
  msb_field.read(rdata);
}

// ------------------ ordt_rset_rf_lvl2_rf_lvl1 methods ------------------

ordt_rset_rf_lvl2_rf_lvl1::ordt_rset_rf_lvl2_rf_lvl1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    reg_dflt(_m_startaddress + 0x0, _m_startaddress + 0x3),
    reg_l1(_m_startaddress + 0x8, _m_startaddress + 0xb),
    reg_l2(_m_startaddress + 0x10, _m_startaddress + 0x13) {
  m_children.push_back(&reg_dflt);
  m_children.push_back(&reg_l1);
  m_children.push_back(&reg_l2);
}

void  ordt_rset_rf_lvl2_rf_lvl1::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&reg_dflt);
  m_children.push_back(&reg_l1);
  m_children.push_back(&reg_l2);
}

// ------------------ ordt_rset_rf_lvl2 methods ------------------

ordt_rset_rf_lvl2::ordt_rset_rf_lvl2(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    rf_lvl1(_m_startaddress + 0x0, _m_startaddress + 0x1f, 4, 0x80) {
  m_children.push_back(&rf_lvl1);
}

void  ordt_rset_rf_lvl2::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&rf_lvl1);
}

// ------------------ ordt_root methods ------------------

ordt_root::ordt_root()
  : ordt_root(0x0, 0x81fff) {
}

ordt_root::ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    base_regs(_m_startaddress + 0x0, _m_startaddress + 0x1ff),
    ext_base_regs(_m_startaddress + 0x10000, _m_startaddress + 0x101ff),
    l2_r16_child(_m_startaddress + 0x20000, _m_startaddress + 0x23fff),
    l2_s8_child(_m_startaddress + 0x30000, _m_startaddress + 0x33fff),
    l2_dflt_child(_m_startaddress + 0x40000, _m_startaddress + 0x43fff),
    singleton_rf_s8(_m_startaddress + 0x50000, _m_startaddress + 0x50003),
    singleton_rf_r16(_m_startaddress + 0x60000, _m_startaddress + 0x60003),
    singleton_rf_dflt(_m_startaddress + 0x70000, _m_startaddress + 0x70003),
    rf_lvl2(_m_startaddress + 0x80000, _m_startaddress + 0x801ff, 2, 0x1000) {
  m_children.push_back(&base_regs);
  m_children.push_back(&ext_base_regs);
  m_children.push_back(&l2_r16_child);
  m_children.push_back(&l2_s8_child);
  m_children.push_back(&l2_dflt_child);
  m_children.push_back(&singleton_rf_s8);
  m_children.push_back(&singleton_rf_r16);
  m_children.push_back(&singleton_rf_dflt);
  m_children.push_back(&rf_lvl2);
}

void  ordt_root::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&base_regs);
  m_children.push_back(&ext_base_regs);
  m_children.push_back(&l2_r16_child);
  m_children.push_back(&l2_s8_child);
  m_children.push_back(&l2_dflt_child);
  m_children.push_back(&singleton_rf_s8);
  m_children.push_back(&singleton_rf_r16);
  m_children.push_back(&singleton_rf_dflt);
  m_children.push_back(&rf_lvl2);
}

