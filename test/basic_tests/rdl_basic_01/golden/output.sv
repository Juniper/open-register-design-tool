//   Ordt 190725.01 autogenerated file 
//   Input: ./rdl_basic_01/test.rdl
//   Parms: ./rdl_basic_01/test.parms
//   Date: Sun Nov 17 17:06:03 EST 2019
//

//
//---------- module simple1_jrdl_logic
//
module simple1_jrdl_logic
(
  clk,
  reset,
  d2l_stats_disable_check_0_w,
  d2l_stats_disable_check_0_we,
  d2l_stats_disable_check_0_re,
  d2l_stats_disable_check_1_w,
  d2l_stats_disable_check_1_we,
  d2l_stats_disable_check_1_re,
  d2l_stats_features_w,
  d2l_stats_features_we,
  d2l_stats_features_re,
  d2l_stats_log_address1_w,
  d2l_stats_log_address1_we,
  d2l_stats_log_address1_re,
  d2l_stats_log_address2_w,
  d2l_stats_log_address2_we,
  d2l_stats_log_address2_re,
  d2l_stats_wide_reg_w,
  d2l_stats_wide_reg_we,
  d2l_stats_wide_reg_re,
  d2l_rdr_reorder_window_w,
  d2l_rdr_reorder_window_we,
  d2l_rdr_reorder_window_re,
  d2l_rdr_stream_reconf_w,
  d2l_rdr_stream_reconf_we,
  d2l_rdr_stream_reconf_re,
  d2l_rdr_roll32_counter_reg_w,
  d2l_rdr_roll32_counter_reg_we,
  d2l_rdr_roll32_counter_reg_re,
  d2l_rdr_sat32_counter_reg_w,
  d2l_rdr_sat32_counter_reg_we,
  d2l_rdr_sat32_counter_reg_re,
  d2l_rdr_rcnt_sat_log_w,
  d2l_rdr_rcnt_sat_log_we,
  d2l_rdr_rcnt_sat_log_re,
  d2l_extra_reg_w,
  d2l_extra_reg_we,
  d2l_extra_reg_re,
  h2l_stats_disable_check_0_l0_b0_intr,
  h2l_stats_disable_check_0_l0_b1_intr,
  h2l_stats_disable_check_0_l0_b2_intr,
  h2l_stats_disable_check_1_l0_b0_intr,
  h2l_stats_disable_check_1_l0_b1_intr,
  h2l_stats_disable_check_1_l0_b2_intr,
  h2l_stats_log_address1_value_w,
  h2l_stats_log_address1_value_we,
  h2l_stats_log_address2_value_w,
  h2l_stats_log_address2_value_we,
  h2l_stats_wide_reg_value_w,
  h2l_stats_wide_reg_value_we,
  sig_stats_another_reset,
  h2l_rdr_stream_reconf_busy_w,
  h2l_rdr_roll32_counter_reg_count_w,
  h2l_rdr_roll32_counter_reg_count_incr,
  h2l_rdr_roll32_counter_reg_count_we,
  h2l_rdr_sat32_counter_reg_count_w,
  h2l_rdr_sat32_counter_reg_count_incr,
  h2l_rdr_sat32_counter_reg_count_we,
  h2l_rdr_rcnt_sat_log_subch_w,
  h2l_rdr_rcnt_sat_log_subch_we,
  h2l_rdr_rcnt_sat_log_str_w,
  h2l_rdr_rcnt_sat_log_str_we,
  h2l_rdr_rcnt_sat_log_count_w,
  h2l_rdr_rcnt_sat_log_count_we,

  l2d_stats_disable_check_0_r,
  l2d_stats_disable_check_1_r,
  l2d_stats_features_r,
  l2d_stats_log_address1_r,
  l2d_stats_log_address2_r,
  l2d_stats_wide_reg_r,
  l2d_rdr_reorder_window_r,
  l2d_rdr_stream_reconf_r,
  l2d_rdr_roll32_counter_reg_r,
  l2d_rdr_sat32_counter_reg_r,
  l2d_rdr_rcnt_sat_log_r,
  l2d_extra_reg_r,
  l2h_stats_disable_check_0_timer_sram_r,
  l2h_stats_disable_check_0_cbuf_fifo_r,
  l2h_stats_disable_check_0_lut_st_r,
  l2h_stats_disable_check_0_l0_b0_r,
  l2h_stats_disable_check_0_l0_b1_r,
  l2h_stats_disable_check_0_l0_b2_r,
  l2h_stats_disable_check_0_l0_b3_r,
  l2h_stats_disable_check_0_intr_o,
  l2h_stats_disable_check_0_halt_o,
  l2h_stats_disable_check_1_timer_sram_r,
  l2h_stats_disable_check_1_cbuf_fifo_r,
  l2h_stats_disable_check_1_lut_st_r,
  l2h_stats_disable_check_1_l0_b0_r,
  l2h_stats_disable_check_1_l0_b1_r,
  l2h_stats_disable_check_1_l0_b2_r,
  l2h_stats_disable_check_1_l0_b3_r,
  l2h_stats_disable_check_1_intr_o,
  l2h_stats_disable_check_1_halt_o,
  l2h_stats_features_wdth_ored_o,
  l2h_stats_features_generator_anded_o,
  l2h_stats_features_checker_xored_o,
  l2h_stats_wide_reg_value_r,
  l2h_rdr_reorder_window_ws_enable_r,
  l2h_rdr_reorder_window_set_back_r,
  l2h_rdr_reorder_window_size_r,
  l2h_rdr_stream_reconf_stream_r,
  l2h_rdr_roll32_counter_reg_count_overflow_o,
  l2h_rdr_roll32_counter_reg_count_r,
  l2h_rdr_sat32_counter_reg_count_incrthold_o,
  l2h_rdr_sat32_counter_reg_count_r,
  l2h_rdr_rcnt_sat_log_en_r,
  l2h_rdr_rcnt_sat_log_count_r,
  l2h_extra_reg_value_r );

  //------- inputs
  input    clk;
  input    reset;
  input     [31:0] d2l_stats_disable_check_0_w;
  input    d2l_stats_disable_check_0_we;
  input    d2l_stats_disable_check_0_re;
  input     [31:0] d2l_stats_disable_check_1_w;
  input    d2l_stats_disable_check_1_we;
  input    d2l_stats_disable_check_1_re;
  input     [31:0] d2l_stats_features_w;
  input    d2l_stats_features_we;
  input    d2l_stats_features_re;
  input     [31:0] d2l_stats_log_address1_w;
  input    d2l_stats_log_address1_we;
  input    d2l_stats_log_address1_re;
  input     [31:0] d2l_stats_log_address2_w;
  input    d2l_stats_log_address2_we;
  input    d2l_stats_log_address2_re;
  input     [127:0] d2l_stats_wide_reg_w;
  input    d2l_stats_wide_reg_we;
  input    d2l_stats_wide_reg_re;
  input     [31:0] d2l_rdr_reorder_window_w;
  input    d2l_rdr_reorder_window_we;
  input    d2l_rdr_reorder_window_re;
  input     [31:0] d2l_rdr_stream_reconf_w;
  input    d2l_rdr_stream_reconf_we;
  input    d2l_rdr_stream_reconf_re;
  input     [31:0] d2l_rdr_roll32_counter_reg_w;
  input    d2l_rdr_roll32_counter_reg_we;
  input    d2l_rdr_roll32_counter_reg_re;
  input     [31:0] d2l_rdr_sat32_counter_reg_w;
  input    d2l_rdr_sat32_counter_reg_we;
  input    d2l_rdr_sat32_counter_reg_re;
  input     [31:0] d2l_rdr_rcnt_sat_log_w;
  input    d2l_rdr_rcnt_sat_log_we;
  input    d2l_rdr_rcnt_sat_log_re;
  input     [31:0] d2l_extra_reg_w;
  input    d2l_extra_reg_we;
  input    d2l_extra_reg_re;
  input    h2l_stats_disable_check_0_l0_b0_intr;
  input    h2l_stats_disable_check_0_l0_b1_intr;
  input    h2l_stats_disable_check_0_l0_b2_intr;
  input    h2l_stats_disable_check_1_l0_b0_intr;
  input    h2l_stats_disable_check_1_l0_b1_intr;
  input    h2l_stats_disable_check_1_l0_b2_intr;
  input     [9:0] h2l_stats_log_address1_value_w;
  input    h2l_stats_log_address1_value_we;
  input     [9:0] h2l_stats_log_address2_value_w;
  input    h2l_stats_log_address2_value_we;
  input     [95:0] h2l_stats_wide_reg_value_w;
  input    h2l_stats_wide_reg_value_we;
  input    sig_stats_another_reset;
  input    h2l_rdr_stream_reconf_busy_w;
  input     [3:0] h2l_rdr_roll32_counter_reg_count_w;
  input    h2l_rdr_roll32_counter_reg_count_incr;
  input    h2l_rdr_roll32_counter_reg_count_we;
  input     [3:0] h2l_rdr_sat32_counter_reg_count_w;
  input    h2l_rdr_sat32_counter_reg_count_incr;
  input    h2l_rdr_sat32_counter_reg_count_we;
  input     [4:0] h2l_rdr_rcnt_sat_log_subch_w;
  input    h2l_rdr_rcnt_sat_log_subch_we;
  input     [9:0] h2l_rdr_rcnt_sat_log_str_w;
  input    h2l_rdr_rcnt_sat_log_str_we;
  input     [15:0] h2l_rdr_rcnt_sat_log_count_w;
  input    h2l_rdr_rcnt_sat_log_count_we;

  //------- outputs
  output     [31:0] l2d_stats_disable_check_0_r;
  output     [31:0] l2d_stats_disable_check_1_r;
  output     [31:0] l2d_stats_features_r;
  output     [31:0] l2d_stats_log_address1_r;
  output     [31:0] l2d_stats_log_address2_r;
  output     [127:0] l2d_stats_wide_reg_r;
  output     [31:0] l2d_rdr_reorder_window_r;
  output     [31:0] l2d_rdr_stream_reconf_r;
  output     [31:0] l2d_rdr_roll32_counter_reg_r;
  output     [31:0] l2d_rdr_sat32_counter_reg_r;
  output     [31:0] l2d_rdr_rcnt_sat_log_r;
  output     [31:0] l2d_extra_reg_r;
  output    l2h_stats_disable_check_0_timer_sram_r;
  output    l2h_stats_disable_check_0_cbuf_fifo_r;
  output    l2h_stats_disable_check_0_lut_st_r;
  output    l2h_stats_disable_check_0_l0_b0_r;
  output    l2h_stats_disable_check_0_l0_b1_r;
  output    l2h_stats_disable_check_0_l0_b2_r;
  output    l2h_stats_disable_check_0_l0_b3_r;
  output    l2h_stats_disable_check_0_intr_o;
  output    l2h_stats_disable_check_0_halt_o;
  output    l2h_stats_disable_check_1_timer_sram_r;
  output    l2h_stats_disable_check_1_cbuf_fifo_r;
  output    l2h_stats_disable_check_1_lut_st_r;
  output    l2h_stats_disable_check_1_l0_b0_r;
  output    l2h_stats_disable_check_1_l0_b1_r;
  output    l2h_stats_disable_check_1_l0_b2_r;
  output    l2h_stats_disable_check_1_l0_b3_r;
  output    l2h_stats_disable_check_1_intr_o;
  output    l2h_stats_disable_check_1_halt_o;
  output    l2h_stats_features_wdth_ored_o;
  output    l2h_stats_features_generator_anded_o;
  output    l2h_stats_features_checker_xored_o;
  output     [95:0] l2h_stats_wide_reg_value_r;
  output    l2h_rdr_reorder_window_ws_enable_r;
  output     [10:0] l2h_rdr_reorder_window_set_back_r;
  output     [10:0] l2h_rdr_reorder_window_size_r;
  output     [9:0] l2h_rdr_stream_reconf_stream_r;
  output    l2h_rdr_roll32_counter_reg_count_overflow_o;
  output     [3:0] l2h_rdr_roll32_counter_reg_count_r;
  output    l2h_rdr_sat32_counter_reg_count_incrthold_o;
  output     [3:0] l2h_rdr_sat32_counter_reg_count_r;
  output    l2h_rdr_rcnt_sat_log_en_r;
  output     [15:0] l2h_rdr_rcnt_sat_log_count_r;
  output     [31:0] l2h_extra_reg_value_r;


  //------- wire defines
  logic  h2l_stats_disable_check_0_l0_b0_intr;
  logic  h2l_stats_disable_check_0_l0_b1_intr;
  logic  h2l_stats_disable_check_0_l0_b2_intr;
  logic  h2l_stats_disable_check_1_l0_b0_intr;
  logic  h2l_stats_disable_check_1_l0_b1_intr;
  logic  h2l_stats_disable_check_1_l0_b2_intr;
  logic   [1:0] rg_stats_features_version;
  logic  rg_stats_features_syn_logged;
  logic   [4:0] rg_stats_features_wdth;
  logic  rg_stats_features_generator;
  logic  rg_stats_features_checker;
  logic  rg_stats_features_correctable;
  logic  rg_stats_features_adr_logged;
  
  //------- reg defines
  logic  rg_stats_disable_check_0_timer_sram;
  logic  reg_stats_disable_check_0_timer_sram_next;
  logic  l2h_stats_disable_check_0_timer_sram_r;
  logic  rg_stats_disable_check_0_cbuf_fifo;
  logic  reg_stats_disable_check_0_cbuf_fifo_next;
  logic  l2h_stats_disable_check_0_cbuf_fifo_r;
  logic  rg_stats_disable_check_0_lut_st;
  logic  reg_stats_disable_check_0_lut_st_next;
  logic  l2h_stats_disable_check_0_lut_st_r;
  logic  rg_stats_disable_check_0_l0_b0;
  logic  reg_stats_disable_check_0_l0_b0_next;
  logic  l2h_stats_disable_check_0_intr_o;
  logic  l2h_stats_disable_check_0_l0_b0_r;
  logic  rg_stats_disable_check_0_l0_b1;
  logic  reg_stats_disable_check_0_l0_b1_next;
  logic  l2h_stats_disable_check_0_l0_b1_r;
  logic  rg_stats_disable_check_0_l0_b2;
  logic  reg_stats_disable_check_0_l0_b2_next;
  logic  l2h_stats_disable_check_0_halt_o;
  logic  l2h_stats_disable_check_0_l0_b2_r;
  logic  rg_stats_disable_check_0_l0_b3;
  logic  reg_stats_disable_check_0_l0_b3_next;
  logic  l2h_stats_disable_check_0_l0_b3_r;
  logic   [31:0] l2d_stats_disable_check_0_r;
  logic  rg_stats_disable_check_1_timer_sram;
  logic  reg_stats_disable_check_1_timer_sram_next;
  logic  l2h_stats_disable_check_1_timer_sram_r;
  logic  rg_stats_disable_check_1_cbuf_fifo;
  logic  reg_stats_disable_check_1_cbuf_fifo_next;
  logic  l2h_stats_disable_check_1_cbuf_fifo_r;
  logic  rg_stats_disable_check_1_lut_st;
  logic  reg_stats_disable_check_1_lut_st_next;
  logic  l2h_stats_disable_check_1_lut_st_r;
  logic  rg_stats_disable_check_1_l0_b0;
  logic  reg_stats_disable_check_1_l0_b0_next;
  logic  l2h_stats_disable_check_1_intr_o;
  logic  l2h_stats_disable_check_1_l0_b0_r;
  logic  rg_stats_disable_check_1_l0_b1;
  logic  reg_stats_disable_check_1_l0_b1_next;
  logic  l2h_stats_disable_check_1_l0_b1_r;
  logic  rg_stats_disable_check_1_l0_b2;
  logic  reg_stats_disable_check_1_l0_b2_next;
  logic  l2h_stats_disable_check_1_halt_o;
  logic  l2h_stats_disable_check_1_l0_b2_r;
  logic  rg_stats_disable_check_1_l0_b3;
  logic  reg_stats_disable_check_1_l0_b3_next;
  logic  l2h_stats_disable_check_1_l0_b3_r;
  logic   [31:0] l2d_stats_disable_check_1_r;
  logic   [1:0] rg_stats_features_default_rst_fld;
  logic   [1:0] reg_stats_features_default_rst_fld_next;
  logic   [1:0] rg_stats_features_alt_rst_fld;
  logic   [1:0] reg_stats_features_alt_rst_fld_next;
  logic  l2h_stats_features_wdth_ored_o;
  logic  l2h_stats_features_generator_anded_o;
  logic  l2h_stats_features_checker_xored_o;
  logic   [31:0] l2d_stats_features_r;
  logic   [9:0] rg_stats_log_address1_value;
  logic   [9:0] reg_stats_log_address1_value_next;
  logic   [31:0] l2d_stats_log_address1_r;
  logic   [9:0] rg_stats_log_address2_value;
  logic   [9:0] reg_stats_log_address2_value_next;
  logic   [31:0] l2d_stats_log_address2_r;
  logic   [95:0] rg_stats_wide_reg_value;
  logic   [95:0] reg_stats_wide_reg_value_next;
  logic   [95:0] l2h_stats_wide_reg_value_r;
  logic   [127:0] l2d_stats_wide_reg_r;
  logic  rg_rdr_reorder_window_ws_enable;
  logic  reg_rdr_reorder_window_ws_enable_next;
  logic  l2h_rdr_reorder_window_ws_enable_r;
  logic   [10:0] rg_rdr_reorder_window_set_back;
  logic   [10:0] reg_rdr_reorder_window_set_back_next;
  logic   [10:0] l2h_rdr_reorder_window_set_back_r;
  logic   [10:0] rg_rdr_reorder_window_size;
  logic   [10:0] reg_rdr_reorder_window_size_next;
  logic   [10:0] l2h_rdr_reorder_window_size_r;
  logic   [31:0] l2d_rdr_reorder_window_r;
  logic  rg_rdr_stream_reconf_busy;
  logic   [9:0] rg_rdr_stream_reconf_stream;
  logic   [9:0] reg_rdr_stream_reconf_stream_next;
  logic   [9:0] l2h_rdr_stream_reconf_stream_r;
  logic   [31:0] l2d_rdr_stream_reconf_r;
  logic   [3:0] rg_rdr_roll32_counter_reg_count;
  logic   [3:0] reg_rdr_roll32_counter_reg_count_next;
  logic   [4:0] cntr_rdr_roll32_counter_reg_count_next;
  logic  l2h_rdr_roll32_counter_reg_count_overflow_o;
  logic   [3:0] l2h_rdr_roll32_counter_reg_count_r;
  logic   [31:0] l2d_rdr_roll32_counter_reg_r;
  logic   [3:0] rg_rdr_sat32_counter_reg_count;
  logic   [3:0] reg_rdr_sat32_counter_reg_count_next;
  logic   [4:0] cntr_rdr_sat32_counter_reg_count_next;
  logic  l2h_rdr_sat32_counter_reg_count_incrsat_o;
  logic  l2h_rdr_sat32_counter_reg_count_incrthold_o;
  logic   [3:0] l2h_rdr_sat32_counter_reg_count_r;
  logic   [31:0] l2d_rdr_sat32_counter_reg_r;
  logic  rg_rdr_rcnt_sat_log_en;
  logic  reg_rdr_rcnt_sat_log_en_next;
  logic  l2h_rdr_rcnt_sat_log_en_r;
  logic   [4:0] rg_rdr_rcnt_sat_log_subch;
  logic   [4:0] reg_rdr_rcnt_sat_log_subch_next;
  logic   [9:0] rg_rdr_rcnt_sat_log_str;
  logic   [9:0] reg_rdr_rcnt_sat_log_str_next;
  logic   [15:0] rg_rdr_rcnt_sat_log_count;
  logic   [15:0] reg_rdr_rcnt_sat_log_count_next;
  logic   [16:0] cntr_rdr_rcnt_sat_log_count_next;
  logic  h2l_rdr_rcnt_sat_log_count_incr;
  logic  l2h_rdr_rcnt_sat_log_count_incrsat_o;
  logic   [15:0] l2h_rdr_rcnt_sat_log_count_r;
  logic   [31:0] l2d_rdr_rcnt_sat_log_r;
  logic   [31:0] rg_extra_reg_value;
  logic   [31:0] reg_extra_reg_value_next;
  logic   [31:0] l2h_extra_reg_value_r;
  logic   [31:0] l2d_extra_reg_r;
  
  
  //------- assigns
  assign  rg_stats_features_version = 2'd2;
  assign  rg_stats_features_syn_logged = 1'd0;
  assign  rg_stats_features_wdth = 5'd7;
  assign  rg_stats_features_generator = 1'd1;
  assign  rg_stats_features_checker = 1'd1;
  assign  rg_stats_features_correctable = 1'd0;
  assign  rg_stats_features_adr_logged = 1'd1;
  
  //------- combinatorial assigns for stats_log_address2 (pio read data)
  always_comb begin
    l2d_stats_log_address2_r = 32'b0;
    l2d_stats_log_address2_r [9:0]  = rg_stats_log_address2_value;
  end
  
  //------- combinatorial assigns for stats_wide_reg
  always_comb begin
    reg_stats_wide_reg_value_next = rg_stats_wide_reg_value;
    l2h_stats_wide_reg_value_r = rg_stats_wide_reg_value;
    if (h2l_stats_wide_reg_value_we) reg_stats_wide_reg_value_next = h2l_stats_wide_reg_value_w;
    if (d2l_stats_wide_reg_we) reg_stats_wide_reg_value_next = d2l_stats_wide_reg_w [95:0] ;
  end
  
  //------- reg assigns for stats_wide_reg
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_stats_wide_reg_value <= #1 96'ha5a5a5a5a5a5a5a5a5a5a5a5;
    end
    else begin
      rg_stats_wide_reg_value <= #1  reg_stats_wide_reg_value_next;
    end
  end
  
  //------- combinatorial assigns for stats_disable_check_1 (pio read data)
  always_comb begin
    l2d_stats_disable_check_1_r = 32'b0;
    l2d_stats_disable_check_1_r [0]  = rg_stats_disable_check_1_timer_sram;
    l2d_stats_disable_check_1_r [1]  = rg_stats_disable_check_1_cbuf_fifo;
    l2d_stats_disable_check_1_r [2]  = rg_stats_disable_check_1_lut_st;
    l2d_stats_disable_check_1_r [3]  = rg_stats_disable_check_1_l0_b0;
    l2d_stats_disable_check_1_r [4]  = rg_stats_disable_check_1_l0_b1;
    l2d_stats_disable_check_1_r [5]  = rg_stats_disable_check_1_l0_b2;
    l2d_stats_disable_check_1_r [6]  = rg_stats_disable_check_1_l0_b3;
  end
  
  //------- combinatorial assigns for rdr_reorder_window (pio read data)
  always_comb begin
    l2d_rdr_reorder_window_r = 32'b0;
    l2d_rdr_reorder_window_r [31]  = rg_rdr_reorder_window_ws_enable;
    l2d_rdr_reorder_window_r [26:16]  = rg_rdr_reorder_window_set_back;
    l2d_rdr_reorder_window_r [10:0]  = rg_rdr_reorder_window_size;
  end
  
  //------- combinatorial assigns for extra_reg
  always_comb begin
    reg_extra_reg_value_next = rg_extra_reg_value;
    l2h_extra_reg_value_r = rg_extra_reg_value;
    if (d2l_extra_reg_we) reg_extra_reg_value_next = d2l_extra_reg_w;
  end
  
  //------- reg assigns for extra_reg
  always_ff @ (posedge clk) begin
    rg_extra_reg_value <= #1  reg_extra_reg_value_next;
  end
  
  //------- combinatorial assigns for stats_disable_check_0 (pio read data)
  always_comb begin
    l2d_stats_disable_check_0_r = 32'b0;
    l2d_stats_disable_check_0_r [0]  = rg_stats_disable_check_0_timer_sram;
    l2d_stats_disable_check_0_r [1]  = rg_stats_disable_check_0_cbuf_fifo;
    l2d_stats_disable_check_0_r [2]  = rg_stats_disable_check_0_lut_st;
    l2d_stats_disable_check_0_r [3]  = rg_stats_disable_check_0_l0_b0;
    l2d_stats_disable_check_0_r [4]  = rg_stats_disable_check_0_l0_b1;
    l2d_stats_disable_check_0_r [5]  = rg_stats_disable_check_0_l0_b2;
    l2d_stats_disable_check_0_r [6]  = rg_stats_disable_check_0_l0_b3;
  end
  
  //------- combinatorial assigns for stats_disable_check_0
  always_comb begin
    reg_stats_disable_check_0_timer_sram_next = rg_stats_disable_check_0_timer_sram;
    l2h_stats_disable_check_0_timer_sram_r = rg_stats_disable_check_0_timer_sram;
    reg_stats_disable_check_0_cbuf_fifo_next = rg_stats_disable_check_0_cbuf_fifo;
    l2h_stats_disable_check_0_cbuf_fifo_r = rg_stats_disable_check_0_cbuf_fifo;
    reg_stats_disable_check_0_lut_st_next = rg_stats_disable_check_0_lut_st;
    l2h_stats_disable_check_0_lut_st_r = rg_stats_disable_check_0_lut_st;
    reg_stats_disable_check_0_l0_b0_next = rg_stats_disable_check_0_l0_b0;
    l2h_stats_disable_check_0_l0_b0_r = rg_stats_disable_check_0_l0_b0;
    reg_stats_disable_check_0_l0_b1_next = rg_stats_disable_check_0_l0_b1;
    l2h_stats_disable_check_0_l0_b1_r = rg_stats_disable_check_0_l0_b1;
    reg_stats_disable_check_0_l0_b2_next = rg_stats_disable_check_0_l0_b2;
    l2h_stats_disable_check_0_l0_b2_r = rg_stats_disable_check_0_l0_b2;
    reg_stats_disable_check_0_l0_b3_next = rg_stats_disable_check_0_l0_b3;
    l2h_stats_disable_check_0_l0_b3_r = rg_stats_disable_check_0_l0_b3;
    l2h_stats_disable_check_0_intr_o = 1'b0;
    reg_stats_disable_check_0_l0_b0_next = (h2l_stats_disable_check_0_l0_b0_intr | rg_stats_disable_check_0_l0_b0);
    l2h_stats_disable_check_0_intr_o = l2h_stats_disable_check_0_intr_o | (rg_stats_disable_check_0_l0_b0);
    reg_stats_disable_check_0_l0_b1_next = (h2l_stats_disable_check_0_l0_b1_intr | rg_stats_disable_check_0_l0_b1);
    l2h_stats_disable_check_0_intr_o = l2h_stats_disable_check_0_intr_o | (rg_stats_disable_check_0_l0_b1);
    l2h_stats_disable_check_0_halt_o = 1'b0;
    reg_stats_disable_check_0_l0_b2_next = (h2l_stats_disable_check_0_l0_b2_intr | rg_stats_disable_check_0_l0_b2);
    l2h_stats_disable_check_0_intr_o = l2h_stats_disable_check_0_intr_o | (rg_stats_disable_check_0_l0_b2);
    l2h_stats_disable_check_0_halt_o = l2h_stats_disable_check_0_halt_o | (rg_stats_disable_check_0_l0_b2);
    if (d2l_stats_disable_check_0_we) reg_stats_disable_check_0_timer_sram_next = d2l_stats_disable_check_0_w [0] ;
    if (d2l_stats_disable_check_0_we) reg_stats_disable_check_0_cbuf_fifo_next = d2l_stats_disable_check_0_w [1] ;
    if (d2l_stats_disable_check_0_we) reg_stats_disable_check_0_lut_st_next = d2l_stats_disable_check_0_w [2] ;
    if (d2l_stats_disable_check_0_we) reg_stats_disable_check_0_l0_b0_next = d2l_stats_disable_check_0_w [3] ;
    if (d2l_stats_disable_check_0_we) reg_stats_disable_check_0_l0_b1_next = d2l_stats_disable_check_0_w [4] ;
    if (d2l_stats_disable_check_0_we) reg_stats_disable_check_0_l0_b2_next = d2l_stats_disable_check_0_w [5] ;
    if (d2l_stats_disable_check_0_we) reg_stats_disable_check_0_l0_b3_next = d2l_stats_disable_check_0_w [6] ;
  end
  
  //------- reg assigns for stats_disable_check_0
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_stats_disable_check_0_timer_sram <= #1 1'd0;
      rg_stats_disable_check_0_cbuf_fifo <= #1 1'd0;
      rg_stats_disable_check_0_lut_st <= #1 1'd0;
      rg_stats_disable_check_0_l0_b0 <= #1 1'd0;
      rg_stats_disable_check_0_l0_b1 <= #1 1'd0;
      rg_stats_disable_check_0_l0_b2 <= #1 1'd0;
      rg_stats_disable_check_0_l0_b3 <= #1 1'd0;
    end
    else begin
      rg_stats_disable_check_0_timer_sram <= #1  reg_stats_disable_check_0_timer_sram_next;
      rg_stats_disable_check_0_cbuf_fifo <= #1  reg_stats_disable_check_0_cbuf_fifo_next;
      rg_stats_disable_check_0_lut_st <= #1  reg_stats_disable_check_0_lut_st_next;
      rg_stats_disable_check_0_l0_b0 <= #1  reg_stats_disable_check_0_l0_b0_next;
      rg_stats_disable_check_0_l0_b1 <= #1  reg_stats_disable_check_0_l0_b1_next;
      rg_stats_disable_check_0_l0_b2 <= #1  reg_stats_disable_check_0_l0_b2_next;
      rg_stats_disable_check_0_l0_b3 <= #1  reg_stats_disable_check_0_l0_b3_next;
    end
  end
  
  //------- combinatorial assigns for stats_disable_check_1
  always_comb begin
    reg_stats_disable_check_1_timer_sram_next = rg_stats_disable_check_1_timer_sram;
    l2h_stats_disable_check_1_timer_sram_r = rg_stats_disable_check_1_timer_sram;
    reg_stats_disable_check_1_cbuf_fifo_next = rg_stats_disable_check_1_cbuf_fifo;
    l2h_stats_disable_check_1_cbuf_fifo_r = rg_stats_disable_check_1_cbuf_fifo;
    reg_stats_disable_check_1_lut_st_next = rg_stats_disable_check_1_lut_st;
    l2h_stats_disable_check_1_lut_st_r = rg_stats_disable_check_1_lut_st;
    reg_stats_disable_check_1_l0_b0_next = rg_stats_disable_check_1_l0_b0;
    l2h_stats_disable_check_1_l0_b0_r = rg_stats_disable_check_1_l0_b0;
    reg_stats_disable_check_1_l0_b1_next = rg_stats_disable_check_1_l0_b1;
    l2h_stats_disable_check_1_l0_b1_r = rg_stats_disable_check_1_l0_b1;
    reg_stats_disable_check_1_l0_b2_next = rg_stats_disable_check_1_l0_b2;
    l2h_stats_disable_check_1_l0_b2_r = rg_stats_disable_check_1_l0_b2;
    reg_stats_disable_check_1_l0_b3_next = rg_stats_disable_check_1_l0_b3;
    l2h_stats_disable_check_1_l0_b3_r = rg_stats_disable_check_1_l0_b3;
    l2h_stats_disable_check_1_intr_o = 1'b0;
    reg_stats_disable_check_1_l0_b0_next = (h2l_stats_disable_check_1_l0_b0_intr | rg_stats_disable_check_1_l0_b0);
    l2h_stats_disable_check_1_intr_o = l2h_stats_disable_check_1_intr_o | (rg_stats_disable_check_1_l0_b0);
    reg_stats_disable_check_1_l0_b1_next = (h2l_stats_disable_check_1_l0_b1_intr | rg_stats_disable_check_1_l0_b1);
    l2h_stats_disable_check_1_intr_o = l2h_stats_disable_check_1_intr_o | (rg_stats_disable_check_1_l0_b1);
    l2h_stats_disable_check_1_halt_o = 1'b0;
    reg_stats_disable_check_1_l0_b2_next = (h2l_stats_disable_check_1_l0_b2_intr | rg_stats_disable_check_1_l0_b2);
    l2h_stats_disable_check_1_intr_o = l2h_stats_disable_check_1_intr_o | (rg_stats_disable_check_1_l0_b2);
    l2h_stats_disable_check_1_halt_o = l2h_stats_disable_check_1_halt_o | (rg_stats_disable_check_1_l0_b2);
    if (d2l_stats_disable_check_1_we) reg_stats_disable_check_1_timer_sram_next = d2l_stats_disable_check_1_w [0] ;
    if (d2l_stats_disable_check_1_we) reg_stats_disable_check_1_cbuf_fifo_next = d2l_stats_disable_check_1_w [1] ;
    if (d2l_stats_disable_check_1_we) reg_stats_disable_check_1_lut_st_next = d2l_stats_disable_check_1_w [2] ;
    if (d2l_stats_disable_check_1_we) reg_stats_disable_check_1_l0_b0_next = d2l_stats_disable_check_1_w [3] ;
    if (d2l_stats_disable_check_1_we) reg_stats_disable_check_1_l0_b1_next = d2l_stats_disable_check_1_w [4] ;
    if (d2l_stats_disable_check_1_we) reg_stats_disable_check_1_l0_b2_next = d2l_stats_disable_check_1_w [5] ;
    if (d2l_stats_disable_check_1_we) reg_stats_disable_check_1_l0_b3_next = d2l_stats_disable_check_1_w [6] ;
  end
  
  //------- reg assigns for stats_disable_check_1
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_stats_disable_check_1_timer_sram <= #1 1'd0;
      rg_stats_disable_check_1_cbuf_fifo <= #1 1'd0;
      rg_stats_disable_check_1_lut_st <= #1 1'd0;
      rg_stats_disable_check_1_l0_b0 <= #1 1'd0;
      rg_stats_disable_check_1_l0_b1 <= #1 1'd0;
      rg_stats_disable_check_1_l0_b2 <= #1 1'd0;
      rg_stats_disable_check_1_l0_b3 <= #1 1'd0;
    end
    else begin
      rg_stats_disable_check_1_timer_sram <= #1  reg_stats_disable_check_1_timer_sram_next;
      rg_stats_disable_check_1_cbuf_fifo <= #1  reg_stats_disable_check_1_cbuf_fifo_next;
      rg_stats_disable_check_1_lut_st <= #1  reg_stats_disable_check_1_lut_st_next;
      rg_stats_disable_check_1_l0_b0 <= #1  reg_stats_disable_check_1_l0_b0_next;
      rg_stats_disable_check_1_l0_b1 <= #1  reg_stats_disable_check_1_l0_b1_next;
      rg_stats_disable_check_1_l0_b2 <= #1  reg_stats_disable_check_1_l0_b2_next;
      rg_stats_disable_check_1_l0_b3 <= #1  reg_stats_disable_check_1_l0_b3_next;
    end
  end
  
  //------- reg assigns for stats_features (reset=sig_stats_another_reset)
  always_ff @ (posedge clk) begin
    if (sig_stats_another_reset) begin
      rg_stats_features_alt_rst_fld <= #1 2'd0;
    end
    else begin
      rg_stats_features_alt_rst_fld <= #1  reg_stats_features_alt_rst_fld_next;
    end
  end
  
  //------- combinatorial assigns for stats_features
  always_comb begin
    reg_stats_features_default_rst_fld_next = rg_stats_features_default_rst_fld;
    reg_stats_features_alt_rst_fld_next = rg_stats_features_alt_rst_fld;
    l2h_stats_features_wdth_ored_o = | rg_stats_features_wdth;
    l2h_stats_features_generator_anded_o = & rg_stats_features_generator;
    l2h_stats_features_checker_xored_o = ^ rg_stats_features_checker;
    if (d2l_stats_features_we) reg_stats_features_default_rst_fld_next = d2l_stats_features_w [17:16] ;
    if (d2l_stats_features_we) reg_stats_features_alt_rst_fld_next = d2l_stats_features_w [15:14] ;
  end
  
  //------- reg assigns for stats_features
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_stats_features_default_rst_fld <= #1 2'd0;
    end
    else begin
      rg_stats_features_default_rst_fld <= #1  reg_stats_features_default_rst_fld_next;
    end
  end
  
  //------- combinatorial assigns for stats_features (pio read data)
  always_comb begin
    l2d_stats_features_r = 32'b0;
    l2d_stats_features_r [31:30]  = rg_stats_features_version;
    l2d_stats_features_r [17:16]  = rg_stats_features_default_rst_fld;
    l2d_stats_features_r [15:14]  = rg_stats_features_alt_rst_fld;
    l2d_stats_features_r [9]  = rg_stats_features_syn_logged;
    l2d_stats_features_r [8:4]  = rg_stats_features_wdth;
    l2d_stats_features_r [3]  = rg_stats_features_generator;
    l2d_stats_features_r [2]  = rg_stats_features_checker;
    l2d_stats_features_r [1]  = rg_stats_features_correctable;
    l2d_stats_features_r [0]  = rg_stats_features_adr_logged;
  end
  
  //------- combinatorial assigns for rdr_sat32_counter_reg
  always_comb begin
    reg_rdr_sat32_counter_reg_count_next = rg_rdr_sat32_counter_reg_count;
    cntr_rdr_sat32_counter_reg_count_next = { 1'b0, rg_rdr_sat32_counter_reg_count};
    l2h_rdr_sat32_counter_reg_count_r = rg_rdr_sat32_counter_reg_count;
    if (d2l_rdr_sat32_counter_reg_we) cntr_rdr_sat32_counter_reg_count_next = d2l_rdr_sat32_counter_reg_w [3:0] ;
    if (d2l_rdr_sat32_counter_reg_re) cntr_rdr_sat32_counter_reg_count_next = 4'b0;
    if (h2l_rdr_sat32_counter_reg_count_incr)
       cntr_rdr_sat32_counter_reg_count_next = cntr_rdr_sat32_counter_reg_count_next + 5'd1;
    if (cntr_rdr_sat32_counter_reg_count_next > 5'b1111)
       cntr_rdr_sat32_counter_reg_count_next = 5'b1111;
    l2h_rdr_sat32_counter_reg_count_incrsat_o = ( {1'b0, rg_rdr_sat32_counter_reg_count} == 5'b1111);
    l2h_rdr_sat32_counter_reg_count_incrthold_o = ( {1'b0, rg_rdr_sat32_counter_reg_count} == 5'h8);
    reg_rdr_sat32_counter_reg_count_next = cntr_rdr_sat32_counter_reg_count_next [3:0] ;
    if (h2l_rdr_sat32_counter_reg_count_we) reg_rdr_sat32_counter_reg_count_next = h2l_rdr_sat32_counter_reg_count_w;
  end
  
  //------- reg assigns for rdr_sat32_counter_reg
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_rdr_sat32_counter_reg_count <= #1 4'd0;
    end
    else begin
      rg_rdr_sat32_counter_reg_count <= #1  reg_rdr_sat32_counter_reg_count_next;
    end
  end
  
  //------- combinatorial assigns for stats_log_address1
  always_comb begin
    reg_stats_log_address1_value_next = rg_stats_log_address1_value;
    if (h2l_stats_log_address1_value_we) reg_stats_log_address1_value_next = h2l_stats_log_address1_value_w;
    if (d2l_stats_log_address1_we) reg_stats_log_address1_value_next = d2l_stats_log_address1_w [9:0] ;
  end
  
  //------- reg assigns for stats_log_address1
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_stats_log_address1_value <= #1 10'd0;
    end
    else begin
      rg_stats_log_address1_value <= #1  reg_stats_log_address1_value_next;
    end
  end
  
  //------- combinatorial assigns for rdr_stream_reconf
  always_comb begin
    rg_rdr_stream_reconf_busy =  h2l_rdr_stream_reconf_busy_w;
    reg_rdr_stream_reconf_stream_next = rg_rdr_stream_reconf_stream;
    l2h_rdr_stream_reconf_stream_r = rg_rdr_stream_reconf_stream;
    if (d2l_rdr_stream_reconf_we) reg_rdr_stream_reconf_stream_next = d2l_rdr_stream_reconf_w [9:0] ;
  end
  
  //------- reg assigns for rdr_stream_reconf
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_rdr_stream_reconf_stream <= #1 10'd0;
    end
    else begin
      rg_rdr_stream_reconf_stream <= #1  reg_rdr_stream_reconf_stream_next;
    end
  end
  
  //------- combinatorial assigns for stats_log_address2
  always_comb begin
    reg_stats_log_address2_value_next = rg_stats_log_address2_value;
    if (h2l_stats_log_address2_value_we) reg_stats_log_address2_value_next = h2l_stats_log_address2_value_w;
    if (d2l_stats_log_address2_we) reg_stats_log_address2_value_next = d2l_stats_log_address2_w [9:0] ;
  end
  
  //------- reg assigns for stats_log_address2
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_stats_log_address2_value <= #1 10'd0;
    end
    else begin
      rg_stats_log_address2_value <= #1  reg_stats_log_address2_value_next;
    end
  end
  
  //------- combinatorial assigns for stats_log_address1 (pio read data)
  always_comb begin
    l2d_stats_log_address1_r = 32'b0;
    l2d_stats_log_address1_r [9:0]  = rg_stats_log_address1_value;
  end
  
  //------- combinatorial assigns for rdr_stream_reconf (pio read data)
  always_comb begin
    l2d_rdr_stream_reconf_r = 32'b0;
    l2d_rdr_stream_reconf_r [16]  = rg_rdr_stream_reconf_busy;
    l2d_rdr_stream_reconf_r [9:0]  = rg_rdr_stream_reconf_stream;
  end
  
  //------- combinatorial assigns for rdr_rcnt_sat_log (pio read data)
  always_comb begin
    l2d_rdr_rcnt_sat_log_r [31]  = rg_rdr_rcnt_sat_log_en;
    l2d_rdr_rcnt_sat_log_r [30:26]  = rg_rdr_rcnt_sat_log_subch;
    l2d_rdr_rcnt_sat_log_r [25:16]  = rg_rdr_rcnt_sat_log_str;
    l2d_rdr_rcnt_sat_log_r [15:0]  = rg_rdr_rcnt_sat_log_count;
  end
  
  //------- combinatorial assigns for rdr_reorder_window
  always_comb begin
    reg_rdr_reorder_window_ws_enable_next = rg_rdr_reorder_window_ws_enable;
    l2h_rdr_reorder_window_ws_enable_r = rg_rdr_reorder_window_ws_enable;
    reg_rdr_reorder_window_set_back_next = rg_rdr_reorder_window_set_back;
    l2h_rdr_reorder_window_set_back_r = rg_rdr_reorder_window_set_back;
    reg_rdr_reorder_window_size_next = rg_rdr_reorder_window_size;
    l2h_rdr_reorder_window_size_r = rg_rdr_reorder_window_size;
    if (d2l_rdr_reorder_window_we) reg_rdr_reorder_window_ws_enable_next = d2l_rdr_reorder_window_w [31] ;
    if (d2l_rdr_reorder_window_we) reg_rdr_reorder_window_set_back_next = d2l_rdr_reorder_window_w [26:16] ;
    if (d2l_rdr_reorder_window_we) reg_rdr_reorder_window_size_next = d2l_rdr_reorder_window_w [10:0] ;
  end
  
  //------- reg assigns for rdr_reorder_window
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_rdr_reorder_window_ws_enable <= #1 1'd1;
      rg_rdr_reorder_window_set_back <= #1 11'd16;
      rg_rdr_reorder_window_size <= #1 11'd128;
    end
    else begin
      rg_rdr_reorder_window_ws_enable <= #1  reg_rdr_reorder_window_ws_enable_next;
      rg_rdr_reorder_window_set_back <= #1  reg_rdr_reorder_window_set_back_next;
      rg_rdr_reorder_window_size <= #1  reg_rdr_reorder_window_size_next;
    end
  end
  
  //------- combinatorial assigns for stats_wide_reg (pio read data)
  always_comb begin
    l2d_stats_wide_reg_r = 128'b0;
    l2d_stats_wide_reg_r [95:0]  = rg_stats_wide_reg_value;
  end
  
  //------- combinatorial assigns for extra_reg (pio read data)
  always_comb begin
    l2d_extra_reg_r = rg_extra_reg_value;
  end
  
  //------- combinatorial assigns for rdr_roll32_counter_reg
  always_comb begin
    reg_rdr_roll32_counter_reg_count_next = rg_rdr_roll32_counter_reg_count;
    cntr_rdr_roll32_counter_reg_count_next = { 1'b0, rg_rdr_roll32_counter_reg_count};
    l2h_rdr_roll32_counter_reg_count_r = rg_rdr_roll32_counter_reg_count;
    if (d2l_rdr_roll32_counter_reg_we) cntr_rdr_roll32_counter_reg_count_next = d2l_rdr_roll32_counter_reg_w [3:0] ;
    if (h2l_rdr_roll32_counter_reg_count_incr)
       cntr_rdr_roll32_counter_reg_count_next = cntr_rdr_roll32_counter_reg_count_next + 5'd1;
    reg_rdr_roll32_counter_reg_count_next = cntr_rdr_roll32_counter_reg_count_next [3:0] ;
    if (h2l_rdr_roll32_counter_reg_count_we) reg_rdr_roll32_counter_reg_count_next = h2l_rdr_roll32_counter_reg_count_w;
  end
  
  //------- reg assigns for rdr_roll32_counter_reg
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_rdr_roll32_counter_reg_count <= #1 4'd0;
    end
    else begin
      rg_rdr_roll32_counter_reg_count <= #1  reg_rdr_roll32_counter_reg_count_next;
    end
    l2h_rdr_roll32_counter_reg_count_overflow_o <= #1 cntr_rdr_roll32_counter_reg_count_next[4] & ~l2h_rdr_roll32_counter_reg_count_overflow_o;
  end
  
  //------- combinatorial assigns for rdr_sat32_counter_reg (pio read data)
  always_comb begin
    l2d_rdr_sat32_counter_reg_r = 32'b0;
    l2d_rdr_sat32_counter_reg_r [3:0]  = rg_rdr_sat32_counter_reg_count;
  end
  
  //------- combinatorial assigns for rdr_roll32_counter_reg (pio read data)
  always_comb begin
    l2d_rdr_roll32_counter_reg_r = 32'b0;
    l2d_rdr_roll32_counter_reg_r [3:0]  = rg_rdr_roll32_counter_reg_count;
  end
  
  //------- combinatorial assigns for rdr_rcnt_sat_log
  always_comb begin
    reg_rdr_rcnt_sat_log_en_next = rg_rdr_rcnt_sat_log_en;
    l2h_rdr_rcnt_sat_log_en_r = rg_rdr_rcnt_sat_log_en;
    reg_rdr_rcnt_sat_log_subch_next = rg_rdr_rcnt_sat_log_subch;
    reg_rdr_rcnt_sat_log_str_next = rg_rdr_rcnt_sat_log_str;
    reg_rdr_rcnt_sat_log_count_next = rg_rdr_rcnt_sat_log_count;
    cntr_rdr_rcnt_sat_log_count_next = { 1'b0, rg_rdr_rcnt_sat_log_count};
    l2h_rdr_rcnt_sat_log_count_r = rg_rdr_rcnt_sat_log_count;
    if (h2l_rdr_rcnt_sat_log_subch_we) reg_rdr_rcnt_sat_log_subch_next = h2l_rdr_rcnt_sat_log_subch_w;
    if (h2l_rdr_rcnt_sat_log_str_we) reg_rdr_rcnt_sat_log_str_next = h2l_rdr_rcnt_sat_log_str_w;
    if (d2l_rdr_rcnt_sat_log_we) cntr_rdr_rcnt_sat_log_count_next = d2l_rdr_rcnt_sat_log_w [15:0] ;
    if (d2l_rdr_rcnt_sat_log_re) cntr_rdr_rcnt_sat_log_count_next = 16'b0;
    if (d2l_rdr_rcnt_sat_log_we) reg_rdr_rcnt_sat_log_en_next = d2l_rdr_rcnt_sat_log_w [31] ;
    if (d2l_rdr_rcnt_sat_log_we) reg_rdr_rcnt_sat_log_subch_next = d2l_rdr_rcnt_sat_log_w [30:26] ;
    if (d2l_rdr_rcnt_sat_log_re) reg_rdr_rcnt_sat_log_subch_next = 5'b0;
    if (d2l_rdr_rcnt_sat_log_we) reg_rdr_rcnt_sat_log_str_next = d2l_rdr_rcnt_sat_log_w [25:16] ;
    if (d2l_rdr_rcnt_sat_log_re) reg_rdr_rcnt_sat_log_str_next = 10'b0;
    h2l_rdr_rcnt_sat_log_count_incr = l2h_rdr_roll32_counter_reg_count_overflow_o;
    if (h2l_rdr_rcnt_sat_log_count_incr)
       cntr_rdr_rcnt_sat_log_count_next = cntr_rdr_rcnt_sat_log_count_next + 17'h1;
    if (cntr_rdr_rcnt_sat_log_count_next > 17'b1111111111111111)
       cntr_rdr_rcnt_sat_log_count_next = 17'b1111111111111111;
    l2h_rdr_rcnt_sat_log_count_incrsat_o = ( {1'b0, rg_rdr_rcnt_sat_log_count} == 17'b1111111111111111);
    reg_rdr_rcnt_sat_log_count_next = cntr_rdr_rcnt_sat_log_count_next [15:0] ;
    if (h2l_rdr_rcnt_sat_log_count_we) reg_rdr_rcnt_sat_log_count_next = h2l_rdr_rcnt_sat_log_count_w;
  end
  
  //------- reg assigns for rdr_rcnt_sat_log
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_rdr_rcnt_sat_log_en <= #1 1'd1;
      rg_rdr_rcnt_sat_log_subch <= #1 5'd0;
      rg_rdr_rcnt_sat_log_str <= #1 10'd0;
      rg_rdr_rcnt_sat_log_count <= #1 16'd0;
    end
    else begin
      rg_rdr_rcnt_sat_log_en <= #1  reg_rdr_rcnt_sat_log_en_next;
      rg_rdr_rcnt_sat_log_subch <= #1  reg_rdr_rcnt_sat_log_subch_next;
      rg_rdr_rcnt_sat_log_str <= #1  reg_rdr_rcnt_sat_log_str_next;
      rg_rdr_rcnt_sat_log_count <= #1  reg_rdr_rcnt_sat_log_count_next;
    end
  end
  
endmodule

//
//---------- module simple1_jrdl_decode
//
module simple1_jrdl_decode
(
  clk,
  reset,
  leaf_dec_wr_data,
  leaf_dec_addr,
  leaf_dec_block_sel,
  leaf_dec_valid,
  leaf_dec_wr_dvld,
  leaf_dec_cycle,
  leaf_dec_wr_width,
  l2d_stats_disable_check_0_r,
  l2d_stats_disable_check_1_r,
  l2d_stats_features_r,
  l2d_stats_log_address1_r,
  l2d_stats_log_address2_r,
  l2d_stats_wide_reg_r,
  l2d_rdr_reorder_window_r,
  l2d_rdr_stream_reconf_r,
  l2d_rdr_roll32_counter_reg_r,
  l2d_rdr_sat32_counter_reg_r,
  l2d_rdr_rcnt_sat_log_r,
  l2d_extra_reg_r,
  h2d_rdr_cp_fp_wr_r,
  h2d_rdr_cp_fp_wr_ack,
  h2d_rdr_cp_fp_wr_nack,

  dec_leaf_rd_data,
  dec_leaf_ack,
  dec_leaf_nack,
  dec_leaf_accept,
  dec_leaf_reject,
  dec_leaf_retry_atomic,
  dec_leaf_data_width,
  d2l_stats_disable_check_0_w,
  d2l_stats_disable_check_0_we,
  d2l_stats_disable_check_0_re,
  d2l_stats_disable_check_1_w,
  d2l_stats_disable_check_1_we,
  d2l_stats_disable_check_1_re,
  d2l_stats_features_w,
  d2l_stats_features_we,
  d2l_stats_features_re,
  d2l_stats_log_address1_w,
  d2l_stats_log_address1_we,
  d2l_stats_log_address1_re,
  d2l_stats_log_address2_w,
  d2l_stats_log_address2_we,
  d2l_stats_log_address2_re,
  d2l_stats_wide_reg_w,
  d2l_stats_wide_reg_we,
  d2l_stats_wide_reg_re,
  d2l_rdr_reorder_window_w,
  d2l_rdr_reorder_window_we,
  d2l_rdr_reorder_window_re,
  d2l_rdr_stream_reconf_w,
  d2l_rdr_stream_reconf_we,
  d2l_rdr_stream_reconf_re,
  d2l_rdr_roll32_counter_reg_w,
  d2l_rdr_roll32_counter_reg_we,
  d2l_rdr_roll32_counter_reg_re,
  d2l_rdr_sat32_counter_reg_w,
  d2l_rdr_sat32_counter_reg_we,
  d2l_rdr_sat32_counter_reg_re,
  d2l_rdr_rcnt_sat_log_w,
  d2l_rdr_rcnt_sat_log_we,
  d2l_rdr_rcnt_sat_log_re,
  d2l_extra_reg_w,
  d2l_extra_reg_we,
  d2l_extra_reg_re,
  d2h_rdr_cp_fp_wr_w,
  d2h_rdr_cp_fp_wr_we,
  d2h_rdr_cp_fp_wr_re,
  d2h_rdr_cp_fp_wr_addr );

  //------- inputs
  input    clk;
  input    reset;
  input     [127:0] leaf_dec_wr_data;
  input     [39:0] leaf_dec_addr;
  input    leaf_dec_block_sel;
  input    leaf_dec_valid;
  input    leaf_dec_wr_dvld;
  input     [1:0] leaf_dec_cycle;
  input     [2:0] leaf_dec_wr_width;
  input     [31:0] l2d_stats_disable_check_0_r;
  input     [31:0] l2d_stats_disable_check_1_r;
  input     [31:0] l2d_stats_features_r;
  input     [31:0] l2d_stats_log_address1_r;
  input     [31:0] l2d_stats_log_address2_r;
  input     [127:0] l2d_stats_wide_reg_r;
  input     [31:0] l2d_rdr_reorder_window_r;
  input     [31:0] l2d_rdr_stream_reconf_r;
  input     [31:0] l2d_rdr_roll32_counter_reg_r;
  input     [31:0] l2d_rdr_sat32_counter_reg_r;
  input     [31:0] l2d_rdr_rcnt_sat_log_r;
  input     [31:0] l2d_extra_reg_r;
  input     [31:0] h2d_rdr_cp_fp_wr_r;
  input    h2d_rdr_cp_fp_wr_ack;
  input    h2d_rdr_cp_fp_wr_nack;

  //------- outputs
  output     [127:0] dec_leaf_rd_data;
  output    dec_leaf_ack;
  output    dec_leaf_nack;
  output    dec_leaf_accept;
  output    dec_leaf_reject;
  output    dec_leaf_retry_atomic;
  output     [2:0] dec_leaf_data_width;
  output     [31:0] d2l_stats_disable_check_0_w;
  output    d2l_stats_disable_check_0_we;
  output    d2l_stats_disable_check_0_re;
  output     [31:0] d2l_stats_disable_check_1_w;
  output    d2l_stats_disable_check_1_we;
  output    d2l_stats_disable_check_1_re;
  output     [31:0] d2l_stats_features_w;
  output    d2l_stats_features_we;
  output    d2l_stats_features_re;
  output     [31:0] d2l_stats_log_address1_w;
  output    d2l_stats_log_address1_we;
  output    d2l_stats_log_address1_re;
  output     [31:0] d2l_stats_log_address2_w;
  output    d2l_stats_log_address2_we;
  output    d2l_stats_log_address2_re;
  output     [127:0] d2l_stats_wide_reg_w;
  output    d2l_stats_wide_reg_we;
  output    d2l_stats_wide_reg_re;
  output     [31:0] d2l_rdr_reorder_window_w;
  output    d2l_rdr_reorder_window_we;
  output    d2l_rdr_reorder_window_re;
  output     [31:0] d2l_rdr_stream_reconf_w;
  output    d2l_rdr_stream_reconf_we;
  output    d2l_rdr_stream_reconf_re;
  output     [31:0] d2l_rdr_roll32_counter_reg_w;
  output    d2l_rdr_roll32_counter_reg_we;
  output    d2l_rdr_roll32_counter_reg_re;
  output     [31:0] d2l_rdr_sat32_counter_reg_w;
  output    d2l_rdr_sat32_counter_reg_we;
  output    d2l_rdr_sat32_counter_reg_re;
  output     [31:0] d2l_rdr_rcnt_sat_log_w;
  output    d2l_rdr_rcnt_sat_log_we;
  output    d2l_rdr_rcnt_sat_log_re;
  output     [31:0] d2l_extra_reg_w;
  output    d2l_extra_reg_we;
  output    d2l_extra_reg_re;
  output     [31:0] d2h_rdr_cp_fp_wr_w;
  output    d2h_rdr_cp_fp_wr_we;
  output    d2h_rdr_cp_fp_wr_re;
  output     [3:2] d2h_rdr_cp_fp_wr_addr;


  //------- wire defines
  logic   [31:0] h2d_rdr_cp_fp_wr_r_ex;
  logic  h2d_rdr_cp_fp_wr_ack_ex;
  logic  h2d_rdr_cp_fp_wr_nack_ex;
  logic   [127:0] pio_dec_write_data;
  logic   [14:2] pio_dec_address;
  logic  pio_dec_read;
  logic  pio_dec_write;
  logic   [39:0] block_sel_addr;
  logic  block_sel;
  logic  leaf_dec_valid_active;
  logic  leaf_dec_wr_dvld_active;
  logic   [1:0] pio_dec_trans_size;
  logic  dec_leaf_retry_atomic_next;
  
  //------- reg defines
  logic   [31:0] d2l_stats_disable_check_0_w;
  logic  d2l_stats_disable_check_0_we;
  logic  d2l_stats_disable_check_0_re;
  logic   [31:0] d2l_stats_disable_check_1_w;
  logic  d2l_stats_disable_check_1_we;
  logic  d2l_stats_disable_check_1_re;
  logic   [31:0] d2l_stats_features_w;
  logic  d2l_stats_features_we;
  logic  d2l_stats_features_re;
  logic   [31:0] d2l_stats_log_address1_w;
  logic  d2l_stats_log_address1_we;
  logic  d2l_stats_log_address1_re;
  logic   [31:0] d2l_stats_log_address2_w;
  logic  d2l_stats_log_address2_we;
  logic  d2l_stats_log_address2_re;
  logic   [127:0] d2l_stats_wide_reg_w;
  logic  d2l_stats_wide_reg_we;
  logic  d2l_stats_wide_reg_re;
  logic   [31:0] d2l_rdr_reorder_window_w;
  logic  d2l_rdr_reorder_window_we;
  logic  d2l_rdr_reorder_window_re;
  logic   [31:0] d2l_rdr_stream_reconf_w;
  logic  d2l_rdr_stream_reconf_we;
  logic  d2l_rdr_stream_reconf_re;
  logic   [31:0] d2h_rdr_cp_fp_wr_w_ex;
  logic  d2h_rdr_cp_fp_wr_we_ex;
  logic  d2h_rdr_cp_fp_wr_re_ex;
  logic   [31:0] d2h_rdr_cp_fp_wr_w_next;
  logic  d2h_rdr_cp_fp_wr_we_next;
  logic  d2h_rdr_cp_fp_wr_re_next;
  logic   [3:2] d2h_rdr_cp_fp_wr_addr_ex;
  logic   [3:2] d2h_rdr_cp_fp_wr_addr_next;
  logic   [31:0] d2l_rdr_roll32_counter_reg_w;
  logic  d2l_rdr_roll32_counter_reg_we;
  logic  d2l_rdr_roll32_counter_reg_re;
  logic   [31:0] d2l_rdr_sat32_counter_reg_w;
  logic  d2l_rdr_sat32_counter_reg_we;
  logic  d2l_rdr_sat32_counter_reg_re;
  logic   [31:0] d2l_rdr_rcnt_sat_log_w;
  logic  d2l_rdr_rcnt_sat_log_we;
  logic  d2l_rdr_rcnt_sat_log_re;
  logic   [31:0] d2l_extra_reg_w;
  logic  d2l_extra_reg_we;
  logic  d2l_extra_reg_re;
  logic  leaf_dec_valid_hld1;
  logic  leaf_dec_valid_hld1_next;
  logic  leaf_dec_wr_dvld_hld1;
  logic  leaf_dec_wr_dvld_hld1_next;
  logic  dec_leaf_retry_atomic;
  logic  pio_write_active;
  logic  pio_read_active;
  logic   [14:2] pio_dec_address_d1;
  logic   [127:0] pio_dec_write_data_d1;
  logic   [1:0] pio_dec_trans_size_d1;
  logic   [1:0] dec_pio_trans_size;
  logic   [1:0] reg_width;
  logic   [127:0] dec_pio_read_data;
  logic   [127:0] dec_pio_read_data_d1;
  logic  dec_pio_ack;
  logic  dec_pio_nack;
  logic  dec_pio_ack_next;
  logic  dec_pio_nack_next;
  logic  pio_internal_ack;
  logic  pio_internal_nack;
  logic  pio_external_ack;
  logic  pio_external_nack;
  logic  pio_external_ack_next;
  logic  pio_external_nack_next;
  logic  pio_no_acks;
  logic  pio_activate_write;
  logic  pio_activate_read;
  logic   [127:0] dec_pio_read_data_next;
  logic  external_transaction_active;
  
  
  //------- assigns
  assign  d2h_rdr_cp_fp_wr_we = d2h_rdr_cp_fp_wr_we_ex;
  assign  d2h_rdr_cp_fp_wr_w = d2h_rdr_cp_fp_wr_w_ex;
  assign  d2h_rdr_cp_fp_wr_re = d2h_rdr_cp_fp_wr_re_ex;
  assign  h2d_rdr_cp_fp_wr_r_ex = h2d_rdr_cp_fp_wr_r;
  assign  h2d_rdr_cp_fp_wr_ack_ex = h2d_rdr_cp_fp_wr_ack;
  assign  h2d_rdr_cp_fp_wr_nack_ex = h2d_rdr_cp_fp_wr_nack;
  assign  d2h_rdr_cp_fp_wr_addr = d2h_rdr_cp_fp_wr_addr_ex;
  assign  pio_dec_write_data = leaf_dec_wr_data;
  assign  dec_leaf_rd_data = dec_pio_read_data;
  assign  dec_leaf_ack = dec_pio_ack;
  assign  dec_leaf_nack = dec_pio_nack;
  assign  pio_dec_address = leaf_dec_addr [14:2] ;
  assign  block_sel_addr = 40'h0;
  assign  block_sel = leaf_dec_block_sel;
  assign  leaf_dec_wr_dvld_active = leaf_dec_wr_dvld | leaf_dec_wr_dvld_hld1;
  assign  leaf_dec_valid_active = leaf_dec_valid | leaf_dec_valid_hld1;
  assign  dec_leaf_accept = leaf_dec_valid & block_sel;
  assign  dec_leaf_reject = leaf_dec_valid & ~block_sel;
  assign  pio_dec_read = block_sel & leaf_dec_valid_active & (leaf_dec_cycle == 2'b10);
  assign  pio_dec_write = block_sel & leaf_dec_wr_dvld_active & (leaf_dec_cycle[1] == 1'b0);
  assign  pio_dec_trans_size = leaf_dec_wr_width [1:0] ;
  assign  dec_leaf_data_width [2]  = 0;
  assign  dec_leaf_data_width [1:0]  = dec_pio_trans_size;
  assign  dec_leaf_retry_atomic_next = block_sel & leaf_dec_wr_dvld_active & (leaf_dec_cycle == 2'b00) & (leaf_dec_wr_width [1:0]  < reg_width);
  
  //------- combinatorial assigns for pio read data
  always_comb begin
    dec_pio_read_data = dec_pio_read_data_d1;
  end
  
  //------- reg assigns for pio read data
  always_ff @ (posedge clk) begin
    if (reset) begin
      dec_pio_read_data_d1 <= #1  128'b0;
    end
    else begin
      dec_pio_read_data_d1 <= #1 dec_pio_read_data_next;
    end
  end
  
  //------- reg assigns for pio i/f
  always_ff @ (posedge clk) begin
    if (reset) begin
      pio_write_active <= #1  1'b0;
      pio_read_active <= #1  1'b0;
      dec_pio_trans_size <= #1 2'b0;
    end
    else begin
      pio_write_active <= #1  pio_write_active ? pio_no_acks : pio_activate_write;
      pio_read_active <= #1  pio_read_active ? pio_no_acks : pio_activate_read;
      dec_pio_trans_size <= #1 reg_width;
    end
    pio_dec_address_d1 <= #1   pio_dec_address;
    pio_dec_write_data_d1 <= #1  pio_dec_write_data;
    pio_dec_trans_size_d1 <= #1  pio_dec_trans_size;
  end
  
  //------- reg assigns for external i/f
  always_ff @ (posedge clk) begin
    if (reset) begin
      d2h_rdr_cp_fp_wr_we_ex <= #1  1'b0;
      d2h_rdr_cp_fp_wr_re_ex <= #1  1'b0;
    end
    else begin
      d2h_rdr_cp_fp_wr_we_ex <= #1  d2h_rdr_cp_fp_wr_we_next & ~h2d_rdr_cp_fp_wr_ack_ex & ~h2d_rdr_cp_fp_wr_nack_ex;
      d2h_rdr_cp_fp_wr_re_ex <= #1  d2h_rdr_cp_fp_wr_re_next & ~h2d_rdr_cp_fp_wr_ack_ex & ~h2d_rdr_cp_fp_wr_nack_ex;
    end
    d2h_rdr_cp_fp_wr_w_ex <= #1  d2h_rdr_cp_fp_wr_w_next;
    d2h_rdr_cp_fp_wr_addr_ex <= #1  d2h_rdr_cp_fp_wr_addr_next;
  end
  
  //------- combinatorial assigns for leaf i/f
  always_comb begin
    leaf_dec_valid_hld1_next = leaf_dec_valid | leaf_dec_valid_hld1;
    if (dec_pio_ack_next | dec_pio_nack_next) leaf_dec_valid_hld1_next = 1'b0;
    leaf_dec_wr_dvld_hld1_next = leaf_dec_wr_dvld | leaf_dec_wr_dvld_hld1;
    if (dec_pio_ack_next | dec_pio_nack_next | leaf_dec_valid) leaf_dec_wr_dvld_hld1_next = 1'b0;
  end
  
  //------- reg assigns for leaf i/f
  always_ff @ (posedge clk) begin
    if (reset) begin
      leaf_dec_valid_hld1 <= #1  1'b0;
      leaf_dec_wr_dvld_hld1 <= #1  1'b0;
      dec_leaf_retry_atomic <= #1  1'b0;
    end
    else begin
      leaf_dec_valid_hld1 <= #1 leaf_dec_valid_hld1_next;
      leaf_dec_wr_dvld_hld1 <= #1 leaf_dec_wr_dvld_hld1_next;
      dec_leaf_retry_atomic <= #1 dec_leaf_retry_atomic_next;
    end
  end
  
  //------- combinatorial assigns for pio ack/nack
  always_comb begin
    pio_internal_nack = (pio_read_active | pio_write_active) & ~pio_internal_ack & ~external_transaction_active;
    dec_pio_ack_next = (pio_internal_ack | (pio_external_ack_next & external_transaction_active));
    dec_pio_nack_next = (pio_internal_nack | (pio_external_nack_next & external_transaction_active));
    pio_no_acks = ~(dec_pio_ack | dec_pio_nack | pio_external_ack | pio_external_nack);
    pio_activate_write = (pio_dec_write & ~(dec_pio_ack | dec_pio_nack));
    pio_activate_read = (pio_dec_read & ~(dec_pio_ack | dec_pio_nack));
  end
  
  //------- reg assigns for pio ack/nack
  always_ff @ (posedge clk) begin
    if (reset) begin
      dec_pio_ack <= #1 1'b0;
      dec_pio_nack <= #1 1'b0;
      pio_external_ack <= #1  1'b0;
      pio_external_nack <= #1  1'b0;
    end
    else begin
      dec_pio_ack <= #1 dec_pio_ack ? 1'b0 : dec_pio_ack_next;
      dec_pio_nack <= #1 dec_pio_nack ? 1'b0 : dec_pio_nack_next;
      pio_external_ack <= #1 pio_external_ack_next;
      pio_external_nack <= #1 pio_external_nack_next;
    end
  end
  
  
  //------- address decode
  always_comb begin
    pio_internal_ack = 1'b0;
    external_transaction_active = 1'b0;
    pio_external_ack_next = 1'b0;
    pio_external_nack_next = 1'b0;
    dec_pio_read_data_next = 128'b0;
    reg_width = 2'd0;
    
    d2l_stats_disable_check_0_w = pio_dec_write_data_d1  [31:0] ;
    d2l_stats_disable_check_0_we = 1'b0;
    d2l_stats_disable_check_0_re = 1'b0;
    d2l_stats_disable_check_1_w = pio_dec_write_data_d1  [31:0] ;
    d2l_stats_disable_check_1_we = 1'b0;
    d2l_stats_disable_check_1_re = 1'b0;
    d2l_stats_features_w = pio_dec_write_data_d1  [31:0] ;
    d2l_stats_features_we = 1'b0;
    d2l_stats_features_re = 1'b0;
    d2l_stats_log_address1_w = pio_dec_write_data_d1  [31:0] ;
    d2l_stats_log_address1_we = 1'b0;
    d2l_stats_log_address1_re = 1'b0;
    d2l_stats_log_address2_w = pio_dec_write_data_d1  [31:0] ;
    d2l_stats_log_address2_we = 1'b0;
    d2l_stats_log_address2_re = 1'b0;
    d2l_stats_wide_reg_w = pio_dec_write_data_d1  [127:0] ;
    d2l_stats_wide_reg_we = 1'b0;
    d2l_stats_wide_reg_re = 1'b0;
    d2l_rdr_reorder_window_w = pio_dec_write_data_d1  [31:0] ;
    d2l_rdr_reorder_window_we = 1'b0;
    d2l_rdr_reorder_window_re = 1'b0;
    d2l_rdr_stream_reconf_w = pio_dec_write_data_d1  [31:0] ;
    d2l_rdr_stream_reconf_we = 1'b0;
    d2l_rdr_stream_reconf_re = 1'b0;
    d2h_rdr_cp_fp_wr_w_next = pio_dec_write_data_d1 [31:0] ;
    d2h_rdr_cp_fp_wr_we_next = 1'b0;
    d2h_rdr_cp_fp_wr_re_next = 1'b0;
    d2h_rdr_cp_fp_wr_addr_next = pio_dec_address_d1  [3:2] ;
    d2l_rdr_roll32_counter_reg_w = pio_dec_write_data_d1  [31:0] ;
    d2l_rdr_roll32_counter_reg_we = 1'b0;
    d2l_rdr_roll32_counter_reg_re = 1'b0;
    d2l_rdr_sat32_counter_reg_w = pio_dec_write_data_d1  [31:0] ;
    d2l_rdr_sat32_counter_reg_we = 1'b0;
    d2l_rdr_sat32_counter_reg_re = 1'b0;
    d2l_rdr_rcnt_sat_log_w = pio_dec_write_data_d1  [31:0] ;
    d2l_rdr_rcnt_sat_log_we = 1'b0;
    d2l_rdr_rcnt_sat_log_re = 1'b0;
    d2l_extra_reg_w = pio_dec_write_data_d1  [31:0] ;
    d2l_extra_reg_we = 1'b0;
    d2l_extra_reg_re = 1'b0;
    
    casez(pio_dec_address_d1)
    //  Register: stats.disable_check_0     Address: 0x1000     External: false
    13'b0010000000000:
      begin
        d2l_stats_disable_check_0_we = pio_write_active & ~dec_pio_ack;
        d2l_stats_disable_check_0_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_stats_disable_check_0_r;
      end
    //  Register: stats.disable_check_1     Address: 0x1080     External: false
    13'b0010000100000:
      begin
        d2l_stats_disable_check_1_we = pio_write_active & ~dec_pio_ack;
        d2l_stats_disable_check_1_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_stats_disable_check_1_r;
      end
    //  Register: stats.features     Address: 0x1100     External: false
    13'b0010001000000:
      begin
        d2l_stats_features_we = pio_write_active & ~dec_pio_ack;
        d2l_stats_features_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_stats_features_r;
      end
    //  Register: stats.log_address1     Address: 0x1104     External: false
    13'b0010001000001:
      begin
        d2l_stats_log_address1_we = pio_write_active & ~dec_pio_ack;
        d2l_stats_log_address1_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_stats_log_address1_r;
      end
    //  Register: stats.log_address2     Address: 0x1110     External: false
    13'b0010001000100:
      begin
        d2l_stats_log_address2_we = pio_write_active & ~dec_pio_ack;
        d2l_stats_log_address2_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_stats_log_address2_r;
      end
    //  Register: stats.wide_reg     Address: 0x1120     External: false
    13'b00100010010??:
      begin
        reg_width = 2'd3;
        d2l_stats_wide_reg_we = pio_write_active & ~dec_pio_ack & (pio_dec_trans_size_d1 >= reg_width);
        d2l_stats_wide_reg_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [127:0]  = l2d_stats_wide_reg_r;
      end
    //  Register: rdr.reorder_window     Address: 0x4000     External: false
    13'b1000000000000:
      begin
        d2l_rdr_reorder_window_we = pio_write_active & ~dec_pio_ack;
        d2l_rdr_reorder_window_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_rdr_reorder_window_r;
      end
    //  Register: rdr.stream_reconf     Address: 0x4004     External: false
    13'b1000000000001:
      begin
        d2l_rdr_stream_reconf_we = pio_write_active & ~dec_pio_ack;
        d2l_rdr_stream_reconf_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_rdr_stream_reconf_r;
      end
    //  Register: rdr.cp_fp_wr     Address: 0x61c0     External: true
    13'b11000011100??:
      begin
        d2h_rdr_cp_fp_wr_we_next = pio_write_active & ~(pio_external_ack | pio_external_nack);
        pio_external_ack_next = h2d_rdr_cp_fp_wr_ack_ex;
        external_transaction_active = pio_read_active | pio_write_active;
        d2h_rdr_cp_fp_wr_re_next = pio_read_active & ~(pio_external_ack | pio_external_nack);
        pio_external_nack_next = h2d_rdr_cp_fp_wr_nack_ex;
        dec_pio_read_data_next  [31:0]  = h2d_rdr_cp_fp_wr_r_ex;
      end
    //  Register: rdr.roll32_counter_reg     Address: 0x61d0     External: false
    13'b1100001110100:
      begin
        d2l_rdr_roll32_counter_reg_we = pio_write_active & ~dec_pio_ack;
        d2l_rdr_roll32_counter_reg_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_rdr_roll32_counter_reg_r;
      end
    //  Register: rdr.sat32_counter_reg     Address: 0x61d4     External: false
    13'b1100001110101:
      begin
        d2l_rdr_sat32_counter_reg_we = pio_write_active & ~dec_pio_ack;
        d2l_rdr_sat32_counter_reg_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_rdr_sat32_counter_reg_r;
      end
    //  Register: rdr.rcnt_sat_log     Address: 0x61d8     External: false
    13'b1100001110110:
      begin
        d2l_rdr_rcnt_sat_log_we = pio_write_active & ~dec_pio_ack;
        d2l_rdr_rcnt_sat_log_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_rdr_rcnt_sat_log_r;
      end
    //  Register: extra_reg     Address: 0x61dc     External: false
    13'b1100001110111:
      begin
        d2l_extra_reg_we = pio_write_active & ~dec_pio_ack;
        d2l_extra_reg_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_extra_reg_r;
      end
    endcase
  end
  
endmodule

//
//---------- module simple1_pio
//
module simple1_pio
(
  clk,
  reset,
  h2l_stats_disable_check_0_l0_b0_intr,
  h2l_stats_disable_check_0_l0_b1_intr,
  h2l_stats_disable_check_0_l0_b2_intr,
  h2l_stats_disable_check_1_l0_b0_intr,
  h2l_stats_disable_check_1_l0_b1_intr,
  h2l_stats_disable_check_1_l0_b2_intr,
  h2l_stats_log_address1_value_w,
  h2l_stats_log_address1_value_we,
  h2l_stats_log_address2_value_w,
  h2l_stats_log_address2_value_we,
  h2l_stats_wide_reg_value_w,
  h2l_stats_wide_reg_value_we,
  sig_stats_another_reset,
  h2l_rdr_stream_reconf_busy_w,
  h2d_rdr_cp_fp_wr_r,
  h2d_rdr_cp_fp_wr_ack,
  h2d_rdr_cp_fp_wr_nack,
  h2l_rdr_roll32_counter_reg_count_w,
  h2l_rdr_roll32_counter_reg_count_incr,
  h2l_rdr_roll32_counter_reg_count_we,
  h2l_rdr_sat32_counter_reg_count_w,
  h2l_rdr_sat32_counter_reg_count_incr,
  h2l_rdr_sat32_counter_reg_count_we,
  h2l_rdr_rcnt_sat_log_subch_w,
  h2l_rdr_rcnt_sat_log_subch_we,
  h2l_rdr_rcnt_sat_log_str_w,
  h2l_rdr_rcnt_sat_log_str_we,
  h2l_rdr_rcnt_sat_log_count_w,
  h2l_rdr_rcnt_sat_log_count_we,
  leaf_dec_wr_data,
  leaf_dec_addr,
  leaf_dec_block_sel,
  leaf_dec_valid,
  leaf_dec_wr_dvld,
  leaf_dec_cycle,
  leaf_dec_wr_width,

  l2h_stats_disable_check_0_timer_sram_r,
  l2h_stats_disable_check_0_cbuf_fifo_r,
  l2h_stats_disable_check_0_lut_st_r,
  l2h_stats_disable_check_0_l0_b0_r,
  l2h_stats_disable_check_0_l0_b1_r,
  l2h_stats_disable_check_0_l0_b2_r,
  l2h_stats_disable_check_0_l0_b3_r,
  l2h_stats_disable_check_0_intr_o,
  l2h_stats_disable_check_0_halt_o,
  l2h_stats_disable_check_1_timer_sram_r,
  l2h_stats_disable_check_1_cbuf_fifo_r,
  l2h_stats_disable_check_1_lut_st_r,
  l2h_stats_disable_check_1_l0_b0_r,
  l2h_stats_disable_check_1_l0_b1_r,
  l2h_stats_disable_check_1_l0_b2_r,
  l2h_stats_disable_check_1_l0_b3_r,
  l2h_stats_disable_check_1_intr_o,
  l2h_stats_disable_check_1_halt_o,
  l2h_stats_features_wdth_ored_o,
  l2h_stats_features_generator_anded_o,
  l2h_stats_features_checker_xored_o,
  l2h_stats_wide_reg_value_r,
  l2h_rdr_reorder_window_ws_enable_r,
  l2h_rdr_reorder_window_set_back_r,
  l2h_rdr_reorder_window_size_r,
  l2h_rdr_stream_reconf_stream_r,
  d2h_rdr_cp_fp_wr_w,
  d2h_rdr_cp_fp_wr_we,
  d2h_rdr_cp_fp_wr_re,
  d2h_rdr_cp_fp_wr_addr,
  l2h_rdr_roll32_counter_reg_count_overflow_o,
  l2h_rdr_roll32_counter_reg_count_r,
  l2h_rdr_sat32_counter_reg_count_incrthold_o,
  l2h_rdr_sat32_counter_reg_count_r,
  l2h_rdr_rcnt_sat_log_en_r,
  l2h_rdr_rcnt_sat_log_count_r,
  l2h_extra_reg_value_r,
  dec_leaf_rd_data,
  dec_leaf_ack,
  dec_leaf_nack,
  dec_leaf_accept,
  dec_leaf_reject,
  dec_leaf_retry_atomic,
  dec_leaf_data_width );

  //------- inputs
  input    clk;
  input    reset;
  input    h2l_stats_disable_check_0_l0_b0_intr;
  input    h2l_stats_disable_check_0_l0_b1_intr;
  input    h2l_stats_disable_check_0_l0_b2_intr;
  input    h2l_stats_disable_check_1_l0_b0_intr;
  input    h2l_stats_disable_check_1_l0_b1_intr;
  input    h2l_stats_disable_check_1_l0_b2_intr;
  input     [9:0] h2l_stats_log_address1_value_w;
  input    h2l_stats_log_address1_value_we;
  input     [9:0] h2l_stats_log_address2_value_w;
  input    h2l_stats_log_address2_value_we;
  input     [95:0] h2l_stats_wide_reg_value_w;
  input    h2l_stats_wide_reg_value_we;
  input    sig_stats_another_reset;
  input    h2l_rdr_stream_reconf_busy_w;
  input     [31:0] h2d_rdr_cp_fp_wr_r;
  input    h2d_rdr_cp_fp_wr_ack;
  input    h2d_rdr_cp_fp_wr_nack;
  input     [3:0] h2l_rdr_roll32_counter_reg_count_w;
  input    h2l_rdr_roll32_counter_reg_count_incr;
  input    h2l_rdr_roll32_counter_reg_count_we;
  input     [3:0] h2l_rdr_sat32_counter_reg_count_w;
  input    h2l_rdr_sat32_counter_reg_count_incr;
  input    h2l_rdr_sat32_counter_reg_count_we;
  input     [4:0] h2l_rdr_rcnt_sat_log_subch_w;
  input    h2l_rdr_rcnt_sat_log_subch_we;
  input     [9:0] h2l_rdr_rcnt_sat_log_str_w;
  input    h2l_rdr_rcnt_sat_log_str_we;
  input     [15:0] h2l_rdr_rcnt_sat_log_count_w;
  input    h2l_rdr_rcnt_sat_log_count_we;
  input     [127:0] leaf_dec_wr_data;
  input     [39:0] leaf_dec_addr;
  input    leaf_dec_block_sel;
  input    leaf_dec_valid;
  input    leaf_dec_wr_dvld;
  input     [1:0] leaf_dec_cycle;
  input     [2:0] leaf_dec_wr_width;

  //------- outputs
  output    l2h_stats_disable_check_0_timer_sram_r;
  output    l2h_stats_disable_check_0_cbuf_fifo_r;
  output    l2h_stats_disable_check_0_lut_st_r;
  output    l2h_stats_disable_check_0_l0_b0_r;
  output    l2h_stats_disable_check_0_l0_b1_r;
  output    l2h_stats_disable_check_0_l0_b2_r;
  output    l2h_stats_disable_check_0_l0_b3_r;
  output    l2h_stats_disable_check_0_intr_o;
  output    l2h_stats_disable_check_0_halt_o;
  output    l2h_stats_disable_check_1_timer_sram_r;
  output    l2h_stats_disable_check_1_cbuf_fifo_r;
  output    l2h_stats_disable_check_1_lut_st_r;
  output    l2h_stats_disable_check_1_l0_b0_r;
  output    l2h_stats_disable_check_1_l0_b1_r;
  output    l2h_stats_disable_check_1_l0_b2_r;
  output    l2h_stats_disable_check_1_l0_b3_r;
  output    l2h_stats_disable_check_1_intr_o;
  output    l2h_stats_disable_check_1_halt_o;
  output    l2h_stats_features_wdth_ored_o;
  output    l2h_stats_features_generator_anded_o;
  output    l2h_stats_features_checker_xored_o;
  output     [95:0] l2h_stats_wide_reg_value_r;
  output    l2h_rdr_reorder_window_ws_enable_r;
  output     [10:0] l2h_rdr_reorder_window_set_back_r;
  output     [10:0] l2h_rdr_reorder_window_size_r;
  output     [9:0] l2h_rdr_stream_reconf_stream_r;
  output     [31:0] d2h_rdr_cp_fp_wr_w;
  output    d2h_rdr_cp_fp_wr_we;
  output    d2h_rdr_cp_fp_wr_re;
  output     [3:2] d2h_rdr_cp_fp_wr_addr;
  output    l2h_rdr_roll32_counter_reg_count_overflow_o;
  output     [3:0] l2h_rdr_roll32_counter_reg_count_r;
  output    l2h_rdr_sat32_counter_reg_count_incrthold_o;
  output     [3:0] l2h_rdr_sat32_counter_reg_count_r;
  output    l2h_rdr_rcnt_sat_log_en_r;
  output     [15:0] l2h_rdr_rcnt_sat_log_count_r;
  output     [31:0] l2h_extra_reg_value_r;
  output     [127:0] dec_leaf_rd_data;
  output    dec_leaf_ack;
  output    dec_leaf_nack;
  output    dec_leaf_accept;
  output    dec_leaf_reject;
  output    dec_leaf_retry_atomic;
  output     [2:0] dec_leaf_data_width;


  //------- wire defines
  logic   [31:0] d2l_stats_disable_check_0_w;
  logic  d2l_stats_disable_check_0_we;
  logic  d2l_stats_disable_check_0_re;
  logic   [31:0] d2l_stats_disable_check_1_w;
  logic  d2l_stats_disable_check_1_we;
  logic  d2l_stats_disable_check_1_re;
  logic   [31:0] d2l_stats_features_w;
  logic  d2l_stats_features_we;
  logic  d2l_stats_features_re;
  logic   [31:0] d2l_stats_log_address1_w;
  logic  d2l_stats_log_address1_we;
  logic  d2l_stats_log_address1_re;
  logic   [31:0] d2l_stats_log_address2_w;
  logic  d2l_stats_log_address2_we;
  logic  d2l_stats_log_address2_re;
  logic   [127:0] d2l_stats_wide_reg_w;
  logic  d2l_stats_wide_reg_we;
  logic  d2l_stats_wide_reg_re;
  logic   [31:0] d2l_rdr_reorder_window_w;
  logic  d2l_rdr_reorder_window_we;
  logic  d2l_rdr_reorder_window_re;
  logic   [31:0] d2l_rdr_stream_reconf_w;
  logic  d2l_rdr_stream_reconf_we;
  logic  d2l_rdr_stream_reconf_re;
  logic   [31:0] d2l_rdr_roll32_counter_reg_w;
  logic  d2l_rdr_roll32_counter_reg_we;
  logic  d2l_rdr_roll32_counter_reg_re;
  logic   [31:0] d2l_rdr_sat32_counter_reg_w;
  logic  d2l_rdr_sat32_counter_reg_we;
  logic  d2l_rdr_sat32_counter_reg_re;
  logic   [31:0] d2l_rdr_rcnt_sat_log_w;
  logic  d2l_rdr_rcnt_sat_log_we;
  logic  d2l_rdr_rcnt_sat_log_re;
  logic   [31:0] d2l_extra_reg_w;
  logic  d2l_extra_reg_we;
  logic  d2l_extra_reg_re;
  logic   [31:0] l2d_stats_disable_check_0_r;
  logic   [31:0] l2d_stats_disable_check_1_r;
  logic   [31:0] l2d_stats_features_r;
  logic   [31:0] l2d_stats_log_address1_r;
  logic   [31:0] l2d_stats_log_address2_r;
  logic   [127:0] l2d_stats_wide_reg_r;
  logic   [31:0] l2d_rdr_reorder_window_r;
  logic   [31:0] l2d_rdr_stream_reconf_r;
  logic   [31:0] l2d_rdr_roll32_counter_reg_r;
  logic   [31:0] l2d_rdr_sat32_counter_reg_r;
  logic   [31:0] l2d_rdr_rcnt_sat_log_r;
  logic   [31:0] l2d_extra_reg_r;
  
  
  simple1_jrdl_decode pio_decode ( .* );
    
  simple1_jrdl_logic pio_logic ( .* );
    
endmodule

