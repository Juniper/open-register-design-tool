//   Ordt 230719.01 autogenerated file 
//   Input: ./rdl_c_header/test.rdl
//   Parms: ./rdl_c_header/test.parms
//   Date: Thu Jul 20 12:53:13 EDT 2023
//

import uvm_pkg::*;
import ordt_uvm_reg_pkg::*;

// DEVICE_ID
class reg_example_addr_map_r0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl f0;
  rand uvm_reg_field_rdl f1;
  rand uvm_reg_field_rdl f2;
  
  function new(string name = "reg_example_addr_map_r0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.f0 = new("f0");
    this.f0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.f0.configure(this, 8, 0, "RW", 0, 8'h2, 1, 1, 0);
    this.f1 = new("f1");
    this.f1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.f1.configure(this, 8, 8, "RW", 0, 8'h4, 1, 1, 0);
    this.f2 = new("f2");
    this.f2.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.f2.configure(this, 16, 16, "RW", 0, 16'ha0b, 1, 1, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "f0"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "f1"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "f2"}, 16, 16);
  endfunction: build
  
endclass : reg_example_addr_map_r0

// SPI_CONFIG
class reg_example_addr_map_r1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl f0;
  rand uvm_reg_field_rdl f1;
  
  function new(string name = "reg_example_addr_map_r1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.f0 = new("f0");
    this.f0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.f0.configure(this, 4, 0, "RW", 0, 4'h1, 1, 1, 0);
    this.f1 = new("f1");
    this.f1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.f1.configure(this, 4, 4, "RW", 0, 4'h0, 1, 1, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "f0"}, 0, 4);
    add_hdl_path_slice({rdl_reg_name, "f1"}, 4, 4);
  endfunction: build
  
endclass : reg_example_addr_map_r1

// SPI_STATUS
class reg_example_addr_map_r2 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl f2;
  rand uvm_reg_field_rdl f0;
  rand uvm_reg_field_rdl f3;
  
  function new(string name = "reg_example_addr_map_r2");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.f2 = new("f2");
    this.f2.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.f2.configure(this, 2, 0, "RW", 0, 2'h1, 1, 1, 0);
    this.f0 = new("f0");
    this.f0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.f0.configure(this, 2, 2, "RW", 0, 2'h1, 1, 1, 0);
    this.f3 = new("f3");
    this.f3.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.f3.configure(this, 4, 4, "RW", 0, 4'h0, 1, 1, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "f2"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "f0"}, 2, 2);
    add_hdl_path_slice({rdl_reg_name, "f3"}, 4, 4);
  endfunction: build
  
endclass : reg_example_addr_map_r2

// Base block
class block_example_addr_map extends uvm_reg_block_rdl;
  rand reg_example_addr_map_r0 r0;
  rand reg_example_addr_map_r1 r1;
  rand reg_example_addr_map_r2 r2;
  
  function new(string name = "block_example_addr_map");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", `UVM_REG_ADDR_WIDTH'h0, 4, UVM_LITTLE_ENDIAN, 1);
    this.set_rdl_address_map(1);
    this.set_rdl_address_map_hdl_path({`EXAMPLE_ADDR_MAP_PIO_INSTANCE_PATH, ".pio_logic"});
    this.r0 = new("r0");
    this.r0.configure(this, null, "");
    this.r0.set_rdl_tag("r0_");
    this.r0.set_reg_test_info(0, 0, 2);
    this.r0.build();
    this.default_map.add_reg(this.r0, `UVM_REG_ADDR_WIDTH'h0, "RW", 0);
    this.r1 = new("r1");
    this.r1.configure(this, null, "");
    this.r1.set_rdl_tag("r1_");
    this.r1.set_reg_test_info(0, 0, 2);
    this.r1.build();
    this.default_map.add_reg(this.r1, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.r2 = new("r2");
    this.r2.configure(this, null, "");
    this.r2.set_rdl_tag("r2_");
    this.r2.set_reg_test_info(0, 0, 2);
    this.r2.build();
    this.default_map.add_reg(this.r2, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.add_callbacks();
  endfunction: build
  
  `uvm_object_utils(block_example_addr_map)
endclass : block_example_addr_map
