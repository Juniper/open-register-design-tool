//   Ordt 191120.01 autogenerated file 
//   Input: ./rdl_write_enable/test.rdl
//   Parms: ./rdl_write_enable/test.parms
//   Date: Wed Nov 20 22:21:34 EST 2019
//

//
//---------- module foo_jrdl_logic
//
module foo_jrdl_logic
(
  clk,
  reset,
  d2l_intr_reg_w,
  d2l_intr_reg_w_enable,
  d2l_intr_reg_we,
  d2l_intr_reg_re,
  d2l_log_reg_w,
  d2l_log_reg_w_enable,
  d2l_log_reg_we,
  d2l_log_reg_re,
  d2l_bigreg_w,
  d2l_bigreg_w_enable,
  d2l_bigreg_we,
  d2l_bigreg_re,
  h2l_intr_reg_count_fld_incr,
  h2l_intr_reg_count_fld_hwset,
  h2l_intr_reg_count_fld_hwclr,
  h2l_intr_reg_count_fld_swwel,
  h2l_intr_reg_intr1_intr,
  h2l_intr_reg_intr2_intr,
  h2l_log_reg_log_err_w,
  h2l_log_reg_log_value_w,

  l2d_intr_reg_r,
  l2d_log_reg_r,
  l2d_bigreg_r,
  l2h_intr_reg_count_fld_r,
  l2h_intr_reg_intr1_r,
  l2h_intr_reg_intr2_r,
  l2h_intr_reg_intr_o );

  //------- inputs
  input    clk;
  input    reset;
  input     [31:0] d2l_intr_reg_w;
  input     [31:0] d2l_intr_reg_w_enable;
  input    d2l_intr_reg_we;
  input    d2l_intr_reg_re;
  input     [31:0] d2l_log_reg_w;
  input     [31:0] d2l_log_reg_w_enable;
  input    d2l_log_reg_we;
  input    d2l_log_reg_re;
  input     [63:0] d2l_bigreg_w;
  input     [63:0] d2l_bigreg_w_enable;
  input    d2l_bigreg_we;
  input    d2l_bigreg_re;
  input    h2l_intr_reg_count_fld_incr;
  input    h2l_intr_reg_count_fld_hwset;
  input    h2l_intr_reg_count_fld_hwclr;
  input    h2l_intr_reg_count_fld_swwel;
  input    h2l_intr_reg_intr1_intr;
  input    h2l_intr_reg_intr2_intr;
  input     [7:0] h2l_log_reg_log_err_w;
  input     [7:0] h2l_log_reg_log_value_w;

  //------- outputs
  output     [31:0] l2d_intr_reg_r;
  output     [31:0] l2d_log_reg_r;
  output     [63:0] l2d_bigreg_r;
  output     [7:0] l2h_intr_reg_count_fld_r;
  output    l2h_intr_reg_intr1_r;
  output    l2h_intr_reg_intr2_r;
  output    l2h_intr_reg_intr_o;


  //------- wire defines
  logic  h2l_intr_reg_intr1_intr;
  logic  h2l_intr_reg_intr2_intr;
  
  //------- reg defines
  logic   [7:0] rg_intr_reg_count_fld;
  logic   [7:0] reg_intr_reg_count_fld_next;
  logic   [8:0] cntr_intr_reg_count_fld_next;
  logic   [7:0] l2h_intr_reg_count_fld_r;
  logic  rg_intr_reg_intr1;
  logic  reg_intr_reg_intr1_next;
  logic  l2h_intr_reg_intr_o;
  logic  l2h_intr_reg_intr1_r;
  logic  rg_intr_reg_intr2;
  logic  reg_intr_reg_intr2_next;
  logic  l2h_intr_reg_intr2_r;
  logic   [31:0] l2d_intr_reg_r;
  logic   [7:0] rg_log_reg_log_err;
  logic   [7:0] reg_log_reg_log_err_next;
  logic   [7:0] rg_log_reg_log_value;
  logic   [31:0] l2d_log_reg_r;
  logic   [63:0] rg_bigreg_field64;
  logic   [63:0] reg_bigreg_field64_next;
  logic   [63:0] l2d_bigreg_r;
  
  
  //------- combinatorial assigns for bigreg (pio read data)
  always_comb begin
    l2d_bigreg_r = rg_bigreg_field64;
  end
  
  //------- combinatorial assigns for intr_reg
  always_comb begin
    reg_intr_reg_count_fld_next = rg_intr_reg_count_fld;
    cntr_intr_reg_count_fld_next = { 1'b0, rg_intr_reg_count_fld};
    l2h_intr_reg_count_fld_r = rg_intr_reg_count_fld;
    reg_intr_reg_intr1_next = rg_intr_reg_intr1;
    l2h_intr_reg_intr1_r = rg_intr_reg_intr1;
    reg_intr_reg_intr2_next = rg_intr_reg_intr2;
    l2h_intr_reg_intr2_r = rg_intr_reg_intr2;
    if (d2l_intr_reg_we & ~h2l_intr_reg_count_fld_swwel) cntr_intr_reg_count_fld_next = ((d2l_intr_reg_w [7:0]  & d2l_intr_reg_w_enable [7:0] ) | (cntr_intr_reg_count_fld_next & ~d2l_intr_reg_w_enable [7:0] ));
    l2h_intr_reg_intr_o = 1'b0;
    reg_intr_reg_intr1_next = (h2l_intr_reg_intr1_intr | rg_intr_reg_intr1);
    l2h_intr_reg_intr_o = l2h_intr_reg_intr_o | (rg_intr_reg_intr1);
    reg_intr_reg_intr2_next = (h2l_intr_reg_intr2_intr | rg_intr_reg_intr2);
    l2h_intr_reg_intr_o = l2h_intr_reg_intr_o | (rg_intr_reg_intr2);
    if (h2l_intr_reg_count_fld_incr)
       cntr_intr_reg_count_fld_next = cntr_intr_reg_count_fld_next + 9'h1;
    reg_intr_reg_count_fld_next = cntr_intr_reg_count_fld_next [7:0] ;
    if (h2l_intr_reg_count_fld_hwset) reg_intr_reg_count_fld_next = 8'hff;
    if (h2l_intr_reg_count_fld_hwclr) reg_intr_reg_count_fld_next = 8'h0;
    if (d2l_intr_reg_we) reg_intr_reg_intr1_next = ((d2l_intr_reg_w [8]  & d2l_intr_reg_w_enable [8] ) | (reg_intr_reg_intr1_next & ~d2l_intr_reg_w_enable [8] ));
    if (d2l_intr_reg_we) reg_intr_reg_intr2_next = ((d2l_intr_reg_w [9]  & d2l_intr_reg_w_enable [9] ) | (reg_intr_reg_intr2_next & ~d2l_intr_reg_w_enable [9] ));
  end
  
  //------- reg assigns for intr_reg
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_intr_reg_count_fld <= #1 8'h55;
      rg_intr_reg_intr1 <= #1 1'd0;
      rg_intr_reg_intr2 <= #1 1'd0;
    end
    else begin
      rg_intr_reg_count_fld <= #1  reg_intr_reg_count_fld_next;
      rg_intr_reg_intr1 <= #1  reg_intr_reg_intr1_next;
      rg_intr_reg_intr2 <= #1  reg_intr_reg_intr2_next;
    end
  end
  
  //------- combinatorial assigns for bigreg
  always_comb begin
    reg_bigreg_field64_next = rg_bigreg_field64;
    if (d2l_bigreg_we) reg_bigreg_field64_next = ((d2l_bigreg_w & d2l_bigreg_w_enable) | (reg_bigreg_field64_next & ~d2l_bigreg_w_enable));
  end
  
  //------- reg assigns for bigreg
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_bigreg_field64 <= #1 64'd0;
    end
    else begin
      rg_bigreg_field64 <= #1  reg_bigreg_field64_next;
    end
  end
  
  //------- combinatorial assigns for log_reg
  always_comb begin
    reg_log_reg_log_err_next = h2l_log_reg_log_err_w;
    rg_log_reg_log_value =  h2l_log_reg_log_value_w;
    if (d2l_log_reg_we) reg_log_reg_log_err_next = ((d2l_log_reg_w [7:0]  & d2l_log_reg_w_enable [7:0] ) | (reg_log_reg_log_err_next & ~d2l_log_reg_w_enable [7:0] ));
  end
  
  //------- reg assigns for log_reg
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_log_reg_log_err <= #1 8'h4;
    end
    else begin
      rg_log_reg_log_err <= #1  reg_log_reg_log_err_next;
    end
  end
  
  //------- combinatorial assigns for intr_reg (pio read data)
  always_comb begin
    l2d_intr_reg_r = 32'b0;
    l2d_intr_reg_r [7:0]  = rg_intr_reg_count_fld;
    l2d_intr_reg_r [8]  = rg_intr_reg_intr1;
    l2d_intr_reg_r [9]  = rg_intr_reg_intr2;
  end
  
  //------- combinatorial assigns for log_reg (pio read data)
  always_comb begin
    l2d_log_reg_r = 32'b0;
    l2d_log_reg_r [7:0]  = rg_log_reg_log_err;
    l2d_log_reg_r [15:8]  = rg_log_reg_log_value;
  end
  
endmodule

//
//---------- module foo_jrdl_decode
//
module foo_jrdl_decode
(
  clk,
  reset,
  h2d_pio_dec_address,
  h2d_pio_dec_write_data,
  h2d_pio_dec_write_enable,
  h2d_pio_dec_trans_size,
  h2d_pio_dec_write,
  h2d_pio_dec_read,
  l2d_intr_reg_r,
  l2d_log_reg_r,
  l2d_bigreg_r,
  h2d_childmap_32b_r,
  h2d_childmap_32b_ack,
  h2d_childmap_32b_nack,

  d2h_dec_pio_trans_size,
  d2h_dec_pio_read_data,
  d2h_dec_pio_ack,
  d2h_dec_pio_nack,
  d2l_intr_reg_w,
  d2l_intr_reg_w_enable,
  d2l_intr_reg_we,
  d2l_intr_reg_re,
  d2l_log_reg_w,
  d2l_log_reg_w_enable,
  d2l_log_reg_we,
  d2l_log_reg_re,
  d2l_bigreg_w,
  d2l_bigreg_w_enable,
  d2l_bigreg_we,
  d2l_bigreg_re,
  d2h_childmap_32b_w,
  d2h_childmap_32b_w_enable,
  d2h_childmap_32b_we,
  d2h_childmap_32b_re,
  d2h_childmap_32b_addr );

  //------- inputs
  input    clk;
  input    reset;
  input     [8:2] h2d_pio_dec_address;
  input     [63:0] h2d_pio_dec_write_data;
  input     [15:0] h2d_pio_dec_write_enable;
  input    h2d_pio_dec_trans_size;
  input    h2d_pio_dec_write;
  input    h2d_pio_dec_read;
  input     [31:0] l2d_intr_reg_r;
  input     [31:0] l2d_log_reg_r;
  input     [63:0] l2d_bigreg_r;
  input     [31:0] h2d_childmap_32b_r;
  input    h2d_childmap_32b_ack;
  input    h2d_childmap_32b_nack;

  //------- outputs
  output    d2h_dec_pio_trans_size;
  output     [63:0] d2h_dec_pio_read_data;
  output    d2h_dec_pio_ack;
  output    d2h_dec_pio_nack;
  output     [31:0] d2l_intr_reg_w;
  output     [31:0] d2l_intr_reg_w_enable;
  output    d2l_intr_reg_we;
  output    d2l_intr_reg_re;
  output     [31:0] d2l_log_reg_w;
  output     [31:0] d2l_log_reg_w_enable;
  output    d2l_log_reg_we;
  output    d2l_log_reg_re;
  output     [63:0] d2l_bigreg_w;
  output     [63:0] d2l_bigreg_w_enable;
  output    d2l_bigreg_we;
  output    d2l_bigreg_re;
  output     [31:0] d2h_childmap_32b_w;
  output     [7:0] d2h_childmap_32b_w_enable;
  output    d2h_childmap_32b_we;
  output    d2h_childmap_32b_re;
  output     [4:2] d2h_childmap_32b_addr;


  //------- wire defines
  logic   [31:0] h2d_childmap_32b_r_ex;
  logic  h2d_childmap_32b_ack_ex;
  logic  h2d_childmap_32b_nack_ex;
  logic   [8:2] pio_dec_address;
  logic   [63:0] pio_dec_write_data;
  logic   [15:0] pio_dec_write_enable;
  logic  pio_dec_trans_size;
  logic  pio_dec_read;
  logic  pio_dec_write;
  
  //------- reg defines
  logic   [31:0] d2l_intr_reg_w;
  logic   [31:0] d2l_intr_reg_w_enable;
  logic  d2l_intr_reg_we;
  logic  d2l_intr_reg_re;
  logic   [31:0] d2l_log_reg_w;
  logic   [31:0] d2l_log_reg_w_enable;
  logic  d2l_log_reg_we;
  logic  d2l_log_reg_re;
  logic   [63:0] d2l_bigreg_w;
  logic   [63:0] d2l_bigreg_w_enable;
  logic  d2l_bigreg_we;
  logic  d2l_bigreg_re;
  logic   [31:0] d2h_childmap_32b_w_ex;
  logic   [7:0] d2h_childmap_32b_w_enable_ex;
  logic  d2h_childmap_32b_we_ex;
  logic  d2h_childmap_32b_re_ex;
  logic   [31:0] d2h_childmap_32b_w_next;
  logic   [7:0] d2h_childmap_32b_w_enable_next;
  logic  d2h_childmap_32b_we_next;
  logic  d2h_childmap_32b_re_next;
  logic   [4:2] d2h_childmap_32b_addr_ex;
  logic   [4:2] d2h_childmap_32b_addr_next;
  logic  pio_write_active;
  logic  pio_read_active;
  logic   [8:2] pio_dec_address_d1;
  logic   [63:0] pio_dec_write_data_d1;
  logic   [15:0] pio_dec_write_enable_d1;
  logic   [63:0] pio_dec_write_enable_full;
  logic  pio_dec_trans_size_d1;
  logic  dec_pio_trans_size;
  logic  reg_width;
  logic   [63:0] dec_pio_read_data;
  logic   [63:0] dec_pio_read_data_d1;
  logic  dec_pio_ack;
  logic  dec_pio_nack;
  logic  dec_pio_ack_next;
  logic  dec_pio_nack_next;
  logic  pio_internal_ack;
  logic  pio_internal_nack;
  logic  pio_partial_write;
  logic  pio_partial_write_nack;
  logic  pio_external_ack;
  logic  pio_external_nack;
  logic  pio_external_ack_next;
  logic  pio_external_nack_next;
  logic  pio_no_acks;
  logic  pio_activate_write;
  logic  pio_activate_read;
  logic   [63:0] dec_pio_read_data_next;
  logic  external_transaction_active;
  
  
  //------- assigns
  assign  d2h_childmap_32b_we = d2h_childmap_32b_we_ex;
  assign  d2h_childmap_32b_w = d2h_childmap_32b_w_ex;
  assign  d2h_childmap_32b_w_enable = d2h_childmap_32b_w_enable_ex;
  assign  d2h_childmap_32b_re = d2h_childmap_32b_re_ex;
  assign  h2d_childmap_32b_r_ex = h2d_childmap_32b_r;
  assign  h2d_childmap_32b_ack_ex = h2d_childmap_32b_ack;
  assign  h2d_childmap_32b_nack_ex = h2d_childmap_32b_nack;
  assign  d2h_childmap_32b_addr = d2h_childmap_32b_addr_ex;
  assign  pio_dec_address = h2d_pio_dec_address;
  assign  pio_dec_write_data = h2d_pio_dec_write_data;
  assign  pio_dec_write_enable = h2d_pio_dec_write_enable;
  assign  pio_dec_trans_size = h2d_pio_dec_trans_size;
  assign  pio_dec_read = h2d_pio_dec_read;
  assign  pio_dec_write = h2d_pio_dec_write;
  assign  d2h_dec_pio_trans_size = dec_pio_trans_size;
  assign  d2h_dec_pio_read_data = dec_pio_read_data;
  assign  d2h_dec_pio_ack = dec_pio_ack;
  assign  d2h_dec_pio_nack = dec_pio_nack;
  
  //------- combinatorial assigns for pio read data
  always_comb begin
    dec_pio_read_data = dec_pio_read_data_d1;
  end
  
  //------- reg assigns for pio read data
  always_ff @ (posedge clk) begin
    if (reset) begin
      dec_pio_read_data_d1 <= #1  64'b0;
    end
    else begin
      dec_pio_read_data_d1 <= #1 dec_pio_read_data_next;
    end
  end
  
  //------- reg assigns for pio i/f
  always_ff @ (posedge clk) begin
    if (reset) begin
      pio_write_active <= #1  1'b0;
      pio_read_active <= #1  1'b0;
      dec_pio_trans_size <= #1 1'b0;
    end
    else begin
      pio_write_active <= #1  pio_write_active ? pio_no_acks : pio_activate_write;
      pio_read_active <= #1  pio_read_active ? pio_no_acks : pio_activate_read;
      dec_pio_trans_size <= #1 reg_width;
    end
    pio_dec_address_d1 <= #1   pio_dec_address;
    pio_dec_write_data_d1 <= #1  pio_dec_write_data;
    pio_dec_write_enable_d1 <= #1  pio_dec_write_enable;
    pio_dec_trans_size_d1 <= #1  pio_dec_trans_size;
  end
  
  //------- reg assigns for external i/f
  always_ff @ (posedge clk) begin
    if (reset) begin
      d2h_childmap_32b_we_ex <= #1  1'b0;
      d2h_childmap_32b_re_ex <= #1  1'b0;
    end
    else begin
      d2h_childmap_32b_we_ex <= #1  d2h_childmap_32b_we_next & ~h2d_childmap_32b_ack_ex & ~h2d_childmap_32b_nack_ex;
      d2h_childmap_32b_re_ex <= #1  d2h_childmap_32b_re_next & ~h2d_childmap_32b_ack_ex & ~h2d_childmap_32b_nack_ex;
    end
    d2h_childmap_32b_w_ex <= #1  d2h_childmap_32b_w_next;
    d2h_childmap_32b_w_enable_ex <= #1  d2h_childmap_32b_w_enable_next;
    d2h_childmap_32b_addr_ex <= #1  d2h_childmap_32b_addr_next;
  end
  
  //------- combinatorial assigns for pio ack/nack
  always_comb begin
    pio_internal_nack = (pio_read_active | pio_write_active) & ~pio_internal_ack & ~external_transaction_active;
    pio_partial_write = pio_write_active && (reg_width > pio_dec_trans_size);
    pio_partial_write_nack = pio_partial_write && (pio_internal_ack | (pio_external_ack_next & external_transaction_active));
    dec_pio_ack_next = !pio_partial_write && (pio_internal_ack | (pio_external_ack_next & external_transaction_active));
    dec_pio_nack_next = (pio_partial_write_nack | pio_internal_nack | (pio_external_nack_next & external_transaction_active));
    pio_no_acks = ~(dec_pio_ack | dec_pio_nack | pio_external_ack | pio_external_nack);
    pio_activate_write = (pio_dec_write & ~(dec_pio_ack | dec_pio_nack));
    pio_activate_read = (pio_dec_read & ~(dec_pio_ack | dec_pio_nack));
  end
  
  //------- reg assigns for pio ack/nack
  always_ff @ (posedge clk) begin
    if (reset) begin
      dec_pio_ack <= #1 1'b0;
      dec_pio_nack <= #1 1'b0;
      pio_external_ack <= #1  1'b0;
      pio_external_nack <= #1  1'b0;
    end
    else begin
      dec_pio_ack <= #1 dec_pio_ack ? 1'b0 : dec_pio_ack_next;
      dec_pio_nack <= #1 dec_pio_nack ? 1'b0 : dec_pio_nack_next;
      pio_external_ack <= #1 pio_external_ack_next;
      pio_external_nack <= #1 pio_external_nack_next;
    end
  end
  
  
  //------- address decode
  always_comb begin
    pio_internal_ack = 1'b0;
    external_transaction_active = 1'b0;
    pio_external_ack_next = 1'b0;
    pio_external_nack_next = 1'b0;
    dec_pio_read_data_next = 64'b0;
    reg_width = 1'd0;
    pio_dec_write_enable_full = 64'd0;
    if (pio_dec_write_enable_d1[0]) pio_dec_write_enable_full [3:0]  = 4'hf;
    if (pio_dec_write_enable_d1[1]) pio_dec_write_enable_full [7:4]  = 4'hf;
    if (pio_dec_write_enable_d1[2]) pio_dec_write_enable_full [11:8]  = 4'hf;
    if (pio_dec_write_enable_d1[3]) pio_dec_write_enable_full [15:12]  = 4'hf;
    if (pio_dec_write_enable_d1[4]) pio_dec_write_enable_full [19:16]  = 4'hf;
    if (pio_dec_write_enable_d1[5]) pio_dec_write_enable_full [23:20]  = 4'hf;
    if (pio_dec_write_enable_d1[6]) pio_dec_write_enable_full [27:24]  = 4'hf;
    if (pio_dec_write_enable_d1[7]) pio_dec_write_enable_full [31:28]  = 4'hf;
    if (pio_dec_write_enable_d1[8]) pio_dec_write_enable_full [35:32]  = 4'hf;
    if (pio_dec_write_enable_d1[9]) pio_dec_write_enable_full [39:36]  = 4'hf;
    if (pio_dec_write_enable_d1[10]) pio_dec_write_enable_full [43:40]  = 4'hf;
    if (pio_dec_write_enable_d1[11]) pio_dec_write_enable_full [47:44]  = 4'hf;
    if (pio_dec_write_enable_d1[12]) pio_dec_write_enable_full [51:48]  = 4'hf;
    if (pio_dec_write_enable_d1[13]) pio_dec_write_enable_full [55:52]  = 4'hf;
    if (pio_dec_write_enable_d1[14]) pio_dec_write_enable_full [59:56]  = 4'hf;
    if (pio_dec_write_enable_d1[15]) pio_dec_write_enable_full [63:60]  = 4'hf;
    
    d2l_intr_reg_w = pio_dec_write_data_d1  [31:0] ;
    d2l_intr_reg_we = 1'b0;
    d2l_intr_reg_re = 1'b0;
    d2l_intr_reg_w_enable = pio_dec_write_enable_full  [31:0] ;
    d2l_log_reg_w = pio_dec_write_data_d1  [31:0] ;
    d2l_log_reg_we = 1'b0;
    d2l_log_reg_re = 1'b0;
    d2l_log_reg_w_enable = pio_dec_write_enable_full  [31:0] ;
    d2l_bigreg_w = pio_dec_write_data_d1  [63:0] ;
    d2l_bigreg_we = 1'b0;
    d2l_bigreg_re = 1'b0;
    d2l_bigreg_w_enable = pio_dec_write_enable_full  [63:0] ;
    d2h_childmap_32b_w_next = pio_dec_write_data_d1 [31:0] ;
    d2h_childmap_32b_w_enable_next = pio_dec_write_enable_d1 [7:0] ;
    d2h_childmap_32b_we_next = 1'b0;
    d2h_childmap_32b_re_next = 1'b0;
    d2h_childmap_32b_addr_next = pio_dec_address_d1  [4:2] ;
    
    casez(pio_dec_address_d1)
    //  Register: intr_reg     Address: 0x0     External: false
    7'b0000000:
      begin
        d2l_intr_reg_we = pio_write_active & ~dec_pio_ack;
        d2l_intr_reg_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_intr_reg_r;
      end
    //  Register: log_reg     Address: 0x4     External: false
    7'b0000001:
      begin
        d2l_log_reg_we = pio_write_active & ~dec_pio_ack;
        d2l_log_reg_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_log_reg_r;
      end
    //  Register: bigreg     Address: 0x8     External: false
    7'b000001?:
      begin
        reg_width = 1'd1;
        d2l_bigreg_we = pio_write_active & ~dec_pio_ack & (pio_dec_trans_size_d1 >= reg_width);
        d2l_bigreg_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [63:0]  = l2d_bigreg_r;
      end
    //  Register: childmap_32b     Address: 0x100     External: true
    7'b1000???:
      begin
        d2h_childmap_32b_we_next = pio_write_active & ~(pio_external_ack | pio_external_nack);
        pio_external_ack_next = h2d_childmap_32b_ack_ex;
        external_transaction_active = pio_read_active | pio_write_active;
        d2h_childmap_32b_re_next = pio_read_active & ~(pio_external_ack | pio_external_nack);
        pio_external_nack_next = h2d_childmap_32b_nack_ex;
        dec_pio_read_data_next  [31:0]  = h2d_childmap_32b_r_ex;
      end
    endcase
  end
  
endmodule

//
//---------- module foo_pio
//
module foo_pio
(
  clk,
  reset,
  h2l_intr_reg_count_fld_incr,
  h2l_intr_reg_count_fld_hwset,
  h2l_intr_reg_count_fld_hwclr,
  h2l_intr_reg_count_fld_swwel,
  h2l_intr_reg_intr1_intr,
  h2l_intr_reg_intr2_intr,
  h2l_log_reg_log_err_w,
  h2l_log_reg_log_value_w,
  h2d_childmap_32b_r,
  h2d_childmap_32b_ack,
  h2d_childmap_32b_nack,
  h2d_pio_dec_address,
  h2d_pio_dec_write_data,
  h2d_pio_dec_write_enable,
  h2d_pio_dec_trans_size,
  h2d_pio_dec_write,
  h2d_pio_dec_read,

  l2h_intr_reg_count_fld_r,
  l2h_intr_reg_intr1_r,
  l2h_intr_reg_intr2_r,
  l2h_intr_reg_intr_o,
  d2h_childmap_32b_w,
  d2h_childmap_32b_w_enable,
  d2h_childmap_32b_we,
  d2h_childmap_32b_re,
  d2h_childmap_32b_addr,
  d2h_dec_pio_trans_size,
  d2h_dec_pio_read_data,
  d2h_dec_pio_ack,
  d2h_dec_pio_nack );

  //------- inputs
  input    clk;
  input    reset;
  input    h2l_intr_reg_count_fld_incr;
  input    h2l_intr_reg_count_fld_hwset;
  input    h2l_intr_reg_count_fld_hwclr;
  input    h2l_intr_reg_count_fld_swwel;
  input    h2l_intr_reg_intr1_intr;
  input    h2l_intr_reg_intr2_intr;
  input     [7:0] h2l_log_reg_log_err_w;
  input     [7:0] h2l_log_reg_log_value_w;
  input     [31:0] h2d_childmap_32b_r;
  input    h2d_childmap_32b_ack;
  input    h2d_childmap_32b_nack;
  input     [8:2] h2d_pio_dec_address;
  input     [63:0] h2d_pio_dec_write_data;
  input     [15:0] h2d_pio_dec_write_enable;
  input    h2d_pio_dec_trans_size;
  input    h2d_pio_dec_write;
  input    h2d_pio_dec_read;

  //------- outputs
  output     [7:0] l2h_intr_reg_count_fld_r;
  output    l2h_intr_reg_intr1_r;
  output    l2h_intr_reg_intr2_r;
  output    l2h_intr_reg_intr_o;
  output     [31:0] d2h_childmap_32b_w;
  output     [7:0] d2h_childmap_32b_w_enable;
  output    d2h_childmap_32b_we;
  output    d2h_childmap_32b_re;
  output     [4:2] d2h_childmap_32b_addr;
  output    d2h_dec_pio_trans_size;
  output     [63:0] d2h_dec_pio_read_data;
  output    d2h_dec_pio_ack;
  output    d2h_dec_pio_nack;


  //------- wire defines
  logic   [31:0] d2l_intr_reg_w;
  logic   [31:0] d2l_intr_reg_w_enable;
  logic  d2l_intr_reg_we;
  logic  d2l_intr_reg_re;
  logic   [31:0] d2l_log_reg_w;
  logic   [31:0] d2l_log_reg_w_enable;
  logic  d2l_log_reg_we;
  logic  d2l_log_reg_re;
  logic   [63:0] d2l_bigreg_w;
  logic   [63:0] d2l_bigreg_w_enable;
  logic  d2l_bigreg_we;
  logic  d2l_bigreg_re;
  logic   [31:0] l2d_intr_reg_r;
  logic   [31:0] l2d_log_reg_r;
  logic   [63:0] l2d_bigreg_r;
  
  
  foo_jrdl_decode pio_decode ( .* );
    
  foo_jrdl_logic pio_logic ( .* );
    
endmodule

//
//---------- module foo_childmap_32b_jrdl_logic
//
module foo_childmap_32b_jrdl_logic
(
  clk,
  reset,
  d2l_childmap_32b_array_reg_0_w,
  d2l_childmap_32b_array_reg_0_w_enable,
  d2l_childmap_32b_array_reg_0_we,
  d2l_childmap_32b_array_reg_0_re,
  d2l_childmap_32b_array_reg_1_w,
  d2l_childmap_32b_array_reg_1_w_enable,
  d2l_childmap_32b_array_reg_1_we,
  d2l_childmap_32b_array_reg_1_re,
  d2l_childmap_32b_array_reg_2_w,
  d2l_childmap_32b_array_reg_2_w_enable,
  d2l_childmap_32b_array_reg_2_we,
  d2l_childmap_32b_array_reg_2_re,
  d2l_childmap_32b_array_reg_3_w,
  d2l_childmap_32b_array_reg_3_w_enable,
  d2l_childmap_32b_array_reg_3_we,
  d2l_childmap_32b_array_reg_3_re,
  d2l_childmap_32b_array_reg_4_w,
  d2l_childmap_32b_array_reg_4_w_enable,
  d2l_childmap_32b_array_reg_4_we,
  d2l_childmap_32b_array_reg_4_re,
  d2l_childmap_32b_array_reg_5_w,
  d2l_childmap_32b_array_reg_5_w_enable,
  d2l_childmap_32b_array_reg_5_we,
  d2l_childmap_32b_array_reg_5_re,
  d2l_childmap_32b_array_reg_6_w,
  d2l_childmap_32b_array_reg_6_w_enable,
  d2l_childmap_32b_array_reg_6_we,
  d2l_childmap_32b_array_reg_6_re,
  d2l_childmap_32b_array_reg_7_w,
  d2l_childmap_32b_array_reg_7_w_enable,
  d2l_childmap_32b_array_reg_7_we,
  d2l_childmap_32b_array_reg_7_re,

  l2d_childmap_32b_array_reg_0_r,
  l2d_childmap_32b_array_reg_1_r,
  l2d_childmap_32b_array_reg_2_r,
  l2d_childmap_32b_array_reg_3_r,
  l2d_childmap_32b_array_reg_4_r,
  l2d_childmap_32b_array_reg_5_r,
  l2d_childmap_32b_array_reg_6_r,
  l2d_childmap_32b_array_reg_7_r );

  //------- inputs
  input    clk;
  input    reset;
  input     [31:0] d2l_childmap_32b_array_reg_0_w;
  input     [31:0] d2l_childmap_32b_array_reg_0_w_enable;
  input    d2l_childmap_32b_array_reg_0_we;
  input    d2l_childmap_32b_array_reg_0_re;
  input     [31:0] d2l_childmap_32b_array_reg_1_w;
  input     [31:0] d2l_childmap_32b_array_reg_1_w_enable;
  input    d2l_childmap_32b_array_reg_1_we;
  input    d2l_childmap_32b_array_reg_1_re;
  input     [31:0] d2l_childmap_32b_array_reg_2_w;
  input     [31:0] d2l_childmap_32b_array_reg_2_w_enable;
  input    d2l_childmap_32b_array_reg_2_we;
  input    d2l_childmap_32b_array_reg_2_re;
  input     [31:0] d2l_childmap_32b_array_reg_3_w;
  input     [31:0] d2l_childmap_32b_array_reg_3_w_enable;
  input    d2l_childmap_32b_array_reg_3_we;
  input    d2l_childmap_32b_array_reg_3_re;
  input     [31:0] d2l_childmap_32b_array_reg_4_w;
  input     [31:0] d2l_childmap_32b_array_reg_4_w_enable;
  input    d2l_childmap_32b_array_reg_4_we;
  input    d2l_childmap_32b_array_reg_4_re;
  input     [31:0] d2l_childmap_32b_array_reg_5_w;
  input     [31:0] d2l_childmap_32b_array_reg_5_w_enable;
  input    d2l_childmap_32b_array_reg_5_we;
  input    d2l_childmap_32b_array_reg_5_re;
  input     [31:0] d2l_childmap_32b_array_reg_6_w;
  input     [31:0] d2l_childmap_32b_array_reg_6_w_enable;
  input    d2l_childmap_32b_array_reg_6_we;
  input    d2l_childmap_32b_array_reg_6_re;
  input     [31:0] d2l_childmap_32b_array_reg_7_w;
  input     [31:0] d2l_childmap_32b_array_reg_7_w_enable;
  input    d2l_childmap_32b_array_reg_7_we;
  input    d2l_childmap_32b_array_reg_7_re;

  //------- outputs
  output     [31:0] l2d_childmap_32b_array_reg_0_r;
  output     [31:0] l2d_childmap_32b_array_reg_1_r;
  output     [31:0] l2d_childmap_32b_array_reg_2_r;
  output     [31:0] l2d_childmap_32b_array_reg_3_r;
  output     [31:0] l2d_childmap_32b_array_reg_4_r;
  output     [31:0] l2d_childmap_32b_array_reg_5_r;
  output     [31:0] l2d_childmap_32b_array_reg_6_r;
  output     [31:0] l2d_childmap_32b_array_reg_7_r;


  //------- reg defines
  logic   [31:0] rg_childmap_32b_array_reg_0_field32;
  logic   [31:0] reg_childmap_32b_array_reg_0_field32_next;
  logic   [31:0] l2d_childmap_32b_array_reg_0_r;
  logic   [31:0] rg_childmap_32b_array_reg_1_field32;
  logic   [31:0] reg_childmap_32b_array_reg_1_field32_next;
  logic   [31:0] l2d_childmap_32b_array_reg_1_r;
  logic   [31:0] rg_childmap_32b_array_reg_2_field32;
  logic   [31:0] reg_childmap_32b_array_reg_2_field32_next;
  logic   [31:0] l2d_childmap_32b_array_reg_2_r;
  logic   [31:0] rg_childmap_32b_array_reg_3_field32;
  logic   [31:0] reg_childmap_32b_array_reg_3_field32_next;
  logic   [31:0] l2d_childmap_32b_array_reg_3_r;
  logic   [31:0] rg_childmap_32b_array_reg_4_field32;
  logic   [31:0] reg_childmap_32b_array_reg_4_field32_next;
  logic   [31:0] l2d_childmap_32b_array_reg_4_r;
  logic   [31:0] rg_childmap_32b_array_reg_5_field32;
  logic   [31:0] reg_childmap_32b_array_reg_5_field32_next;
  logic   [31:0] l2d_childmap_32b_array_reg_5_r;
  logic   [31:0] rg_childmap_32b_array_reg_6_field32;
  logic   [31:0] reg_childmap_32b_array_reg_6_field32_next;
  logic   [31:0] l2d_childmap_32b_array_reg_6_r;
  logic   [31:0] rg_childmap_32b_array_reg_7_field32;
  logic   [31:0] reg_childmap_32b_array_reg_7_field32_next;
  logic   [31:0] l2d_childmap_32b_array_reg_7_r;
  
  
  //------- combinatorial assigns for childmap_32b_array_reg_2
  always_comb begin
    reg_childmap_32b_array_reg_2_field32_next = rg_childmap_32b_array_reg_2_field32;
    if (d2l_childmap_32b_array_reg_2_we) reg_childmap_32b_array_reg_2_field32_next = ((d2l_childmap_32b_array_reg_2_w & d2l_childmap_32b_array_reg_2_w_enable) | (reg_childmap_32b_array_reg_2_field32_next & ~d2l_childmap_32b_array_reg_2_w_enable));
  end
  
  //------- reg assigns for childmap_32b_array_reg_2
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_childmap_32b_array_reg_2_field32 <= #1 32'd0;
    end
    else begin
      rg_childmap_32b_array_reg_2_field32 <= #1  reg_childmap_32b_array_reg_2_field32_next;
    end
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_3
  always_comb begin
    reg_childmap_32b_array_reg_3_field32_next = rg_childmap_32b_array_reg_3_field32;
    if (d2l_childmap_32b_array_reg_3_we) reg_childmap_32b_array_reg_3_field32_next = ((d2l_childmap_32b_array_reg_3_w & d2l_childmap_32b_array_reg_3_w_enable) | (reg_childmap_32b_array_reg_3_field32_next & ~d2l_childmap_32b_array_reg_3_w_enable));
  end
  
  //------- reg assigns for childmap_32b_array_reg_3
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_childmap_32b_array_reg_3_field32 <= #1 32'd0;
    end
    else begin
      rg_childmap_32b_array_reg_3_field32 <= #1  reg_childmap_32b_array_reg_3_field32_next;
    end
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_0
  always_comb begin
    reg_childmap_32b_array_reg_0_field32_next = rg_childmap_32b_array_reg_0_field32;
    if (d2l_childmap_32b_array_reg_0_we) reg_childmap_32b_array_reg_0_field32_next = ((d2l_childmap_32b_array_reg_0_w & d2l_childmap_32b_array_reg_0_w_enable) | (reg_childmap_32b_array_reg_0_field32_next & ~d2l_childmap_32b_array_reg_0_w_enable));
  end
  
  //------- reg assigns for childmap_32b_array_reg_0
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_childmap_32b_array_reg_0_field32 <= #1 32'd0;
    end
    else begin
      rg_childmap_32b_array_reg_0_field32 <= #1  reg_childmap_32b_array_reg_0_field32_next;
    end
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_0 (pio read data)
  always_comb begin
    l2d_childmap_32b_array_reg_0_r = rg_childmap_32b_array_reg_0_field32;
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_1
  always_comb begin
    reg_childmap_32b_array_reg_1_field32_next = rg_childmap_32b_array_reg_1_field32;
    if (d2l_childmap_32b_array_reg_1_we) reg_childmap_32b_array_reg_1_field32_next = ((d2l_childmap_32b_array_reg_1_w & d2l_childmap_32b_array_reg_1_w_enable) | (reg_childmap_32b_array_reg_1_field32_next & ~d2l_childmap_32b_array_reg_1_w_enable));
  end
  
  //------- reg assigns for childmap_32b_array_reg_1
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_childmap_32b_array_reg_1_field32 <= #1 32'd0;
    end
    else begin
      rg_childmap_32b_array_reg_1_field32 <= #1  reg_childmap_32b_array_reg_1_field32_next;
    end
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_3 (pio read data)
  always_comb begin
    l2d_childmap_32b_array_reg_3_r = rg_childmap_32b_array_reg_3_field32;
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_5 (pio read data)
  always_comb begin
    l2d_childmap_32b_array_reg_5_r = rg_childmap_32b_array_reg_5_field32;
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_6
  always_comb begin
    reg_childmap_32b_array_reg_6_field32_next = rg_childmap_32b_array_reg_6_field32;
    if (d2l_childmap_32b_array_reg_6_we) reg_childmap_32b_array_reg_6_field32_next = ((d2l_childmap_32b_array_reg_6_w & d2l_childmap_32b_array_reg_6_w_enable) | (reg_childmap_32b_array_reg_6_field32_next & ~d2l_childmap_32b_array_reg_6_w_enable));
  end
  
  //------- reg assigns for childmap_32b_array_reg_6
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_childmap_32b_array_reg_6_field32 <= #1 32'd0;
    end
    else begin
      rg_childmap_32b_array_reg_6_field32 <= #1  reg_childmap_32b_array_reg_6_field32_next;
    end
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_7
  always_comb begin
    reg_childmap_32b_array_reg_7_field32_next = rg_childmap_32b_array_reg_7_field32;
    if (d2l_childmap_32b_array_reg_7_we) reg_childmap_32b_array_reg_7_field32_next = ((d2l_childmap_32b_array_reg_7_w & d2l_childmap_32b_array_reg_7_w_enable) | (reg_childmap_32b_array_reg_7_field32_next & ~d2l_childmap_32b_array_reg_7_w_enable));
  end
  
  //------- reg assigns for childmap_32b_array_reg_7
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_childmap_32b_array_reg_7_field32 <= #1 32'd0;
    end
    else begin
      rg_childmap_32b_array_reg_7_field32 <= #1  reg_childmap_32b_array_reg_7_field32_next;
    end
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_4
  always_comb begin
    reg_childmap_32b_array_reg_4_field32_next = rg_childmap_32b_array_reg_4_field32;
    if (d2l_childmap_32b_array_reg_4_we) reg_childmap_32b_array_reg_4_field32_next = ((d2l_childmap_32b_array_reg_4_w & d2l_childmap_32b_array_reg_4_w_enable) | (reg_childmap_32b_array_reg_4_field32_next & ~d2l_childmap_32b_array_reg_4_w_enable));
  end
  
  //------- reg assigns for childmap_32b_array_reg_4
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_childmap_32b_array_reg_4_field32 <= #1 32'd0;
    end
    else begin
      rg_childmap_32b_array_reg_4_field32 <= #1  reg_childmap_32b_array_reg_4_field32_next;
    end
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_5
  always_comb begin
    reg_childmap_32b_array_reg_5_field32_next = rg_childmap_32b_array_reg_5_field32;
    if (d2l_childmap_32b_array_reg_5_we) reg_childmap_32b_array_reg_5_field32_next = ((d2l_childmap_32b_array_reg_5_w & d2l_childmap_32b_array_reg_5_w_enable) | (reg_childmap_32b_array_reg_5_field32_next & ~d2l_childmap_32b_array_reg_5_w_enable));
  end
  
  //------- reg assigns for childmap_32b_array_reg_5
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_childmap_32b_array_reg_5_field32 <= #1 32'd0;
    end
    else begin
      rg_childmap_32b_array_reg_5_field32 <= #1  reg_childmap_32b_array_reg_5_field32_next;
    end
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_2 (pio read data)
  always_comb begin
    l2d_childmap_32b_array_reg_2_r = rg_childmap_32b_array_reg_2_field32;
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_6 (pio read data)
  always_comb begin
    l2d_childmap_32b_array_reg_6_r = rg_childmap_32b_array_reg_6_field32;
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_1 (pio read data)
  always_comb begin
    l2d_childmap_32b_array_reg_1_r = rg_childmap_32b_array_reg_1_field32;
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_4 (pio read data)
  always_comb begin
    l2d_childmap_32b_array_reg_4_r = rg_childmap_32b_array_reg_4_field32;
  end
  
  //------- combinatorial assigns for childmap_32b_array_reg_7 (pio read data)
  always_comb begin
    l2d_childmap_32b_array_reg_7_r = rg_childmap_32b_array_reg_7_field32;
  end
  
endmodule

//
//---------- module foo_childmap_32b_jrdl_decode
//
module foo_childmap_32b_jrdl_decode
(
  clk,
  reset,
  d2h_childmap_32b_addr,
  d2h_childmap_32b_w,
  d2h_childmap_32b_w_enable,
  d2h_childmap_32b_we,
  d2h_childmap_32b_re,
  l2d_childmap_32b_array_reg_0_r,
  l2d_childmap_32b_array_reg_1_r,
  l2d_childmap_32b_array_reg_2_r,
  l2d_childmap_32b_array_reg_3_r,
  l2d_childmap_32b_array_reg_4_r,
  l2d_childmap_32b_array_reg_5_r,
  l2d_childmap_32b_array_reg_6_r,
  l2d_childmap_32b_array_reg_7_r,

  h2d_childmap_32b_r,
  h2d_childmap_32b_ack,
  h2d_childmap_32b_nack,
  d2l_childmap_32b_array_reg_0_w,
  d2l_childmap_32b_array_reg_0_w_enable,
  d2l_childmap_32b_array_reg_0_we,
  d2l_childmap_32b_array_reg_0_re,
  d2l_childmap_32b_array_reg_1_w,
  d2l_childmap_32b_array_reg_1_w_enable,
  d2l_childmap_32b_array_reg_1_we,
  d2l_childmap_32b_array_reg_1_re,
  d2l_childmap_32b_array_reg_2_w,
  d2l_childmap_32b_array_reg_2_w_enable,
  d2l_childmap_32b_array_reg_2_we,
  d2l_childmap_32b_array_reg_2_re,
  d2l_childmap_32b_array_reg_3_w,
  d2l_childmap_32b_array_reg_3_w_enable,
  d2l_childmap_32b_array_reg_3_we,
  d2l_childmap_32b_array_reg_3_re,
  d2l_childmap_32b_array_reg_4_w,
  d2l_childmap_32b_array_reg_4_w_enable,
  d2l_childmap_32b_array_reg_4_we,
  d2l_childmap_32b_array_reg_4_re,
  d2l_childmap_32b_array_reg_5_w,
  d2l_childmap_32b_array_reg_5_w_enable,
  d2l_childmap_32b_array_reg_5_we,
  d2l_childmap_32b_array_reg_5_re,
  d2l_childmap_32b_array_reg_6_w,
  d2l_childmap_32b_array_reg_6_w_enable,
  d2l_childmap_32b_array_reg_6_we,
  d2l_childmap_32b_array_reg_6_re,
  d2l_childmap_32b_array_reg_7_w,
  d2l_childmap_32b_array_reg_7_w_enable,
  d2l_childmap_32b_array_reg_7_we,
  d2l_childmap_32b_array_reg_7_re );

  //------- inputs
  input    clk;
  input    reset;
  input     [4:2] d2h_childmap_32b_addr;
  input     [31:0] d2h_childmap_32b_w;
  input     [7:0] d2h_childmap_32b_w_enable;
  input    d2h_childmap_32b_we;
  input    d2h_childmap_32b_re;
  input     [31:0] l2d_childmap_32b_array_reg_0_r;
  input     [31:0] l2d_childmap_32b_array_reg_1_r;
  input     [31:0] l2d_childmap_32b_array_reg_2_r;
  input     [31:0] l2d_childmap_32b_array_reg_3_r;
  input     [31:0] l2d_childmap_32b_array_reg_4_r;
  input     [31:0] l2d_childmap_32b_array_reg_5_r;
  input     [31:0] l2d_childmap_32b_array_reg_6_r;
  input     [31:0] l2d_childmap_32b_array_reg_7_r;

  //------- outputs
  output     [31:0] h2d_childmap_32b_r;
  output    h2d_childmap_32b_ack;
  output    h2d_childmap_32b_nack;
  output     [31:0] d2l_childmap_32b_array_reg_0_w;
  output     [31:0] d2l_childmap_32b_array_reg_0_w_enable;
  output    d2l_childmap_32b_array_reg_0_we;
  output    d2l_childmap_32b_array_reg_0_re;
  output     [31:0] d2l_childmap_32b_array_reg_1_w;
  output     [31:0] d2l_childmap_32b_array_reg_1_w_enable;
  output    d2l_childmap_32b_array_reg_1_we;
  output    d2l_childmap_32b_array_reg_1_re;
  output     [31:0] d2l_childmap_32b_array_reg_2_w;
  output     [31:0] d2l_childmap_32b_array_reg_2_w_enable;
  output    d2l_childmap_32b_array_reg_2_we;
  output    d2l_childmap_32b_array_reg_2_re;
  output     [31:0] d2l_childmap_32b_array_reg_3_w;
  output     [31:0] d2l_childmap_32b_array_reg_3_w_enable;
  output    d2l_childmap_32b_array_reg_3_we;
  output    d2l_childmap_32b_array_reg_3_re;
  output     [31:0] d2l_childmap_32b_array_reg_4_w;
  output     [31:0] d2l_childmap_32b_array_reg_4_w_enable;
  output    d2l_childmap_32b_array_reg_4_we;
  output    d2l_childmap_32b_array_reg_4_re;
  output     [31:0] d2l_childmap_32b_array_reg_5_w;
  output     [31:0] d2l_childmap_32b_array_reg_5_w_enable;
  output    d2l_childmap_32b_array_reg_5_we;
  output    d2l_childmap_32b_array_reg_5_re;
  output     [31:0] d2l_childmap_32b_array_reg_6_w;
  output     [31:0] d2l_childmap_32b_array_reg_6_w_enable;
  output    d2l_childmap_32b_array_reg_6_we;
  output    d2l_childmap_32b_array_reg_6_re;
  output     [31:0] d2l_childmap_32b_array_reg_7_w;
  output     [31:0] d2l_childmap_32b_array_reg_7_w_enable;
  output    d2l_childmap_32b_array_reg_7_we;
  output    d2l_childmap_32b_array_reg_7_re;


  //------- wire defines
  logic   [4:2] pio_dec_address;
  logic   [31:0] pio_dec_write_data;
  logic   [7:0] pio_dec_write_enable;
  logic  pio_dec_read;
  logic  pio_dec_write;
  
  //------- reg defines
  logic   [31:0] d2l_childmap_32b_array_reg_0_w;
  logic   [31:0] d2l_childmap_32b_array_reg_0_w_enable;
  logic  d2l_childmap_32b_array_reg_0_we;
  logic  d2l_childmap_32b_array_reg_0_re;
  logic   [31:0] d2l_childmap_32b_array_reg_1_w;
  logic   [31:0] d2l_childmap_32b_array_reg_1_w_enable;
  logic  d2l_childmap_32b_array_reg_1_we;
  logic  d2l_childmap_32b_array_reg_1_re;
  logic   [31:0] d2l_childmap_32b_array_reg_2_w;
  logic   [31:0] d2l_childmap_32b_array_reg_2_w_enable;
  logic  d2l_childmap_32b_array_reg_2_we;
  logic  d2l_childmap_32b_array_reg_2_re;
  logic   [31:0] d2l_childmap_32b_array_reg_3_w;
  logic   [31:0] d2l_childmap_32b_array_reg_3_w_enable;
  logic  d2l_childmap_32b_array_reg_3_we;
  logic  d2l_childmap_32b_array_reg_3_re;
  logic   [31:0] d2l_childmap_32b_array_reg_4_w;
  logic   [31:0] d2l_childmap_32b_array_reg_4_w_enable;
  logic  d2l_childmap_32b_array_reg_4_we;
  logic  d2l_childmap_32b_array_reg_4_re;
  logic   [31:0] d2l_childmap_32b_array_reg_5_w;
  logic   [31:0] d2l_childmap_32b_array_reg_5_w_enable;
  logic  d2l_childmap_32b_array_reg_5_we;
  logic  d2l_childmap_32b_array_reg_5_re;
  logic   [31:0] d2l_childmap_32b_array_reg_6_w;
  logic   [31:0] d2l_childmap_32b_array_reg_6_w_enable;
  logic  d2l_childmap_32b_array_reg_6_we;
  logic  d2l_childmap_32b_array_reg_6_re;
  logic   [31:0] d2l_childmap_32b_array_reg_7_w;
  logic   [31:0] d2l_childmap_32b_array_reg_7_w_enable;
  logic  d2l_childmap_32b_array_reg_7_we;
  logic  d2l_childmap_32b_array_reg_7_re;
  logic  pio_write_active;
  logic  pio_read_active;
  logic   [4:2] pio_dec_address_d1;
  logic   [31:0] pio_dec_write_data_d1;
  logic   [7:0] pio_dec_write_enable_d1;
  logic   [31:0] pio_dec_write_enable_full;
  logic   [31:0] dec_pio_read_data;
  logic   [31:0] dec_pio_read_data_d1;
  logic  dec_pio_ack;
  logic  dec_pio_nack;
  logic  dec_pio_ack_next;
  logic  dec_pio_nack_next;
  logic  pio_internal_ack;
  logic  pio_internal_nack;
  logic  pio_external_ack;
  logic  pio_external_nack;
  logic  pio_external_ack_next;
  logic  pio_external_nack_next;
  logic  pio_no_acks;
  logic  pio_activate_write;
  logic  pio_activate_read;
  logic   [31:0] dec_pio_read_data_next;
  logic  external_transaction_active;
  
  
  //------- assigns
  assign  pio_dec_address = d2h_childmap_32b_addr;
  assign  pio_dec_write_data = d2h_childmap_32b_w;
  assign  pio_dec_write_enable = d2h_childmap_32b_w_enable;
  assign  pio_dec_read = d2h_childmap_32b_re;
  assign  pio_dec_write = d2h_childmap_32b_we;
  assign  h2d_childmap_32b_r = dec_pio_read_data;
  assign  h2d_childmap_32b_ack = dec_pio_ack;
  assign  h2d_childmap_32b_nack = dec_pio_nack;
  
  //------- combinatorial assigns for pio read data
  always_comb begin
    dec_pio_read_data = dec_pio_read_data_d1;
  end
  
  //------- reg assigns for pio read data
  always_ff @ (posedge clk) begin
    if (reset) begin
      dec_pio_read_data_d1 <= #1  32'b0;
    end
    else begin
      dec_pio_read_data_d1 <= #1 dec_pio_read_data_next;
    end
  end
  
  //------- reg assigns for pio i/f
  always_ff @ (posedge clk) begin
    if (reset) begin
      pio_write_active <= #1  1'b0;
      pio_read_active <= #1  1'b0;
    end
    else begin
      pio_write_active <= #1  pio_write_active ? pio_no_acks : pio_activate_write;
      pio_read_active <= #1  pio_read_active ? pio_no_acks : pio_activate_read;
    end
    pio_dec_address_d1 <= #1   pio_dec_address;
    pio_dec_write_data_d1 <= #1  pio_dec_write_data;
    pio_dec_write_enable_d1 <= #1  pio_dec_write_enable;
  end
  
  //------- combinatorial assigns for pio ack/nack
  always_comb begin
    pio_internal_nack = (pio_read_active | pio_write_active) & ~pio_internal_ack & ~external_transaction_active;
    dec_pio_ack_next = (pio_internal_ack | (pio_external_ack_next & external_transaction_active));
    dec_pio_nack_next = (pio_internal_nack | (pio_external_nack_next & external_transaction_active));
    pio_no_acks = ~(dec_pio_ack | dec_pio_nack | pio_external_ack | pio_external_nack);
    pio_activate_write = (pio_dec_write & ~(dec_pio_ack | dec_pio_nack));
    pio_activate_read = (pio_dec_read & ~(dec_pio_ack | dec_pio_nack));
  end
  
  //------- reg assigns for pio ack/nack
  always_ff @ (posedge clk) begin
    if (reset) begin
      dec_pio_ack <= #1 1'b0;
      dec_pio_nack <= #1 1'b0;
      pio_external_ack <= #1  1'b0;
      pio_external_nack <= #1  1'b0;
    end
    else begin
      dec_pio_ack <= #1 dec_pio_ack ? 1'b0 : dec_pio_ack_next;
      dec_pio_nack <= #1 dec_pio_nack ? 1'b0 : dec_pio_nack_next;
      pio_external_ack <= #1 pio_external_ack_next;
      pio_external_nack <= #1 pio_external_nack_next;
    end
  end
  
  
  //------- address decode
  always_comb begin
    pio_internal_ack = 1'b0;
    external_transaction_active = 1'b0;
    pio_external_ack_next = 1'b0;
    pio_external_nack_next = 1'b0;
    dec_pio_read_data_next = 32'b0;
    pio_dec_write_enable_full = 32'd0;
    if (pio_dec_write_enable_d1[0]) pio_dec_write_enable_full [3:0]  = 4'hf;
    if (pio_dec_write_enable_d1[1]) pio_dec_write_enable_full [7:4]  = 4'hf;
    if (pio_dec_write_enable_d1[2]) pio_dec_write_enable_full [11:8]  = 4'hf;
    if (pio_dec_write_enable_d1[3]) pio_dec_write_enable_full [15:12]  = 4'hf;
    if (pio_dec_write_enable_d1[4]) pio_dec_write_enable_full [19:16]  = 4'hf;
    if (pio_dec_write_enable_d1[5]) pio_dec_write_enable_full [23:20]  = 4'hf;
    if (pio_dec_write_enable_d1[6]) pio_dec_write_enable_full [27:24]  = 4'hf;
    if (pio_dec_write_enable_d1[7]) pio_dec_write_enable_full [31:28]  = 4'hf;
    
    d2l_childmap_32b_array_reg_0_w = pio_dec_write_data_d1  [31:0] ;
    d2l_childmap_32b_array_reg_0_we = 1'b0;
    d2l_childmap_32b_array_reg_0_re = 1'b0;
    d2l_childmap_32b_array_reg_0_w_enable = pio_dec_write_enable_full  [31:0] ;
    d2l_childmap_32b_array_reg_1_w = pio_dec_write_data_d1  [31:0] ;
    d2l_childmap_32b_array_reg_1_we = 1'b0;
    d2l_childmap_32b_array_reg_1_re = 1'b0;
    d2l_childmap_32b_array_reg_1_w_enable = pio_dec_write_enable_full  [31:0] ;
    d2l_childmap_32b_array_reg_2_w = pio_dec_write_data_d1  [31:0] ;
    d2l_childmap_32b_array_reg_2_we = 1'b0;
    d2l_childmap_32b_array_reg_2_re = 1'b0;
    d2l_childmap_32b_array_reg_2_w_enable = pio_dec_write_enable_full  [31:0] ;
    d2l_childmap_32b_array_reg_3_w = pio_dec_write_data_d1  [31:0] ;
    d2l_childmap_32b_array_reg_3_we = 1'b0;
    d2l_childmap_32b_array_reg_3_re = 1'b0;
    d2l_childmap_32b_array_reg_3_w_enable = pio_dec_write_enable_full  [31:0] ;
    d2l_childmap_32b_array_reg_4_w = pio_dec_write_data_d1  [31:0] ;
    d2l_childmap_32b_array_reg_4_we = 1'b0;
    d2l_childmap_32b_array_reg_4_re = 1'b0;
    d2l_childmap_32b_array_reg_4_w_enable = pio_dec_write_enable_full  [31:0] ;
    d2l_childmap_32b_array_reg_5_w = pio_dec_write_data_d1  [31:0] ;
    d2l_childmap_32b_array_reg_5_we = 1'b0;
    d2l_childmap_32b_array_reg_5_re = 1'b0;
    d2l_childmap_32b_array_reg_5_w_enable = pio_dec_write_enable_full  [31:0] ;
    d2l_childmap_32b_array_reg_6_w = pio_dec_write_data_d1  [31:0] ;
    d2l_childmap_32b_array_reg_6_we = 1'b0;
    d2l_childmap_32b_array_reg_6_re = 1'b0;
    d2l_childmap_32b_array_reg_6_w_enable = pio_dec_write_enable_full  [31:0] ;
    d2l_childmap_32b_array_reg_7_w = pio_dec_write_data_d1  [31:0] ;
    d2l_childmap_32b_array_reg_7_we = 1'b0;
    d2l_childmap_32b_array_reg_7_re = 1'b0;
    d2l_childmap_32b_array_reg_7_w_enable = pio_dec_write_enable_full  [31:0] ;
    
    casez(pio_dec_address_d1)
    //  Register: childmap_32b.array_reg_0     Address: 0x100     External: false
    3'b000:
      begin
        d2l_childmap_32b_array_reg_0_we = pio_write_active & ~dec_pio_ack;
        d2l_childmap_32b_array_reg_0_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_childmap_32b_array_reg_0_r;
      end
    //  Register: childmap_32b.array_reg_1     Address: 0x104     External: false
    3'b001:
      begin
        d2l_childmap_32b_array_reg_1_we = pio_write_active & ~dec_pio_ack;
        d2l_childmap_32b_array_reg_1_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_childmap_32b_array_reg_1_r;
      end
    //  Register: childmap_32b.array_reg_2     Address: 0x108     External: false
    3'b010:
      begin
        d2l_childmap_32b_array_reg_2_we = pio_write_active & ~dec_pio_ack;
        d2l_childmap_32b_array_reg_2_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_childmap_32b_array_reg_2_r;
      end
    //  Register: childmap_32b.array_reg_3     Address: 0x10c     External: false
    3'b011:
      begin
        d2l_childmap_32b_array_reg_3_we = pio_write_active & ~dec_pio_ack;
        d2l_childmap_32b_array_reg_3_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_childmap_32b_array_reg_3_r;
      end
    //  Register: childmap_32b.array_reg_4     Address: 0x110     External: false
    3'b100:
      begin
        d2l_childmap_32b_array_reg_4_we = pio_write_active & ~dec_pio_ack;
        d2l_childmap_32b_array_reg_4_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_childmap_32b_array_reg_4_r;
      end
    //  Register: childmap_32b.array_reg_5     Address: 0x114     External: false
    3'b101:
      begin
        d2l_childmap_32b_array_reg_5_we = pio_write_active & ~dec_pio_ack;
        d2l_childmap_32b_array_reg_5_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_childmap_32b_array_reg_5_r;
      end
    //  Register: childmap_32b.array_reg_6     Address: 0x118     External: false
    3'b110:
      begin
        d2l_childmap_32b_array_reg_6_we = pio_write_active & ~dec_pio_ack;
        d2l_childmap_32b_array_reg_6_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_childmap_32b_array_reg_6_r;
      end
    //  Register: childmap_32b.array_reg_7     Address: 0x11c     External: false
    3'b111:
      begin
        d2l_childmap_32b_array_reg_7_we = pio_write_active & ~dec_pio_ack;
        d2l_childmap_32b_array_reg_7_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_childmap_32b_array_reg_7_r;
      end
    endcase
  end
  
endmodule

//
//---------- module foo_childmap_32b_pio
//
module foo_childmap_32b_pio
(
  clk,
  reset,
  d2h_childmap_32b_addr,
  d2h_childmap_32b_w,
  d2h_childmap_32b_w_enable,
  d2h_childmap_32b_we,
  d2h_childmap_32b_re,

  h2d_childmap_32b_r,
  h2d_childmap_32b_ack,
  h2d_childmap_32b_nack );

  //------- inputs
  input    clk;
  input    reset;
  input     [4:2] d2h_childmap_32b_addr;
  input     [31:0] d2h_childmap_32b_w;
  input     [7:0] d2h_childmap_32b_w_enable;
  input    d2h_childmap_32b_we;
  input    d2h_childmap_32b_re;

  //------- outputs
  output     [31:0] h2d_childmap_32b_r;
  output    h2d_childmap_32b_ack;
  output    h2d_childmap_32b_nack;


  //------- wire defines
  logic   [31:0] d2l_childmap_32b_array_reg_0_w;
  logic   [31:0] d2l_childmap_32b_array_reg_0_w_enable;
  logic  d2l_childmap_32b_array_reg_0_we;
  logic  d2l_childmap_32b_array_reg_0_re;
  logic   [31:0] d2l_childmap_32b_array_reg_1_w;
  logic   [31:0] d2l_childmap_32b_array_reg_1_w_enable;
  logic  d2l_childmap_32b_array_reg_1_we;
  logic  d2l_childmap_32b_array_reg_1_re;
  logic   [31:0] d2l_childmap_32b_array_reg_2_w;
  logic   [31:0] d2l_childmap_32b_array_reg_2_w_enable;
  logic  d2l_childmap_32b_array_reg_2_we;
  logic  d2l_childmap_32b_array_reg_2_re;
  logic   [31:0] d2l_childmap_32b_array_reg_3_w;
  logic   [31:0] d2l_childmap_32b_array_reg_3_w_enable;
  logic  d2l_childmap_32b_array_reg_3_we;
  logic  d2l_childmap_32b_array_reg_3_re;
  logic   [31:0] d2l_childmap_32b_array_reg_4_w;
  logic   [31:0] d2l_childmap_32b_array_reg_4_w_enable;
  logic  d2l_childmap_32b_array_reg_4_we;
  logic  d2l_childmap_32b_array_reg_4_re;
  logic   [31:0] d2l_childmap_32b_array_reg_5_w;
  logic   [31:0] d2l_childmap_32b_array_reg_5_w_enable;
  logic  d2l_childmap_32b_array_reg_5_we;
  logic  d2l_childmap_32b_array_reg_5_re;
  logic   [31:0] d2l_childmap_32b_array_reg_6_w;
  logic   [31:0] d2l_childmap_32b_array_reg_6_w_enable;
  logic  d2l_childmap_32b_array_reg_6_we;
  logic  d2l_childmap_32b_array_reg_6_re;
  logic   [31:0] d2l_childmap_32b_array_reg_7_w;
  logic   [31:0] d2l_childmap_32b_array_reg_7_w_enable;
  logic  d2l_childmap_32b_array_reg_7_we;
  logic  d2l_childmap_32b_array_reg_7_re;
  logic   [31:0] l2d_childmap_32b_array_reg_0_r;
  logic   [31:0] l2d_childmap_32b_array_reg_1_r;
  logic   [31:0] l2d_childmap_32b_array_reg_2_r;
  logic   [31:0] l2d_childmap_32b_array_reg_3_r;
  logic   [31:0] l2d_childmap_32b_array_reg_4_r;
  logic   [31:0] l2d_childmap_32b_array_reg_5_r;
  logic   [31:0] l2d_childmap_32b_array_reg_6_r;
  logic   [31:0] l2d_childmap_32b_array_reg_7_r;
  
  
  foo_childmap_32b_jrdl_decode pio_decode ( .* );
    
  foo_childmap_32b_jrdl_logic pio_logic ( .* );
    
endmodule

