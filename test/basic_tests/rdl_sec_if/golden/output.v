//   Ordt 190725.01 autogenerated file 
//   Input: ./rdl_sec_if/test.rdl
//   Parms: ./rdl_sec_if/test.parms
//   Date: Sun Nov 17 17:04:18 EST 2019
//

//
//---------- module base_map_jrdl_logic
//
module base_map_jrdl_logic
(
  clk,
  reset,
  d2l_base_regs_config_regs_0_w,
  d2l_base_regs_config_regs_0_we,
  d2l_base_regs_config_regs_0_re,
  d2l_base_regs_config_regs_1_w,
  d2l_base_regs_config_regs_1_we,
  d2l_base_regs_config_regs_1_re,
  d2l_base_regs_config_regs_2_w,
  d2l_base_regs_config_regs_2_we,
  d2l_base_regs_config_regs_2_re,
  d2l_base_regs_config_regs_3_w,
  d2l_base_regs_config_regs_3_we,
  d2l_base_regs_config_regs_3_re,
  d2l_base_regs_config_regs_4_w,
  d2l_base_regs_config_regs_4_we,
  d2l_base_regs_config_regs_4_re,
  d2l_base_regs_config_regs_5_w,
  d2l_base_regs_config_regs_5_we,
  d2l_base_regs_config_regs_5_re,
  d2l_base_regs_config_regs_6_w,
  d2l_base_regs_config_regs_6_we,
  d2l_base_regs_config_regs_6_re,
  d2l_base_regs_config_regs_7_w,
  d2l_base_regs_config_regs_7_we,
  d2l_base_regs_config_regs_7_re,

  l2d_base_regs_config_regs_0_r,
  l2d_base_regs_config_regs_1_r,
  l2d_base_regs_config_regs_2_r,
  l2d_base_regs_config_regs_3_r,
  l2d_base_regs_config_regs_4_r,
  l2d_base_regs_config_regs_5_r,
  l2d_base_regs_config_regs_6_r,
  l2d_base_regs_config_regs_7_r,
  l2h_base_regs_config_regs_0_lsb_field_r,
  l2h_base_regs_config_regs_0_msb_field_r,
  l2h_base_regs_config_regs_1_lsb_field_r,
  l2h_base_regs_config_regs_1_msb_field_r,
  l2h_base_regs_config_regs_2_lsb_field_r,
  l2h_base_regs_config_regs_2_msb_field_r,
  l2h_base_regs_config_regs_3_lsb_field_r,
  l2h_base_regs_config_regs_3_msb_field_r,
  l2h_base_regs_config_regs_4_lsb_field_r,
  l2h_base_regs_config_regs_4_msb_field_r,
  l2h_base_regs_config_regs_5_lsb_field_r,
  l2h_base_regs_config_regs_5_msb_field_r,
  l2h_base_regs_config_regs_6_lsb_field_r,
  l2h_base_regs_config_regs_6_msb_field_r,
  l2h_base_regs_config_regs_7_lsb_field_r,
  l2h_base_regs_config_regs_7_msb_field_r );

  //------- inputs
  input    clk;
  input    reset;
  input     [31:0] d2l_base_regs_config_regs_0_w;
  input    d2l_base_regs_config_regs_0_we;
  input    d2l_base_regs_config_regs_0_re;
  input     [31:0] d2l_base_regs_config_regs_1_w;
  input    d2l_base_regs_config_regs_1_we;
  input    d2l_base_regs_config_regs_1_re;
  input     [31:0] d2l_base_regs_config_regs_2_w;
  input    d2l_base_regs_config_regs_2_we;
  input    d2l_base_regs_config_regs_2_re;
  input     [31:0] d2l_base_regs_config_regs_3_w;
  input    d2l_base_regs_config_regs_3_we;
  input    d2l_base_regs_config_regs_3_re;
  input     [31:0] d2l_base_regs_config_regs_4_w;
  input    d2l_base_regs_config_regs_4_we;
  input    d2l_base_regs_config_regs_4_re;
  input     [31:0] d2l_base_regs_config_regs_5_w;
  input    d2l_base_regs_config_regs_5_we;
  input    d2l_base_regs_config_regs_5_re;
  input     [31:0] d2l_base_regs_config_regs_6_w;
  input    d2l_base_regs_config_regs_6_we;
  input    d2l_base_regs_config_regs_6_re;
  input     [31:0] d2l_base_regs_config_regs_7_w;
  input    d2l_base_regs_config_regs_7_we;
  input    d2l_base_regs_config_regs_7_re;

  //------- outputs
  output     [31:0] l2d_base_regs_config_regs_0_r;
  output     [31:0] l2d_base_regs_config_regs_1_r;
  output     [31:0] l2d_base_regs_config_regs_2_r;
  output     [31:0] l2d_base_regs_config_regs_3_r;
  output     [31:0] l2d_base_regs_config_regs_4_r;
  output     [31:0] l2d_base_regs_config_regs_5_r;
  output     [31:0] l2d_base_regs_config_regs_6_r;
  output     [31:0] l2d_base_regs_config_regs_7_r;
  output     [15:0] l2h_base_regs_config_regs_0_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_0_msb_field_r;
  output     [15:0] l2h_base_regs_config_regs_1_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_1_msb_field_r;
  output     [15:0] l2h_base_regs_config_regs_2_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_2_msb_field_r;
  output     [15:0] l2h_base_regs_config_regs_3_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_3_msb_field_r;
  output     [15:0] l2h_base_regs_config_regs_4_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_4_msb_field_r;
  output     [15:0] l2h_base_regs_config_regs_5_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_5_msb_field_r;
  output     [15:0] l2h_base_regs_config_regs_6_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_6_msb_field_r;
  output     [15:0] l2h_base_regs_config_regs_7_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_7_msb_field_r;


  //------- reg defines
  reg   [15:0] rg_base_regs_config_regs_0_lsb_field;
  reg   [15:0] reg_base_regs_config_regs_0_lsb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_0_lsb_field_r;
  reg   [15:0] rg_base_regs_config_regs_0_msb_field;
  reg   [15:0] reg_base_regs_config_regs_0_msb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_0_msb_field_r;
  reg   [31:0] l2d_base_regs_config_regs_0_r;
  reg   [15:0] rg_base_regs_config_regs_1_lsb_field;
  reg   [15:0] reg_base_regs_config_regs_1_lsb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_1_lsb_field_r;
  reg   [15:0] rg_base_regs_config_regs_1_msb_field;
  reg   [15:0] reg_base_regs_config_regs_1_msb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_1_msb_field_r;
  reg   [31:0] l2d_base_regs_config_regs_1_r;
  reg   [15:0] rg_base_regs_config_regs_2_lsb_field;
  reg   [15:0] reg_base_regs_config_regs_2_lsb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_2_lsb_field_r;
  reg   [15:0] rg_base_regs_config_regs_2_msb_field;
  reg   [15:0] reg_base_regs_config_regs_2_msb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_2_msb_field_r;
  reg   [31:0] l2d_base_regs_config_regs_2_r;
  reg   [15:0] rg_base_regs_config_regs_3_lsb_field;
  reg   [15:0] reg_base_regs_config_regs_3_lsb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_3_lsb_field_r;
  reg   [15:0] rg_base_regs_config_regs_3_msb_field;
  reg   [15:0] reg_base_regs_config_regs_3_msb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_3_msb_field_r;
  reg   [31:0] l2d_base_regs_config_regs_3_r;
  reg   [15:0] rg_base_regs_config_regs_4_lsb_field;
  reg   [15:0] reg_base_regs_config_regs_4_lsb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_4_lsb_field_r;
  reg   [15:0] rg_base_regs_config_regs_4_msb_field;
  reg   [15:0] reg_base_regs_config_regs_4_msb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_4_msb_field_r;
  reg   [31:0] l2d_base_regs_config_regs_4_r;
  reg   [15:0] rg_base_regs_config_regs_5_lsb_field;
  reg   [15:0] reg_base_regs_config_regs_5_lsb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_5_lsb_field_r;
  reg   [15:0] rg_base_regs_config_regs_5_msb_field;
  reg   [15:0] reg_base_regs_config_regs_5_msb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_5_msb_field_r;
  reg   [31:0] l2d_base_regs_config_regs_5_r;
  reg   [15:0] rg_base_regs_config_regs_6_lsb_field;
  reg   [15:0] reg_base_regs_config_regs_6_lsb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_6_lsb_field_r;
  reg   [15:0] rg_base_regs_config_regs_6_msb_field;
  reg   [15:0] reg_base_regs_config_regs_6_msb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_6_msb_field_r;
  reg   [31:0] l2d_base_regs_config_regs_6_r;
  reg   [15:0] rg_base_regs_config_regs_7_lsb_field;
  reg   [15:0] reg_base_regs_config_regs_7_lsb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_7_lsb_field_r;
  reg   [15:0] rg_base_regs_config_regs_7_msb_field;
  reg   [15:0] reg_base_regs_config_regs_7_msb_field_next;
  reg   [15:0] l2h_base_regs_config_regs_7_msb_field_r;
  reg   [31:0] l2d_base_regs_config_regs_7_r;
  
  
  //------- combinatorial assigns for base_regs_config_regs_0
  always @ (*) begin
    reg_base_regs_config_regs_0_lsb_field_next = rg_base_regs_config_regs_0_lsb_field;
    l2h_base_regs_config_regs_0_lsb_field_r = rg_base_regs_config_regs_0_lsb_field;
    reg_base_regs_config_regs_0_msb_field_next = rg_base_regs_config_regs_0_msb_field;
    l2h_base_regs_config_regs_0_msb_field_r = rg_base_regs_config_regs_0_msb_field;
    if (d2l_base_regs_config_regs_0_we) reg_base_regs_config_regs_0_lsb_field_next = d2l_base_regs_config_regs_0_w [15:0] ;
    if (d2l_base_regs_config_regs_0_we) reg_base_regs_config_regs_0_msb_field_next = d2l_base_regs_config_regs_0_w [31:16] ;
  end
  
  //------- reg assigns for base_regs_config_regs_0
  always @ (posedge clk) begin
    if (reset) begin
      rg_base_regs_config_regs_0_lsb_field <= #1 16'hffff;
      rg_base_regs_config_regs_0_msb_field <= #1 16'h0;
    end
    else begin
      rg_base_regs_config_regs_0_lsb_field <= #1  reg_base_regs_config_regs_0_lsb_field_next;
      rg_base_regs_config_regs_0_msb_field <= #1  reg_base_regs_config_regs_0_msb_field_next;
    end
  end
  
  //------- combinatorial assigns for base_regs_config_regs_4 (pio read data)
  always @ (*) begin
    l2d_base_regs_config_regs_4_r [15:0]  = rg_base_regs_config_regs_4_lsb_field;
    l2d_base_regs_config_regs_4_r [31:16]  = rg_base_regs_config_regs_4_msb_field;
  end
  
  //------- combinatorial assigns for base_regs_config_regs_2
  always @ (*) begin
    reg_base_regs_config_regs_2_lsb_field_next = rg_base_regs_config_regs_2_lsb_field;
    l2h_base_regs_config_regs_2_lsb_field_r = rg_base_regs_config_regs_2_lsb_field;
    reg_base_regs_config_regs_2_msb_field_next = rg_base_regs_config_regs_2_msb_field;
    l2h_base_regs_config_regs_2_msb_field_r = rg_base_regs_config_regs_2_msb_field;
    if (d2l_base_regs_config_regs_2_we) reg_base_regs_config_regs_2_lsb_field_next = d2l_base_regs_config_regs_2_w [15:0] ;
    if (d2l_base_regs_config_regs_2_we) reg_base_regs_config_regs_2_msb_field_next = d2l_base_regs_config_regs_2_w [31:16] ;
  end
  
  //------- reg assigns for base_regs_config_regs_2
  always @ (posedge clk) begin
    if (reset) begin
      rg_base_regs_config_regs_2_lsb_field <= #1 16'hffff;
      rg_base_regs_config_regs_2_msb_field <= #1 16'h0;
    end
    else begin
      rg_base_regs_config_regs_2_lsb_field <= #1  reg_base_regs_config_regs_2_lsb_field_next;
      rg_base_regs_config_regs_2_msb_field <= #1  reg_base_regs_config_regs_2_msb_field_next;
    end
  end
  
  //------- combinatorial assigns for base_regs_config_regs_1
  always @ (*) begin
    reg_base_regs_config_regs_1_lsb_field_next = rg_base_regs_config_regs_1_lsb_field;
    l2h_base_regs_config_regs_1_lsb_field_r = rg_base_regs_config_regs_1_lsb_field;
    reg_base_regs_config_regs_1_msb_field_next = rg_base_regs_config_regs_1_msb_field;
    l2h_base_regs_config_regs_1_msb_field_r = rg_base_regs_config_regs_1_msb_field;
    if (d2l_base_regs_config_regs_1_we) reg_base_regs_config_regs_1_lsb_field_next = d2l_base_regs_config_regs_1_w [15:0] ;
    if (d2l_base_regs_config_regs_1_we) reg_base_regs_config_regs_1_msb_field_next = d2l_base_regs_config_regs_1_w [31:16] ;
  end
  
  //------- reg assigns for base_regs_config_regs_1
  always @ (posedge clk) begin
    if (reset) begin
      rg_base_regs_config_regs_1_lsb_field <= #1 16'hffff;
      rg_base_regs_config_regs_1_msb_field <= #1 16'h0;
    end
    else begin
      rg_base_regs_config_regs_1_lsb_field <= #1  reg_base_regs_config_regs_1_lsb_field_next;
      rg_base_regs_config_regs_1_msb_field <= #1  reg_base_regs_config_regs_1_msb_field_next;
    end
  end
  
  //------- combinatorial assigns for base_regs_config_regs_4
  always @ (*) begin
    reg_base_regs_config_regs_4_lsb_field_next = rg_base_regs_config_regs_4_lsb_field;
    l2h_base_regs_config_regs_4_lsb_field_r = rg_base_regs_config_regs_4_lsb_field;
    reg_base_regs_config_regs_4_msb_field_next = rg_base_regs_config_regs_4_msb_field;
    l2h_base_regs_config_regs_4_msb_field_r = rg_base_regs_config_regs_4_msb_field;
    if (d2l_base_regs_config_regs_4_we) reg_base_regs_config_regs_4_lsb_field_next = d2l_base_regs_config_regs_4_w [15:0] ;
    if (d2l_base_regs_config_regs_4_we) reg_base_regs_config_regs_4_msb_field_next = d2l_base_regs_config_regs_4_w [31:16] ;
  end
  
  //------- reg assigns for base_regs_config_regs_4
  always @ (posedge clk) begin
    if (reset) begin
      rg_base_regs_config_regs_4_lsb_field <= #1 16'hffff;
      rg_base_regs_config_regs_4_msb_field <= #1 16'h0;
    end
    else begin
      rg_base_regs_config_regs_4_lsb_field <= #1  reg_base_regs_config_regs_4_lsb_field_next;
      rg_base_regs_config_regs_4_msb_field <= #1  reg_base_regs_config_regs_4_msb_field_next;
    end
  end
  
  //------- combinatorial assigns for base_regs_config_regs_3
  always @ (*) begin
    reg_base_regs_config_regs_3_lsb_field_next = rg_base_regs_config_regs_3_lsb_field;
    l2h_base_regs_config_regs_3_lsb_field_r = rg_base_regs_config_regs_3_lsb_field;
    reg_base_regs_config_regs_3_msb_field_next = rg_base_regs_config_regs_3_msb_field;
    l2h_base_regs_config_regs_3_msb_field_r = rg_base_regs_config_regs_3_msb_field;
    if (d2l_base_regs_config_regs_3_we) reg_base_regs_config_regs_3_lsb_field_next = d2l_base_regs_config_regs_3_w [15:0] ;
    if (d2l_base_regs_config_regs_3_we) reg_base_regs_config_regs_3_msb_field_next = d2l_base_regs_config_regs_3_w [31:16] ;
  end
  
  //------- reg assigns for base_regs_config_regs_3
  always @ (posedge clk) begin
    if (reset) begin
      rg_base_regs_config_regs_3_lsb_field <= #1 16'hffff;
      rg_base_regs_config_regs_3_msb_field <= #1 16'h0;
    end
    else begin
      rg_base_regs_config_regs_3_lsb_field <= #1  reg_base_regs_config_regs_3_lsb_field_next;
      rg_base_regs_config_regs_3_msb_field <= #1  reg_base_regs_config_regs_3_msb_field_next;
    end
  end
  
  //------- combinatorial assigns for base_regs_config_regs_5 (pio read data)
  always @ (*) begin
    l2d_base_regs_config_regs_5_r [15:0]  = rg_base_regs_config_regs_5_lsb_field;
    l2d_base_regs_config_regs_5_r [31:16]  = rg_base_regs_config_regs_5_msb_field;
  end
  
  //------- combinatorial assigns for base_regs_config_regs_7 (pio read data)
  always @ (*) begin
    l2d_base_regs_config_regs_7_r [15:0]  = rg_base_regs_config_regs_7_lsb_field;
    l2d_base_regs_config_regs_7_r [31:16]  = rg_base_regs_config_regs_7_msb_field;
  end
  
  //------- combinatorial assigns for base_regs_config_regs_1 (pio read data)
  always @ (*) begin
    l2d_base_regs_config_regs_1_r [15:0]  = rg_base_regs_config_regs_1_lsb_field;
    l2d_base_regs_config_regs_1_r [31:16]  = rg_base_regs_config_regs_1_msb_field;
  end
  
  //------- combinatorial assigns for base_regs_config_regs_6 (pio read data)
  always @ (*) begin
    l2d_base_regs_config_regs_6_r [15:0]  = rg_base_regs_config_regs_6_lsb_field;
    l2d_base_regs_config_regs_6_r [31:16]  = rg_base_regs_config_regs_6_msb_field;
  end
  
  //------- combinatorial assigns for base_regs_config_regs_2 (pio read data)
  always @ (*) begin
    l2d_base_regs_config_regs_2_r [15:0]  = rg_base_regs_config_regs_2_lsb_field;
    l2d_base_regs_config_regs_2_r [31:16]  = rg_base_regs_config_regs_2_msb_field;
  end
  
  //------- combinatorial assigns for base_regs_config_regs_6
  always @ (*) begin
    reg_base_regs_config_regs_6_lsb_field_next = rg_base_regs_config_regs_6_lsb_field;
    l2h_base_regs_config_regs_6_lsb_field_r = rg_base_regs_config_regs_6_lsb_field;
    reg_base_regs_config_regs_6_msb_field_next = rg_base_regs_config_regs_6_msb_field;
    l2h_base_regs_config_regs_6_msb_field_r = rg_base_regs_config_regs_6_msb_field;
    if (d2l_base_regs_config_regs_6_we) reg_base_regs_config_regs_6_lsb_field_next = d2l_base_regs_config_regs_6_w [15:0] ;
    if (d2l_base_regs_config_regs_6_we) reg_base_regs_config_regs_6_msb_field_next = d2l_base_regs_config_regs_6_w [31:16] ;
  end
  
  //------- reg assigns for base_regs_config_regs_6
  always @ (posedge clk) begin
    if (reset) begin
      rg_base_regs_config_regs_6_lsb_field <= #1 16'hffff;
      rg_base_regs_config_regs_6_msb_field <= #1 16'h0;
    end
    else begin
      rg_base_regs_config_regs_6_lsb_field <= #1  reg_base_regs_config_regs_6_lsb_field_next;
      rg_base_regs_config_regs_6_msb_field <= #1  reg_base_regs_config_regs_6_msb_field_next;
    end
  end
  
  //------- combinatorial assigns for base_regs_config_regs_3 (pio read data)
  always @ (*) begin
    l2d_base_regs_config_regs_3_r [15:0]  = rg_base_regs_config_regs_3_lsb_field;
    l2d_base_regs_config_regs_3_r [31:16]  = rg_base_regs_config_regs_3_msb_field;
  end
  
  //------- combinatorial assigns for base_regs_config_regs_5
  always @ (*) begin
    reg_base_regs_config_regs_5_lsb_field_next = rg_base_regs_config_regs_5_lsb_field;
    l2h_base_regs_config_regs_5_lsb_field_r = rg_base_regs_config_regs_5_lsb_field;
    reg_base_regs_config_regs_5_msb_field_next = rg_base_regs_config_regs_5_msb_field;
    l2h_base_regs_config_regs_5_msb_field_r = rg_base_regs_config_regs_5_msb_field;
    if (d2l_base_regs_config_regs_5_we) reg_base_regs_config_regs_5_lsb_field_next = d2l_base_regs_config_regs_5_w [15:0] ;
    if (d2l_base_regs_config_regs_5_we) reg_base_regs_config_regs_5_msb_field_next = d2l_base_regs_config_regs_5_w [31:16] ;
  end
  
  //------- reg assigns for base_regs_config_regs_5
  always @ (posedge clk) begin
    if (reset) begin
      rg_base_regs_config_regs_5_lsb_field <= #1 16'hffff;
      rg_base_regs_config_regs_5_msb_field <= #1 16'h0;
    end
    else begin
      rg_base_regs_config_regs_5_lsb_field <= #1  reg_base_regs_config_regs_5_lsb_field_next;
      rg_base_regs_config_regs_5_msb_field <= #1  reg_base_regs_config_regs_5_msb_field_next;
    end
  end
  
  //------- combinatorial assigns for base_regs_config_regs_7
  always @ (*) begin
    reg_base_regs_config_regs_7_lsb_field_next = rg_base_regs_config_regs_7_lsb_field;
    l2h_base_regs_config_regs_7_lsb_field_r = rg_base_regs_config_regs_7_lsb_field;
    reg_base_regs_config_regs_7_msb_field_next = rg_base_regs_config_regs_7_msb_field;
    l2h_base_regs_config_regs_7_msb_field_r = rg_base_regs_config_regs_7_msb_field;
    if (d2l_base_regs_config_regs_7_we) reg_base_regs_config_regs_7_lsb_field_next = d2l_base_regs_config_regs_7_w [15:0] ;
    if (d2l_base_regs_config_regs_7_we) reg_base_regs_config_regs_7_msb_field_next = d2l_base_regs_config_regs_7_w [31:16] ;
  end
  
  //------- reg assigns for base_regs_config_regs_7
  always @ (posedge clk) begin
    if (reset) begin
      rg_base_regs_config_regs_7_lsb_field <= #1 16'hffff;
      rg_base_regs_config_regs_7_msb_field <= #1 16'h0;
    end
    else begin
      rg_base_regs_config_regs_7_lsb_field <= #1  reg_base_regs_config_regs_7_lsb_field_next;
      rg_base_regs_config_regs_7_msb_field <= #1  reg_base_regs_config_regs_7_msb_field_next;
    end
  end
  
  //------- combinatorial assigns for base_regs_config_regs_0 (pio read data)
  always @ (*) begin
    l2d_base_regs_config_regs_0_r [15:0]  = rg_base_regs_config_regs_0_lsb_field;
    l2d_base_regs_config_regs_0_r [31:16]  = rg_base_regs_config_regs_0_msb_field;
  end
  
endmodule

//
//---------- module base_map_jrdl_decode
//
module base_map_jrdl_decode
(
  clk,
  reset,
  p1_leaf_dec_wr_data,
  p1_leaf_dec_addr,
  p1_leaf_dec_valid,
  p1_leaf_dec_wr_dvld,
  p1_leaf_dec_cycle,
  p1_leaf_dec_wr_width,
  p2_e1_cntl_start_r,
  p2_e1_cntl_force_stop_r,
  p2_e1_cfg_mode_r,
  p2_e1_cfg_stop_on_read_r,
  p2_e1_cfg_stop_on_count_r,
  p2_e1_cfg_trans_delay_r,
  p2_e1_cfg_read_capture_mode_r,
  p2_e1_write_data_val_r,
  p2_e1_write_mask_val_r,
  p2_e1_address_start_val_r,
  p2_e1_address_step_val_r,
  p2_e1_max_trans_count_val_r,
  p2_e1_read_match_data_val_r,
  p2_e1_read_mask_val_r,
  l2d_base_regs_config_regs_0_r,
  l2d_base_regs_config_regs_1_r,
  l2d_base_regs_config_regs_2_r,
  l2d_base_regs_config_regs_3_r,
  l2d_base_regs_config_regs_4_r,
  l2d_base_regs_config_regs_5_r,
  l2d_base_regs_config_regs_6_r,
  l2d_base_regs_config_regs_7_r,
  r2d_primary_res_valid,
  r2d_primary_res_data,

  p1_dec_leaf_rd_data,
  p1_dec_leaf_ack,
  p1_dec_leaf_nack,
  p1_dec_leaf_accept,
  p1_dec_leaf_reject,
  p1_dec_leaf_retry_atomic,
  p1_dec_leaf_data_width,
  p2_e1_status_state_w,
  p2_e1_status_nack_error_intr,
  p2_e1_status_bad_address_error_intr,
  p2_e1_last_read_data_val_w,
  d2l_base_regs_config_regs_0_w,
  d2l_base_regs_config_regs_0_we,
  d2l_base_regs_config_regs_0_re,
  d2l_base_regs_config_regs_1_w,
  d2l_base_regs_config_regs_1_we,
  d2l_base_regs_config_regs_1_re,
  d2l_base_regs_config_regs_2_w,
  d2l_base_regs_config_regs_2_we,
  d2l_base_regs_config_regs_2_re,
  d2l_base_regs_config_regs_3_w,
  d2l_base_regs_config_regs_3_we,
  d2l_base_regs_config_regs_3_re,
  d2l_base_regs_config_regs_4_w,
  d2l_base_regs_config_regs_4_we,
  d2l_base_regs_config_regs_4_re,
  d2l_base_regs_config_regs_5_w,
  d2l_base_regs_config_regs_5_we,
  d2l_base_regs_config_regs_5_re,
  d2l_base_regs_config_regs_6_w,
  d2l_base_regs_config_regs_6_we,
  d2l_base_regs_config_regs_6_re,
  d2l_base_regs_config_regs_7_w,
  d2l_base_regs_config_regs_7_we,
  d2l_base_regs_config_regs_7_re,
  d2r_primary_cmd_valid,
  d2r_primary_cmd_data );

  //------- inputs
  input    clk;
  input    reset;
  input     [31:0] p1_leaf_dec_wr_data;
  input     [39:0] p1_leaf_dec_addr;
  input    p1_leaf_dec_valid;
  input    p1_leaf_dec_wr_dvld;
  input     [1:0] p1_leaf_dec_cycle;
  input     [2:0] p1_leaf_dec_wr_width;
  input    p2_e1_cntl_start_r;
  input    p2_e1_cntl_force_stop_r;
  input     [1:0] p2_e1_cfg_mode_r;
  input     [1:0] p2_e1_cfg_stop_on_read_r;
  input    p2_e1_cfg_stop_on_count_r;
  input     [9:0] p2_e1_cfg_trans_delay_r;
  input     [1:0] p2_e1_cfg_read_capture_mode_r;
  input     [31:0] p2_e1_write_data_val_r;
  input     [31:0] p2_e1_write_mask_val_r;
  input     [5:2] p2_e1_address_start_val_r;
  input     [5:2] p2_e1_address_step_val_r;
  input     [17:2] p2_e1_max_trans_count_val_r;
  input     [31:0] p2_e1_read_match_data_val_r;
  input     [31:0] p2_e1_read_mask_val_r;
  input     [31:0] l2d_base_regs_config_regs_0_r;
  input     [31:0] l2d_base_regs_config_regs_1_r;
  input     [31:0] l2d_base_regs_config_regs_2_r;
  input     [31:0] l2d_base_regs_config_regs_3_r;
  input     [31:0] l2d_base_regs_config_regs_4_r;
  input     [31:0] l2d_base_regs_config_regs_5_r;
  input     [31:0] l2d_base_regs_config_regs_6_r;
  input     [31:0] l2d_base_regs_config_regs_7_r;
  input    r2d_primary_res_valid;
  input     [15:0] r2d_primary_res_data;

  //------- outputs
  output     [31:0] p1_dec_leaf_rd_data;
  output    p1_dec_leaf_ack;
  output    p1_dec_leaf_nack;
  output    p1_dec_leaf_accept;
  output    p1_dec_leaf_reject;
  output    p1_dec_leaf_retry_atomic;
  output     [2:0] p1_dec_leaf_data_width;
  output     [2:0] p2_e1_status_state_w;
  output    p2_e1_status_nack_error_intr;
  output    p2_e1_status_bad_address_error_intr;
  output     [31:0] p2_e1_last_read_data_val_w;
  output     [31:0] d2l_base_regs_config_regs_0_w;
  output    d2l_base_regs_config_regs_0_we;
  output    d2l_base_regs_config_regs_0_re;
  output     [31:0] d2l_base_regs_config_regs_1_w;
  output    d2l_base_regs_config_regs_1_we;
  output    d2l_base_regs_config_regs_1_re;
  output     [31:0] d2l_base_regs_config_regs_2_w;
  output    d2l_base_regs_config_regs_2_we;
  output    d2l_base_regs_config_regs_2_re;
  output     [31:0] d2l_base_regs_config_regs_3_w;
  output    d2l_base_regs_config_regs_3_we;
  output    d2l_base_regs_config_regs_3_re;
  output     [31:0] d2l_base_regs_config_regs_4_w;
  output    d2l_base_regs_config_regs_4_we;
  output    d2l_base_regs_config_regs_4_re;
  output     [31:0] d2l_base_regs_config_regs_5_w;
  output    d2l_base_regs_config_regs_5_we;
  output    d2l_base_regs_config_regs_5_re;
  output     [31:0] d2l_base_regs_config_regs_6_w;
  output    d2l_base_regs_config_regs_6_we;
  output    d2l_base_regs_config_regs_6_re;
  output     [31:0] d2l_base_regs_config_regs_7_w;
  output    d2l_base_regs_config_regs_7_we;
  output    d2l_base_regs_config_regs_7_re;
  output    d2r_primary_cmd_valid;
  output     [15:0] d2r_primary_cmd_data;


  //------- wire defines
  wire   [31:0] h2d_primary_r_ex;
  wire  d2r_primary_cmd_valid;
  wire   [15:0] d2r_primary_cmd_data;
  wire  r16_primary_resValid_dly0;
  wire   [15:0] r16_primary_resData_dly0;
  wire   [31:0] p1_pio_dec_write_data;
  wire   [5:2] p1_pio_dec_address;
  wire  p1_pio_dec_read;
  wire  p1_pio_dec_write;
  wire  p1_arb_atomic_request;
  wire   [39:0] p1_block_sel_addr;
  wire  p1_block_sel;
  wire  p1_leaf_dec_valid_active;
  wire  p1_leaf_dec_wr_dvld_active;
  wire   [31:0] p1_dec_pio_read_data;
  wire   [31:0] p2_dec_pio_read_data;
  wire  pio_dec_read;
  wire  pio_dec_write;
  wire  arb_valid_sec_address;
  
  //------- reg defines
  reg   [31:0] d2l_base_regs_config_regs_0_w;
  reg  d2l_base_regs_config_regs_0_we;
  reg  d2l_base_regs_config_regs_0_re;
  reg   [31:0] d2l_base_regs_config_regs_1_w;
  reg  d2l_base_regs_config_regs_1_we;
  reg  d2l_base_regs_config_regs_1_re;
  reg   [31:0] d2l_base_regs_config_regs_2_w;
  reg  d2l_base_regs_config_regs_2_we;
  reg  d2l_base_regs_config_regs_2_re;
  reg   [31:0] d2l_base_regs_config_regs_3_w;
  reg  d2l_base_regs_config_regs_3_we;
  reg  d2l_base_regs_config_regs_3_re;
  reg   [31:0] d2l_base_regs_config_regs_4_w;
  reg  d2l_base_regs_config_regs_4_we;
  reg  d2l_base_regs_config_regs_4_re;
  reg   [31:0] d2l_base_regs_config_regs_5_w;
  reg  d2l_base_regs_config_regs_5_we;
  reg  d2l_base_regs_config_regs_5_re;
  reg   [31:0] d2l_base_regs_config_regs_6_w;
  reg  d2l_base_regs_config_regs_6_we;
  reg  d2l_base_regs_config_regs_6_re;
  reg   [31:0] d2l_base_regs_config_regs_7_w;
  reg  d2l_base_regs_config_regs_7_we;
  reg  d2l_base_regs_config_regs_7_re;
  reg   [31:0] d2h_primary_w_ex;
  reg  d2h_primary_we_ex;
  reg  d2h_primary_re_ex;
  reg   [31:0] d2h_primary_w_next;
  reg  d2h_primary_we_next;
  reg  d2h_primary_re_next;
  reg   [4:2] d2h_primary_addr_ex;
  reg   [4:2] d2h_primary_addr_next;
  reg  h2d_primary_ack_ex;
  reg  h2d_primary_nack_ex;
  reg   [2:0] r16_primary_state;
  reg   [2:0] r16_primary_state_next;
  reg  r16_primary_cmdValid_dly0;
  reg   [15:0] r16_primary_cmdData_dly0;
  reg  r16_primary_cmdValid_dly1;
  reg   [15:0] r16_primary_cmdData_dly1;
  reg  r16_primary_resValid_dly1;
  reg   [15:0] r16_primary_resData_dly1;
  reg   [31:0] r16_primary_rdata_accum;
  reg   [31:0] r16_primary_rdata_accum_next;
  reg  r16_primary_data_cnt;
  reg  r16_primary_data_cnt_next;
  reg  p1_leaf_dec_valid_hld1;
  reg  p1_leaf_dec_valid_hld1_next;
  reg  p1_leaf_dec_wr_dvld_hld1;
  reg  p1_leaf_dec_wr_dvld_hld1_next;
  reg   [31:0] p2_pio_dec_write_data;
  reg   [5:2] p2_pio_dec_address;
  reg  p2_pio_dec_read;
  reg  p2_pio_dec_write;
  reg  p2_arb_atomic_request;
  reg  p2_e1_status_nack_error_intr;
  reg  p2_e1_status_bad_address_error_intr;
  reg   [31:0] p2_pio_dec_write_data_next;
  reg   [6:2] p2_pio_dec_address_next;
  reg  p2_pio_dec_read_next;
  reg  p2_pio_dec_write_next;
  reg  p2_arb_atomic_request_next;
  reg   [31:0] p2_e1_last_read_data_val_w;
  reg   [31:0] p2_e1_last_read_data_val_w_next;
  reg   [2:0] p2_e1_status_state_w;
  reg   [2:0] p2_e1_state_next;
  reg   [18:2] p2_e1_trans_count;
  reg   [18:2] p2_e1_trans_count_next;
  reg   [9:0] p2_e1_delay_count;
  reg   [9:0] p2_e1_delay_count_next;
  reg  p1_dec_pio_ack;
  reg  p1_dec_pio_nack;
  reg  p1_dec_pio_ack_next;
  reg  p1_dec_pio_nack_next;
  reg  p2_dec_pio_ack;
  reg  p2_dec_pio_nack;
  reg  p2_dec_pio_ack_next;
  reg  p2_dec_pio_nack_next;
  reg   [5:2] pio_dec_address;
  reg   [31:0] pio_dec_write_data;
  reg   [2:0] arbiter_state;
  reg   [2:0] arbiter_state_next;
  reg  arb_pio_dec_read;
  reg  arb_pio_dec_write;
  reg  arb_pio_dec_read_next;
  reg  arb_pio_dec_write_next;
  reg  pio_write_active;
  reg  pio_read_active;
  reg   [5:2] pio_dec_address_d1;
  reg   [31:0] pio_dec_write_data_d1;
  reg   [31:0] dec_pio_read_data;
  reg   [31:0] dec_pio_read_data_d1;
  reg  dec_pio_ack;
  reg  dec_pio_nack;
  reg  dec_pio_ack_next;
  reg  dec_pio_nack_next;
  reg  pio_internal_ack;
  reg  pio_internal_nack;
  reg  pio_external_ack;
  reg  pio_external_nack;
  reg  pio_external_ack_next;
  reg  pio_external_nack_next;
  reg  pio_no_acks;
  reg  pio_activate_write;
  reg  pio_activate_read;
  reg   [31:0] dec_pio_read_data_next;
  reg  external_transaction_active;
  
  
  //------- assigns
  assign  d2r_primary_cmd_valid = r16_primary_cmdValid_dly1;
  assign  d2r_primary_cmd_data = r16_primary_cmdData_dly1;
  assign  r16_primary_resValid_dly0 = r2d_primary_res_valid;
  assign  r16_primary_resData_dly0 = r2d_primary_res_data;
  assign  h2d_primary_r_ex = r16_primary_rdata_accum;
  assign  p1_arb_atomic_request = 1'b0;
  assign  p1_pio_dec_write_data = p1_leaf_dec_wr_data;
  assign  p1_dec_leaf_rd_data = p1_dec_pio_read_data;
  assign  p1_dec_leaf_ack = p1_dec_pio_ack;
  assign  p1_dec_leaf_nack = p1_dec_pio_nack;
  assign  p1_pio_dec_address = p1_leaf_dec_addr [5:2] ;
  assign  p1_block_sel_addr = 40'h0;
  assign  p1_block_sel = (p1_block_sel_addr [39:6]  == p1_leaf_dec_addr  [39:6] );
  assign  p1_leaf_dec_wr_dvld_active = p1_leaf_dec_wr_dvld | p1_leaf_dec_wr_dvld_hld1;
  assign  p1_leaf_dec_valid_active = p1_leaf_dec_valid | p1_leaf_dec_valid_hld1;
  assign  p1_dec_leaf_accept = p1_leaf_dec_valid & p1_block_sel;
  assign  p1_dec_leaf_reject = p1_leaf_dec_valid & ~p1_block_sel;
  assign  p1_pio_dec_read = p1_block_sel & p1_leaf_dec_valid_active & (p1_leaf_dec_cycle == 2'b10);
  assign  p1_pio_dec_write = p1_block_sel & p1_leaf_dec_wr_dvld_active & (p1_leaf_dec_cycle[1] == 1'b0);
  assign  p1_dec_leaf_retry_atomic = 1'b0;
  assign  p1_dec_leaf_data_width = 3'b0;
  assign  arb_valid_sec_address = (p2_pio_dec_address <= 4'ha);
  assign  p1_dec_pio_read_data = dec_pio_read_data;
  assign  p2_dec_pio_read_data = dec_pio_read_data;
  assign  pio_dec_read = arb_pio_dec_read;
  assign  pio_dec_write = arb_pio_dec_write;
  
  //------- combinatorial assigns for pio read data
  always @ (*) begin
    dec_pio_read_data = dec_pio_read_data_d1;
  end
  
  //------- reg assigns for pio read data
  always @ (posedge clk) begin
    if (reset) begin
      dec_pio_read_data_d1 <= #1  32'b0;
    end
    else begin
      dec_pio_read_data_d1 <= #1 dec_pio_read_data_next;
    end
  end
  
  //------- combinatorial assigns for secondary engine1 i/f sm
  always @ (*) begin
    p2_e1_state_next = p2_e1_status_state_w;
    p2_pio_dec_read_next =  1'b0;
    p2_pio_dec_write_next =  1'b0;
    p2_arb_atomic_request_next =  1'b0;
    p2_pio_dec_write_data_next = p2_pio_dec_write_data;
    p2_e1_last_read_data_val_w_next = p2_e1_last_read_data_val_w;
    p2_e1_status_nack_error_intr =  1'b0;
    p2_e1_status_bad_address_error_intr =  1'b0;
    p2_e1_trans_count_next = p2_e1_trans_count;
    p2_pio_dec_address_next = {1'b0, p2_pio_dec_address};
    p2_e1_delay_count_next = 10'b0;
    case (p2_e1_status_state_w)
      3'h0: begin // IDLE
          p2_e1_trans_count_next = 41'b0;
          p2_pio_dec_address_next = {1'b0, p2_e1_address_start_val_r};
          if (p2_e1_cntl_start_r && !p2_e1_cntl_force_stop_r) begin
            if (p2_e1_cfg_read_capture_mode_r == 2'h1)
              p2_e1_last_read_data_val_w_next = ~32'b0;
            else
              p2_e1_last_read_data_val_w_next = 32'b0;
            if ((p2_e1_cfg_mode_r == 2'h1) || (p2_e1_cfg_mode_r == 2'h2)) begin
              p2_e1_state_next = 3'h1;
            end
            else begin
              p2_e1_state_next = 3'h2;
              p2_pio_dec_write_data_next = p2_e1_write_data_val_r;
            end
          end
        end
      3'h1: begin // READ_WAIT
          p2_e1_delay_count_next = p2_e1_delay_count + 10'b1;
          if (p2_e1_cntl_force_stop_r) begin
            p2_e1_state_next = 3'h0;
          end
          else if (p2_e1_delay_count == p2_e1_cfg_trans_delay_r) begin
              p2_e1_state_next = 3'h3;
              p2_pio_dec_read_next =  1'b1;
              p2_arb_atomic_request_next =  (p2_e1_cfg_mode_r == 2'h2);
          end
          else if (|p2_e1_trans_count) begin
            if ((p2_e1_cfg_stop_on_read_r == 2'h2) && ((p2_e1_last_read_data_val_w & ~p2_e1_read_mask_val_r) == p2_e1_read_match_data_val_r))
              p2_e1_state_next = 3'h0;
            if ((p2_e1_cfg_stop_on_read_r == 2'h1) && ((p2_e1_last_read_data_val_w & ~p2_e1_read_mask_val_r) < p2_e1_read_match_data_val_r))
              p2_e1_state_next = 3'h0;
            if ((p2_e1_cfg_stop_on_read_r == 2'h3) && ((p2_e1_last_read_data_val_w & ~p2_e1_read_mask_val_r) > p2_e1_read_match_data_val_r))
              p2_e1_state_next = 3'h0;
          end
        end
      3'h2: begin // WRITE_WAIT
          p2_e1_delay_count_next = p2_e1_delay_count + 10'b1;
          if (p2_e1_cntl_force_stop_r) begin
            p2_e1_state_next = 3'h0;
          end
          else if (p2_e1_delay_count == p2_e1_cfg_trans_delay_r) begin
              p2_e1_state_next = 3'h4;
              p2_pio_dec_write_next =  1'b1;
          end
          else if (|p2_e1_trans_count) begin
            if ((p2_e1_cfg_stop_on_read_r == 2'h2) && ((p2_e1_last_read_data_val_w & ~p2_e1_read_mask_val_r) == p2_e1_read_match_data_val_r))
              p2_e1_state_next = 3'h0;
            if ((p2_e1_cfg_stop_on_read_r == 2'h1) && ((p2_e1_last_read_data_val_w & ~p2_e1_read_mask_val_r) < p2_e1_read_match_data_val_r))
              p2_e1_state_next = 3'h0;
            if ((p2_e1_cfg_stop_on_read_r == 2'h3) && ((p2_e1_last_read_data_val_w & ~p2_e1_read_mask_val_r) > p2_e1_read_match_data_val_r))
              p2_e1_state_next = 3'h0;
          end
        end
      3'h3: begin // READ
          if (p2_dec_pio_ack) begin
            if (p2_e1_cfg_mode_r == 2'h1) begin
              p2_e1_trans_count_next = p2_e1_trans_count + 41'b1;
              p2_pio_dec_address_next = p2_pio_dec_address + p2_e1_address_step_val_r;
            end
            if (p2_e1_cfg_read_capture_mode_r == 2'h3)
              p2_e1_last_read_data_val_w_next = p2_dec_pio_read_data;
            if ((p2_e1_cfg_read_capture_mode_r == 2'h1) && (p2_dec_pio_read_data < p2_e1_last_read_data_val_w))
              p2_e1_last_read_data_val_w_next = p2_dec_pio_read_data;
            if ((p2_e1_cfg_read_capture_mode_r == 2'h2) && (p2_dec_pio_read_data > p2_e1_last_read_data_val_w))
              p2_e1_last_read_data_val_w_next = p2_dec_pio_read_data;
            if (p2_e1_cntl_force_stop_r) begin
              p2_e1_state_next = 3'h0;
            end
            else if (p2_e1_cfg_mode_r == 2'h2) begin
              p2_e1_state_next = 3'h4;
              p2_pio_dec_write_next =  1'b1;
              p2_pio_dec_write_data_next = ((p2_e1_write_data_val_r & ~p2_e1_write_mask_val_r) | (p2_dec_pio_read_data & p2_e1_write_mask_val_r));
            end
            else if (p2_e1_cfg_mode_r == 2'h1) begin
              if (p2_e1_cfg_stop_on_count_r && (p2_e1_trans_count_next == {1'b0,p2_e1_max_trans_count_val_r}))
                p2_e1_state_next = 3'h0;
              else if (p2_pio_dec_address_next [6]  == 1'b1) begin
                p2_e1_state_next = 3'h0;
                p2_e1_status_bad_address_error_intr =  1'b1;
              end
              else begin
                p2_e1_state_next = 3'h1;
              end
            end
            else p2_e1_state_next = 3'h0;
          end
          else if (p2_dec_pio_nack) begin
            p2_e1_state_next = 3'h0;
            p2_e1_status_nack_error_intr =  1'b1;
          end
          else begin
            p2_pio_dec_read_next =  1'b1;
            p2_arb_atomic_request_next =  (p2_e1_cfg_mode_r == 2'h2);
          end
        end
      3'h4: begin // WRITE
          if (p2_dec_pio_ack) begin
            if (p2_e1_cfg_mode_r != 2'h1) begin
              p2_e1_trans_count_next = p2_e1_trans_count + 41'b1;
              p2_pio_dec_address_next = p2_pio_dec_address + p2_e1_address_step_val_r;
            end
            if ((p2_e1_cfg_stop_on_count_r && (p2_e1_trans_count_next == {1'b0,p2_e1_max_trans_count_val_r})) || p2_e1_cntl_force_stop_r) begin
              p2_e1_state_next = 3'h0;
            end
            else if (p2_pio_dec_address_next [6]  == 1'b1) begin
              p2_e1_state_next = 3'h0;
              p2_e1_status_bad_address_error_intr =  1'b1;
            end
            else if (p2_e1_cfg_mode_r == 2'h2) begin
              p2_e1_state_next = 3'h1;
            end
            else begin
              p2_e1_state_next = 3'h2;
            end
          end
          else if (p2_dec_pio_nack) begin
            p2_e1_state_next = 3'h0;
            p2_e1_status_nack_error_intr =  1'b1;
          end
          else begin
            p2_pio_dec_write_next =  1'b1;
          end
        end
      default:
        p2_e1_state_next = 3'h0;
    endcase
  end
  
  //------- reg assigns for secondary engine1 i/f sm
  always @ (posedge clk) begin
    if (reset) begin
      p2_e1_status_state_w <= #1  3'b0;
      p2_e1_trans_count <= #1  161'b0;
      p2_e1_delay_count <= #1  10'b0;
    end
    else begin
      p2_e1_status_state_w <= #1  p2_e1_state_next;
      p2_e1_trans_count <= #1  p2_e1_trans_count_next;
      p2_e1_delay_count <= #1  p2_e1_delay_count_next;
    end
  end
  
  //------- reg assigns for secondary engine1 i/f signals
  always @ (posedge clk) begin
    if (reset) begin
      p2_pio_dec_write_data <= #1  32'b0;
      p2_pio_dec_address <= #1  4'b0;
      p2_pio_dec_read <= #1  1'b0;
      p2_pio_dec_write <= #1  1'b0;
      p2_arb_atomic_request <= #1  1'b0;
      p2_e1_last_read_data_val_w <= #1  32'b0;
    end
    else begin
      p2_pio_dec_write_data <= #1  p2_pio_dec_write_data_next;
      p2_pio_dec_address <= #1  p2_pio_dec_address_next [5:2] ;
      p2_pio_dec_read <= #1  p2_pio_dec_read_next;
      p2_pio_dec_write <= #1  p2_pio_dec_write_next;
      p2_arb_atomic_request <= #1  p2_arb_atomic_request_next;
      p2_e1_last_read_data_val_w <= #1  p2_e1_last_read_data_val_w_next;
    end
  end
  
  //------- combinatorial assigns for interface arbiter input select
  always @ (*) begin
    pio_dec_address = p1_pio_dec_address;
    pio_dec_write_data = p1_pio_dec_write_data;
    if (arbiter_state == 3'h2) begin
      pio_dec_address = p2_pio_dec_address;
      pio_dec_write_data = p2_pio_dec_write_data;
    end
  end
  
  //------- combinatorial assigns for primary ring16 i/f
  always @ (*) begin
    r16_primary_state_next = r16_primary_state;
    r16_primary_cmdValid_dly0 =  1'b0;
    r16_primary_cmdData_dly0 =  16'b0;
    h2d_primary_ack_ex =  1'b0;
    h2d_primary_nack_ex =  1'b0;
    r16_primary_rdata_accum_next = r16_primary_rdata_accum;
    r16_primary_data_cnt_next = 1'b0;
    case (r16_primary_state)
      3'h0: begin // IDLE
          r16_primary_rdata_accum_next = 32'b0;
          if (d2h_primary_re_ex | d2h_primary_we_ex) begin
            r16_primary_cmdValid_dly0 =  1'b1;
            r16_primary_cmdData_dly0[7] = d2h_primary_we_ex;
            r16_primary_cmdData_dly0 [5:4]  = 2'd1;
            r16_primary_state_next = 3'h1;
          end
        end
      3'h1: begin // CMD_ADDR
          r16_primary_cmdValid_dly0 =  1'b1;
          r16_primary_cmdData_dly0 = {13'h1, d2h_primary_addr_ex};
          if (d2h_primary_we_ex) r16_primary_state_next = 3'h2;
          else r16_primary_state_next = 3'h3;
        end
      3'h2: begin // CMD_DATA
          r16_primary_cmdValid_dly0 =  1'b1;
          r16_primary_data_cnt_next = r16_primary_data_cnt + 1'b1;
          if (r16_primary_data_cnt == 1'd0)
            r16_primary_cmdData_dly0 = d2h_primary_w_ex [15:0] ;
          else if (r16_primary_data_cnt == 1'd1)
            r16_primary_cmdData_dly0 = d2h_primary_w_ex [31:16] ;
          if (r16_primary_data_cnt == 1'b1)
            r16_primary_state_next = 3'h3;
        end
      3'h3: begin  // RES_WAIT
          if (r16_primary_resValid_dly1) begin
            if (d2h_primary_re_ex & r16_primary_resData_dly1[14] & ~r16_primary_resData_dly1[15]) r16_primary_state_next = 3'h4;
            else if (~r16_primary_resData_dly1[14]) r16_primary_state_next = 3'h6;
            else r16_primary_state_next = 3'h5;
          end
        end
      3'h4: begin  // RES_READ
          r16_primary_data_cnt_next = r16_primary_data_cnt;
          if (r16_primary_resValid_dly1) begin
            r16_primary_data_cnt_next = r16_primary_data_cnt + 1'b1;
            if (r16_primary_data_cnt == 1'd0)
              r16_primary_rdata_accum_next [15:0]  = r16_primary_resData_dly1;
            else if (r16_primary_data_cnt == 1'd1)
              r16_primary_rdata_accum_next [31:16]  = r16_primary_resData_dly1;
          end
          if (r16_primary_data_cnt == 1'b1) r16_primary_state_next = 3'h5;
        end
      3'h5: begin // RES_DONE_ACK
          h2d_primary_ack_ex = 1'b1;
          r16_primary_state_next = 3'h0;
        end
      3'h6: begin // RES_DONE_NACK
          h2d_primary_nack_ex = 1'b1;
          r16_primary_state_next = 3'h0;
        end
      default:
        r16_primary_state_next = 3'h0;
    endcase
  end
  
  //------- reg assigns for primary ring16 i/f
  always @ (posedge clk) begin
    if (reset) begin
      r16_primary_state <= #1  3'b0;
      r16_primary_cmdValid_dly1 <= #1  1'b0;
      r16_primary_cmdData_dly1 <= #1  16'b0;
      r16_primary_resValid_dly1 <= #1  1'b0;
      r16_primary_resData_dly1 <= #1  16'b0;
      r16_primary_data_cnt <= #1  1'b0;
    end
    else begin
      r16_primary_state <= #1  r16_primary_state_next;
      r16_primary_cmdValid_dly1 <= #1  r16_primary_cmdValid_dly0;
      r16_primary_cmdData_dly1 <= #1  r16_primary_cmdData_dly0;
      r16_primary_resValid_dly1 <= #1  r16_primary_resValid_dly0;
      r16_primary_resData_dly1 <= #1  r16_primary_resData_dly0;
      r16_primary_data_cnt <= #1  r16_primary_data_cnt_next;
    end
    r16_primary_rdata_accum <= #1  r16_primary_rdata_accum_next;
  end
  
  //------- combinatorial assigns for interface arbiter sm
  always @ (*) begin
    arbiter_state_next = arbiter_state;
    arb_pio_dec_read_next =  1'b0;
    arb_pio_dec_write_next =  1'b0;
    case (arbiter_state)
      3'h0: begin // IDLE
          if (p1_pio_dec_read || p1_pio_dec_write) begin
            arbiter_state_next = 3'h1;
            arb_pio_dec_read_next = p1_pio_dec_read;
            arb_pio_dec_write_next = p1_pio_dec_write;
          end
          else if (p2_pio_dec_read || p2_pio_dec_write) begin
            if (arb_valid_sec_address) begin
              arbiter_state_next = 3'h2;
              arb_pio_dec_read_next = p2_pio_dec_read;
              arb_pio_dec_write_next = p2_pio_dec_write;
            end
            else arbiter_state_next = 3'h3;
          end
        end
      3'h1: begin // P1_ACTIVE
          if (dec_pio_ack || dec_pio_nack) begin
            if (p1_arb_atomic_request) arbiter_state_next = 3'h4;
            else if (p2_pio_dec_read || p2_pio_dec_write) begin
              if (arb_valid_sec_address) begin
                arbiter_state_next = 3'h2;
                arb_pio_dec_read_next = p2_pio_dec_read;
                arb_pio_dec_write_next = p2_pio_dec_write;
              end
              else arbiter_state_next = 3'h3;
            end
            else arbiter_state_next = 3'h0;
          end
          else if (!p1_pio_dec_read && !p1_pio_dec_write) arbiter_state_next = 3'h0;
          else begin
            arb_pio_dec_read_next = p1_pio_dec_read;
            arb_pio_dec_write_next = p1_pio_dec_write;
          end
        end
      3'h2: begin // P2_ACTIVE
          if (dec_pio_ack || dec_pio_nack) begin
            if (p2_arb_atomic_request) arbiter_state_next = 3'h5;
            else if (p1_pio_dec_read || p1_pio_dec_write) begin
              arbiter_state_next = 3'h1;
              arb_pio_dec_read_next = p1_pio_dec_read;
              arb_pio_dec_write_next = p1_pio_dec_write;
            end
            else arbiter_state_next = 3'h0;
          end
          else if (!p2_pio_dec_read && !p2_pio_dec_write) arbiter_state_next = 3'h0;
          else begin
            arb_pio_dec_read_next = p2_pio_dec_read;
            arb_pio_dec_write_next = p2_pio_dec_write;
          end
        end
      3'h3: begin // P2_NACK
          arbiter_state_next = 3'h0;
        end
      3'h4: begin // P1_ATOMIC
          if (p1_pio_dec_read || p1_pio_dec_write) begin
            arbiter_state_next = 3'h1;
            arb_pio_dec_read_next = p1_pio_dec_read;
            arb_pio_dec_write_next = p1_pio_dec_write;
          end
        end
      3'h5: begin // P2_ATOMIC
          if (p2_pio_dec_read || p2_pio_dec_write) begin
            if (arb_valid_sec_address) begin
              arbiter_state_next = 3'h2;
              arb_pio_dec_read_next = p2_pio_dec_read;
              arb_pio_dec_write_next = p2_pio_dec_write;
            end
            else arbiter_state_next = 3'h3;
          end
        end
      default:
        arbiter_state_next = 3'h0;
    endcase
  end
  
  //------- reg assigns for interface arbiter sm
  always @ (posedge clk) begin
    if (reset) begin
      arbiter_state <= #1  3'b0;
      arb_pio_dec_read <= #1  1'b0;
      arb_pio_dec_write <= #1  1'b0;
    end
    else begin
      arbiter_state <= #1  arbiter_state_next;
      arb_pio_dec_read <= #1  arb_pio_dec_read_next;
      arb_pio_dec_write <= #1  arb_pio_dec_write_next;
    end
  end
  
  //------- reg assigns for pio i/f
  always @ (posedge clk) begin
    if (reset) begin
      pio_write_active <= #1  1'b0;
      pio_read_active <= #1  1'b0;
    end
    else begin
      pio_write_active <= #1  pio_write_active ? pio_no_acks : pio_activate_write;
      pio_read_active <= #1  pio_read_active ? pio_no_acks : pio_activate_read;
    end
    pio_dec_address_d1 <= #1   pio_dec_address;
    pio_dec_write_data_d1 <= #1  pio_dec_write_data;
  end
  
  //------- reg assigns for external i/f
  always @ (posedge clk) begin
    if (reset) begin
      d2h_primary_we_ex <= #1  1'b0;
      d2h_primary_re_ex <= #1  1'b0;
    end
    else begin
      d2h_primary_we_ex <= #1  d2h_primary_we_next & ~h2d_primary_ack_ex & ~h2d_primary_nack_ex;
      d2h_primary_re_ex <= #1  d2h_primary_re_next & ~h2d_primary_ack_ex & ~h2d_primary_nack_ex;
    end
    d2h_primary_w_ex <= #1  d2h_primary_w_next;
    d2h_primary_addr_ex <= #1  d2h_primary_addr_next;
  end
  
  //------- combinatorial assigns for primary leaf i/f
  always @ (*) begin
    p1_leaf_dec_valid_hld1_next = p1_leaf_dec_valid | p1_leaf_dec_valid_hld1;
    if (p1_dec_pio_ack_next | p1_dec_pio_nack_next) p1_leaf_dec_valid_hld1_next = 1'b0;
    p1_leaf_dec_wr_dvld_hld1_next = p1_leaf_dec_wr_dvld | p1_leaf_dec_wr_dvld_hld1;
    if (p1_dec_pio_ack_next | p1_dec_pio_nack_next | p1_leaf_dec_valid) p1_leaf_dec_wr_dvld_hld1_next = 1'b0;
  end
  
  //------- reg assigns for primary leaf i/f
  always @ (posedge clk) begin
    if (reset) begin
      p1_leaf_dec_valid_hld1 <= #1  1'b0;
      p1_leaf_dec_wr_dvld_hld1 <= #1  1'b0;
    end
    else begin
      p1_leaf_dec_valid_hld1 <= #1 p1_leaf_dec_valid_hld1_next;
      p1_leaf_dec_wr_dvld_hld1 <= #1 p1_leaf_dec_wr_dvld_hld1_next;
    end
  end
  
  //------- combinatorial assigns for interface arbiter early acks/nacks
  always @ (*) begin
    p1_dec_pio_ack_next =  1'b0;
    p1_dec_pio_nack_next =  1'b0;
    p2_dec_pio_ack_next =  1'b0;
    p2_dec_pio_nack_next =  1'b0;
    if (arbiter_state == 3'h1) begin
      p1_dec_pio_ack_next = dec_pio_ack_next;
      p1_dec_pio_nack_next = dec_pio_nack_next;
    end
    else if (arbiter_state == 3'h2) begin
      p2_dec_pio_ack_next = dec_pio_ack_next;
      p2_dec_pio_nack_next = dec_pio_nack_next;
    end
  end
  
  //------- combinatorial assigns for pio ack/nack
  always @ (*) begin
    pio_internal_nack = (pio_read_active | pio_write_active) & ~pio_internal_ack & ~external_transaction_active;
    dec_pio_ack_next = (pio_internal_ack | (pio_external_ack_next & external_transaction_active));
    dec_pio_nack_next = (pio_internal_nack | (pio_external_nack_next & external_transaction_active));
    pio_no_acks = ~(dec_pio_ack | dec_pio_nack | pio_external_ack | pio_external_nack);
    pio_activate_write = (pio_dec_write & ~(dec_pio_ack | dec_pio_nack));
    pio_activate_read = (pio_dec_read & ~(dec_pio_ack | dec_pio_nack));
  end
  
  //------- reg assigns for pio ack/nack
  always @ (posedge clk) begin
    if (reset) begin
      dec_pio_ack <= #1 1'b0;
      dec_pio_nack <= #1 1'b0;
      pio_external_ack <= #1  1'b0;
      pio_external_nack <= #1  1'b0;
    end
    else begin
      dec_pio_ack <= #1 dec_pio_ack ? 1'b0 : dec_pio_ack_next;
      dec_pio_nack <= #1 dec_pio_nack ? 1'b0 : dec_pio_nack_next;
      pio_external_ack <= #1 pio_external_ack_next;
      pio_external_nack <= #1 pio_external_nack_next;
    end
  end
  
  //------- combinatorial assigns for interface arbiter acks/nacks
  always @ (*) begin
    p1_dec_pio_ack =  1'b0;
    p1_dec_pio_nack =  1'b0;
    p2_dec_pio_ack =  1'b0;
    p2_dec_pio_nack =  1'b0;
    if (arbiter_state == 3'h1) begin
      p1_dec_pio_ack = dec_pio_ack;
      p1_dec_pio_nack = dec_pio_nack;
    end
    else if (arbiter_state == 3'h2) begin
      p2_dec_pio_ack = dec_pio_ack;
      p2_dec_pio_nack = dec_pio_nack;
    end
    else if (arbiter_state == 3'h3) begin
      p2_dec_pio_nack = 1'b1;
    end
  end
  
  
  //------- address decode
  always @ (*) begin
    pio_internal_ack = 1'b0;
    external_transaction_active = 1'b0;
    pio_external_ack_next = 1'b0;
    pio_external_nack_next = 1'b0;
    dec_pio_read_data_next = 32'b0;
    
    d2l_base_regs_config_regs_0_w = pio_dec_write_data_d1  [31:0] ;
    d2l_base_regs_config_regs_0_we = 1'b0;
    d2l_base_regs_config_regs_0_re = 1'b0;
    d2l_base_regs_config_regs_1_w = pio_dec_write_data_d1  [31:0] ;
    d2l_base_regs_config_regs_1_we = 1'b0;
    d2l_base_regs_config_regs_1_re = 1'b0;
    d2l_base_regs_config_regs_2_w = pio_dec_write_data_d1  [31:0] ;
    d2l_base_regs_config_regs_2_we = 1'b0;
    d2l_base_regs_config_regs_2_re = 1'b0;
    d2l_base_regs_config_regs_3_w = pio_dec_write_data_d1  [31:0] ;
    d2l_base_regs_config_regs_3_we = 1'b0;
    d2l_base_regs_config_regs_3_re = 1'b0;
    d2l_base_regs_config_regs_4_w = pio_dec_write_data_d1  [31:0] ;
    d2l_base_regs_config_regs_4_we = 1'b0;
    d2l_base_regs_config_regs_4_re = 1'b0;
    d2l_base_regs_config_regs_5_w = pio_dec_write_data_d1  [31:0] ;
    d2l_base_regs_config_regs_5_we = 1'b0;
    d2l_base_regs_config_regs_5_re = 1'b0;
    d2l_base_regs_config_regs_6_w = pio_dec_write_data_d1  [31:0] ;
    d2l_base_regs_config_regs_6_we = 1'b0;
    d2l_base_regs_config_regs_6_re = 1'b0;
    d2l_base_regs_config_regs_7_w = pio_dec_write_data_d1  [31:0] ;
    d2l_base_regs_config_regs_7_we = 1'b0;
    d2l_base_regs_config_regs_7_re = 1'b0;
    d2h_primary_w_next = pio_dec_write_data_d1 [31:0] ;
    d2h_primary_we_next = 1'b0;
    d2h_primary_re_next = 1'b0;
    d2h_primary_addr_next = pio_dec_address_d1  [4:2] ;
    
    casez(pio_dec_address_d1)
    //  Register: base_regs.config_regs_0     Address: 0x0     External: false
    4'b0000:
      begin
        d2l_base_regs_config_regs_0_we = pio_write_active & ~dec_pio_ack;
        d2l_base_regs_config_regs_0_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_base_regs_config_regs_0_r;
      end
    //  Register: base_regs.config_regs_1     Address: 0x4     External: false
    4'b0001:
      begin
        d2l_base_regs_config_regs_1_we = pio_write_active & ~dec_pio_ack;
        d2l_base_regs_config_regs_1_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_base_regs_config_regs_1_r;
      end
    //  Register: base_regs.config_regs_2     Address: 0x8     External: false
    4'b0010:
      begin
        d2l_base_regs_config_regs_2_we = pio_write_active & ~dec_pio_ack;
        d2l_base_regs_config_regs_2_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_base_regs_config_regs_2_r;
      end
    //  Register: base_regs.config_regs_3     Address: 0xc     External: false
    4'b0011:
      begin
        d2l_base_regs_config_regs_3_we = pio_write_active & ~dec_pio_ack;
        d2l_base_regs_config_regs_3_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_base_regs_config_regs_3_r;
      end
    //  Register: base_regs.config_regs_4     Address: 0x10     External: false
    4'b0100:
      begin
        d2l_base_regs_config_regs_4_we = pio_write_active & ~dec_pio_ack;
        d2l_base_regs_config_regs_4_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_base_regs_config_regs_4_r;
      end
    //  Register: base_regs.config_regs_5     Address: 0x14     External: false
    4'b0101:
      begin
        d2l_base_regs_config_regs_5_we = pio_write_active & ~dec_pio_ack;
        d2l_base_regs_config_regs_5_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_base_regs_config_regs_5_r;
      end
    //  Register: base_regs.config_regs_6     Address: 0x18     External: false
    4'b0110:
      begin
        d2l_base_regs_config_regs_6_we = pio_write_active & ~dec_pio_ack;
        d2l_base_regs_config_regs_6_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_base_regs_config_regs_6_r;
      end
    //  Register: base_regs.config_regs_7     Address: 0x1c     External: false
    4'b0111:
      begin
        d2l_base_regs_config_regs_7_we = pio_write_active & ~dec_pio_ack;
        d2l_base_regs_config_regs_7_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_base_regs_config_regs_7_r;
      end
    //  Register: primary     Address: 0x20     External: true
    4'b1???:
      begin
        d2h_primary_we_next = pio_write_active & ~(pio_external_ack | pio_external_nack);
        pio_external_ack_next = h2d_primary_ack_ex;
        external_transaction_active = pio_read_active | pio_write_active;
        d2h_primary_re_next = pio_read_active & ~(pio_external_ack | pio_external_nack);
        pio_external_nack_next = h2d_primary_nack_ex;
        dec_pio_read_data_next  [31:0]  = h2d_primary_r_ex;
      end
    endcase
  end
  
endmodule

//
//---------- module base_map_pio
//
module base_map_pio
(
  clk,
  reset,
  r2d_primary_res_valid,
  r2d_primary_res_data,
  p1_leaf_dec_wr_data,
  p1_leaf_dec_addr,
  p1_leaf_dec_valid,
  p1_leaf_dec_wr_dvld,
  p1_leaf_dec_cycle,
  p1_leaf_dec_wr_width,
  p2_e1_cntl_start_r,
  p2_e1_cntl_force_stop_r,
  p2_e1_cfg_mode_r,
  p2_e1_cfg_stop_on_read_r,
  p2_e1_cfg_stop_on_count_r,
  p2_e1_cfg_trans_delay_r,
  p2_e1_cfg_read_capture_mode_r,
  p2_e1_write_data_val_r,
  p2_e1_write_mask_val_r,
  p2_e1_address_start_val_r,
  p2_e1_address_step_val_r,
  p2_e1_max_trans_count_val_r,
  p2_e1_read_match_data_val_r,
  p2_e1_read_mask_val_r,

  l2h_base_regs_config_regs_0_lsb_field_r,
  l2h_base_regs_config_regs_0_msb_field_r,
  l2h_base_regs_config_regs_1_lsb_field_r,
  l2h_base_regs_config_regs_1_msb_field_r,
  l2h_base_regs_config_regs_2_lsb_field_r,
  l2h_base_regs_config_regs_2_msb_field_r,
  l2h_base_regs_config_regs_3_lsb_field_r,
  l2h_base_regs_config_regs_3_msb_field_r,
  l2h_base_regs_config_regs_4_lsb_field_r,
  l2h_base_regs_config_regs_4_msb_field_r,
  l2h_base_regs_config_regs_5_lsb_field_r,
  l2h_base_regs_config_regs_5_msb_field_r,
  l2h_base_regs_config_regs_6_lsb_field_r,
  l2h_base_regs_config_regs_6_msb_field_r,
  l2h_base_regs_config_regs_7_lsb_field_r,
  l2h_base_regs_config_regs_7_msb_field_r,
  d2r_primary_cmd_valid,
  d2r_primary_cmd_data,
  p1_dec_leaf_rd_data,
  p1_dec_leaf_ack,
  p1_dec_leaf_nack,
  p1_dec_leaf_accept,
  p1_dec_leaf_reject,
  p1_dec_leaf_retry_atomic,
  p1_dec_leaf_data_width,
  p2_e1_status_state_w,
  p2_e1_status_nack_error_intr,
  p2_e1_status_bad_address_error_intr,
  p2_e1_last_read_data_val_w );

  //------- inputs
  input    clk;
  input    reset;
  input    r2d_primary_res_valid;
  input     [15:0] r2d_primary_res_data;
  input     [31:0] p1_leaf_dec_wr_data;
  input     [39:0] p1_leaf_dec_addr;
  input    p1_leaf_dec_valid;
  input    p1_leaf_dec_wr_dvld;
  input     [1:0] p1_leaf_dec_cycle;
  input     [2:0] p1_leaf_dec_wr_width;
  input    p2_e1_cntl_start_r;
  input    p2_e1_cntl_force_stop_r;
  input     [1:0] p2_e1_cfg_mode_r;
  input     [1:0] p2_e1_cfg_stop_on_read_r;
  input    p2_e1_cfg_stop_on_count_r;
  input     [9:0] p2_e1_cfg_trans_delay_r;
  input     [1:0] p2_e1_cfg_read_capture_mode_r;
  input     [31:0] p2_e1_write_data_val_r;
  input     [31:0] p2_e1_write_mask_val_r;
  input     [5:2] p2_e1_address_start_val_r;
  input     [5:2] p2_e1_address_step_val_r;
  input     [17:2] p2_e1_max_trans_count_val_r;
  input     [31:0] p2_e1_read_match_data_val_r;
  input     [31:0] p2_e1_read_mask_val_r;

  //------- outputs
  output     [15:0] l2h_base_regs_config_regs_0_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_0_msb_field_r;
  output     [15:0] l2h_base_regs_config_regs_1_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_1_msb_field_r;
  output     [15:0] l2h_base_regs_config_regs_2_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_2_msb_field_r;
  output     [15:0] l2h_base_regs_config_regs_3_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_3_msb_field_r;
  output     [15:0] l2h_base_regs_config_regs_4_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_4_msb_field_r;
  output     [15:0] l2h_base_regs_config_regs_5_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_5_msb_field_r;
  output     [15:0] l2h_base_regs_config_regs_6_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_6_msb_field_r;
  output     [15:0] l2h_base_regs_config_regs_7_lsb_field_r;
  output     [15:0] l2h_base_regs_config_regs_7_msb_field_r;
  output    d2r_primary_cmd_valid;
  output     [15:0] d2r_primary_cmd_data;
  output     [31:0] p1_dec_leaf_rd_data;
  output    p1_dec_leaf_ack;
  output    p1_dec_leaf_nack;
  output    p1_dec_leaf_accept;
  output    p1_dec_leaf_reject;
  output    p1_dec_leaf_retry_atomic;
  output     [2:0] p1_dec_leaf_data_width;
  output     [2:0] p2_e1_status_state_w;
  output    p2_e1_status_nack_error_intr;
  output    p2_e1_status_bad_address_error_intr;
  output     [31:0] p2_e1_last_read_data_val_w;


  //------- wire defines
  wire   [31:0] d2l_base_regs_config_regs_0_w;
  wire  d2l_base_regs_config_regs_0_we;
  wire  d2l_base_regs_config_regs_0_re;
  wire   [31:0] d2l_base_regs_config_regs_1_w;
  wire  d2l_base_regs_config_regs_1_we;
  wire  d2l_base_regs_config_regs_1_re;
  wire   [31:0] d2l_base_regs_config_regs_2_w;
  wire  d2l_base_regs_config_regs_2_we;
  wire  d2l_base_regs_config_regs_2_re;
  wire   [31:0] d2l_base_regs_config_regs_3_w;
  wire  d2l_base_regs_config_regs_3_we;
  wire  d2l_base_regs_config_regs_3_re;
  wire   [31:0] d2l_base_regs_config_regs_4_w;
  wire  d2l_base_regs_config_regs_4_we;
  wire  d2l_base_regs_config_regs_4_re;
  wire   [31:0] d2l_base_regs_config_regs_5_w;
  wire  d2l_base_regs_config_regs_5_we;
  wire  d2l_base_regs_config_regs_5_re;
  wire   [31:0] d2l_base_regs_config_regs_6_w;
  wire  d2l_base_regs_config_regs_6_we;
  wire  d2l_base_regs_config_regs_6_re;
  wire   [31:0] d2l_base_regs_config_regs_7_w;
  wire  d2l_base_regs_config_regs_7_we;
  wire  d2l_base_regs_config_regs_7_re;
  wire   [31:0] l2d_base_regs_config_regs_0_r;
  wire   [31:0] l2d_base_regs_config_regs_1_r;
  wire   [31:0] l2d_base_regs_config_regs_2_r;
  wire   [31:0] l2d_base_regs_config_regs_3_r;
  wire   [31:0] l2d_base_regs_config_regs_4_r;
  wire   [31:0] l2d_base_regs_config_regs_5_r;
  wire   [31:0] l2d_base_regs_config_regs_6_r;
  wire   [31:0] l2d_base_regs_config_regs_7_r;
  
  
  base_map_jrdl_decode pio_decode (
    .clk(clk),
    .reset(reset),
    .p1_leaf_dec_wr_data(p1_leaf_dec_wr_data),
    .p1_leaf_dec_addr(p1_leaf_dec_addr),
    .p1_leaf_dec_valid(p1_leaf_dec_valid),
    .p1_leaf_dec_wr_dvld(p1_leaf_dec_wr_dvld),
    .p1_leaf_dec_cycle(p1_leaf_dec_cycle),
    .p1_leaf_dec_wr_width(p1_leaf_dec_wr_width),
    .p2_e1_cntl_start_r(p2_e1_cntl_start_r),
    .p2_e1_cntl_force_stop_r(p2_e1_cntl_force_stop_r),
    .p2_e1_cfg_mode_r(p2_e1_cfg_mode_r),
    .p2_e1_cfg_stop_on_read_r(p2_e1_cfg_stop_on_read_r),
    .p2_e1_cfg_stop_on_count_r(p2_e1_cfg_stop_on_count_r),
    .p2_e1_cfg_trans_delay_r(p2_e1_cfg_trans_delay_r),
    .p2_e1_cfg_read_capture_mode_r(p2_e1_cfg_read_capture_mode_r),
    .p2_e1_write_data_val_r(p2_e1_write_data_val_r),
    .p2_e1_write_mask_val_r(p2_e1_write_mask_val_r),
    .p2_e1_address_start_val_r(p2_e1_address_start_val_r),
    .p2_e1_address_step_val_r(p2_e1_address_step_val_r),
    .p2_e1_max_trans_count_val_r(p2_e1_max_trans_count_val_r),
    .p2_e1_read_match_data_val_r(p2_e1_read_match_data_val_r),
    .p2_e1_read_mask_val_r(p2_e1_read_mask_val_r),
    .l2d_base_regs_config_regs_0_r(l2d_base_regs_config_regs_0_r),
    .l2d_base_regs_config_regs_1_r(l2d_base_regs_config_regs_1_r),
    .l2d_base_regs_config_regs_2_r(l2d_base_regs_config_regs_2_r),
    .l2d_base_regs_config_regs_3_r(l2d_base_regs_config_regs_3_r),
    .l2d_base_regs_config_regs_4_r(l2d_base_regs_config_regs_4_r),
    .l2d_base_regs_config_regs_5_r(l2d_base_regs_config_regs_5_r),
    .l2d_base_regs_config_regs_6_r(l2d_base_regs_config_regs_6_r),
    .l2d_base_regs_config_regs_7_r(l2d_base_regs_config_regs_7_r),
    .r2d_primary_res_valid(r2d_primary_res_valid),
    .r2d_primary_res_data(r2d_primary_res_data),
    .p1_dec_leaf_rd_data(p1_dec_leaf_rd_data),
    .p1_dec_leaf_ack(p1_dec_leaf_ack),
    .p1_dec_leaf_nack(p1_dec_leaf_nack),
    .p1_dec_leaf_accept(p1_dec_leaf_accept),
    .p1_dec_leaf_reject(p1_dec_leaf_reject),
    .p1_dec_leaf_retry_atomic(p1_dec_leaf_retry_atomic),
    .p1_dec_leaf_data_width(p1_dec_leaf_data_width),
    .p2_e1_status_state_w(p2_e1_status_state_w),
    .p2_e1_status_nack_error_intr(p2_e1_status_nack_error_intr),
    .p2_e1_status_bad_address_error_intr(p2_e1_status_bad_address_error_intr),
    .p2_e1_last_read_data_val_w(p2_e1_last_read_data_val_w),
    .d2l_base_regs_config_regs_0_w(d2l_base_regs_config_regs_0_w),
    .d2l_base_regs_config_regs_0_we(d2l_base_regs_config_regs_0_we),
    .d2l_base_regs_config_regs_0_re(d2l_base_regs_config_regs_0_re),
    .d2l_base_regs_config_regs_1_w(d2l_base_regs_config_regs_1_w),
    .d2l_base_regs_config_regs_1_we(d2l_base_regs_config_regs_1_we),
    .d2l_base_regs_config_regs_1_re(d2l_base_regs_config_regs_1_re),
    .d2l_base_regs_config_regs_2_w(d2l_base_regs_config_regs_2_w),
    .d2l_base_regs_config_regs_2_we(d2l_base_regs_config_regs_2_we),
    .d2l_base_regs_config_regs_2_re(d2l_base_regs_config_regs_2_re),
    .d2l_base_regs_config_regs_3_w(d2l_base_regs_config_regs_3_w),
    .d2l_base_regs_config_regs_3_we(d2l_base_regs_config_regs_3_we),
    .d2l_base_regs_config_regs_3_re(d2l_base_regs_config_regs_3_re),
    .d2l_base_regs_config_regs_4_w(d2l_base_regs_config_regs_4_w),
    .d2l_base_regs_config_regs_4_we(d2l_base_regs_config_regs_4_we),
    .d2l_base_regs_config_regs_4_re(d2l_base_regs_config_regs_4_re),
    .d2l_base_regs_config_regs_5_w(d2l_base_regs_config_regs_5_w),
    .d2l_base_regs_config_regs_5_we(d2l_base_regs_config_regs_5_we),
    .d2l_base_regs_config_regs_5_re(d2l_base_regs_config_regs_5_re),
    .d2l_base_regs_config_regs_6_w(d2l_base_regs_config_regs_6_w),
    .d2l_base_regs_config_regs_6_we(d2l_base_regs_config_regs_6_we),
    .d2l_base_regs_config_regs_6_re(d2l_base_regs_config_regs_6_re),
    .d2l_base_regs_config_regs_7_w(d2l_base_regs_config_regs_7_w),
    .d2l_base_regs_config_regs_7_we(d2l_base_regs_config_regs_7_we),
    .d2l_base_regs_config_regs_7_re(d2l_base_regs_config_regs_7_re),
    .d2r_primary_cmd_valid(d2r_primary_cmd_valid),
    .d2r_primary_cmd_data(d2r_primary_cmd_data) );
    
  base_map_jrdl_logic pio_logic (
    .clk(clk),
    .reset(reset),
    .d2l_base_regs_config_regs_0_w(d2l_base_regs_config_regs_0_w),
    .d2l_base_regs_config_regs_0_we(d2l_base_regs_config_regs_0_we),
    .d2l_base_regs_config_regs_0_re(d2l_base_regs_config_regs_0_re),
    .d2l_base_regs_config_regs_1_w(d2l_base_regs_config_regs_1_w),
    .d2l_base_regs_config_regs_1_we(d2l_base_regs_config_regs_1_we),
    .d2l_base_regs_config_regs_1_re(d2l_base_regs_config_regs_1_re),
    .d2l_base_regs_config_regs_2_w(d2l_base_regs_config_regs_2_w),
    .d2l_base_regs_config_regs_2_we(d2l_base_regs_config_regs_2_we),
    .d2l_base_regs_config_regs_2_re(d2l_base_regs_config_regs_2_re),
    .d2l_base_regs_config_regs_3_w(d2l_base_regs_config_regs_3_w),
    .d2l_base_regs_config_regs_3_we(d2l_base_regs_config_regs_3_we),
    .d2l_base_regs_config_regs_3_re(d2l_base_regs_config_regs_3_re),
    .d2l_base_regs_config_regs_4_w(d2l_base_regs_config_regs_4_w),
    .d2l_base_regs_config_regs_4_we(d2l_base_regs_config_regs_4_we),
    .d2l_base_regs_config_regs_4_re(d2l_base_regs_config_regs_4_re),
    .d2l_base_regs_config_regs_5_w(d2l_base_regs_config_regs_5_w),
    .d2l_base_regs_config_regs_5_we(d2l_base_regs_config_regs_5_we),
    .d2l_base_regs_config_regs_5_re(d2l_base_regs_config_regs_5_re),
    .d2l_base_regs_config_regs_6_w(d2l_base_regs_config_regs_6_w),
    .d2l_base_regs_config_regs_6_we(d2l_base_regs_config_regs_6_we),
    .d2l_base_regs_config_regs_6_re(d2l_base_regs_config_regs_6_re),
    .d2l_base_regs_config_regs_7_w(d2l_base_regs_config_regs_7_w),
    .d2l_base_regs_config_regs_7_we(d2l_base_regs_config_regs_7_we),
    .d2l_base_regs_config_regs_7_re(d2l_base_regs_config_regs_7_re),
    .l2d_base_regs_config_regs_0_r(l2d_base_regs_config_regs_0_r),
    .l2d_base_regs_config_regs_1_r(l2d_base_regs_config_regs_1_r),
    .l2d_base_regs_config_regs_2_r(l2d_base_regs_config_regs_2_r),
    .l2d_base_regs_config_regs_3_r(l2d_base_regs_config_regs_3_r),
    .l2d_base_regs_config_regs_4_r(l2d_base_regs_config_regs_4_r),
    .l2d_base_regs_config_regs_5_r(l2d_base_regs_config_regs_5_r),
    .l2d_base_regs_config_regs_6_r(l2d_base_regs_config_regs_6_r),
    .l2d_base_regs_config_regs_7_r(l2d_base_regs_config_regs_7_r),
    .l2h_base_regs_config_regs_0_lsb_field_r(l2h_base_regs_config_regs_0_lsb_field_r),
    .l2h_base_regs_config_regs_0_msb_field_r(l2h_base_regs_config_regs_0_msb_field_r),
    .l2h_base_regs_config_regs_1_lsb_field_r(l2h_base_regs_config_regs_1_lsb_field_r),
    .l2h_base_regs_config_regs_1_msb_field_r(l2h_base_regs_config_regs_1_msb_field_r),
    .l2h_base_regs_config_regs_2_lsb_field_r(l2h_base_regs_config_regs_2_lsb_field_r),
    .l2h_base_regs_config_regs_2_msb_field_r(l2h_base_regs_config_regs_2_msb_field_r),
    .l2h_base_regs_config_regs_3_lsb_field_r(l2h_base_regs_config_regs_3_lsb_field_r),
    .l2h_base_regs_config_regs_3_msb_field_r(l2h_base_regs_config_regs_3_msb_field_r),
    .l2h_base_regs_config_regs_4_lsb_field_r(l2h_base_regs_config_regs_4_lsb_field_r),
    .l2h_base_regs_config_regs_4_msb_field_r(l2h_base_regs_config_regs_4_msb_field_r),
    .l2h_base_regs_config_regs_5_lsb_field_r(l2h_base_regs_config_regs_5_lsb_field_r),
    .l2h_base_regs_config_regs_5_msb_field_r(l2h_base_regs_config_regs_5_msb_field_r),
    .l2h_base_regs_config_regs_6_lsb_field_r(l2h_base_regs_config_regs_6_lsb_field_r),
    .l2h_base_regs_config_regs_6_msb_field_r(l2h_base_regs_config_regs_6_msb_field_r),
    .l2h_base_regs_config_regs_7_lsb_field_r(l2h_base_regs_config_regs_7_lsb_field_r),
    .l2h_base_regs_config_regs_7_msb_field_r(l2h_base_regs_config_regs_7_msb_field_r) );
    
endmodule

