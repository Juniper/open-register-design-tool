//   Ordt 190725.01 autogenerated file 
//   Input: ./rdl_intr_01/test.rdl
//   Parms: ./rdl_intr_01/test.parms
//   Date: Sun Nov 17 17:09:30 EST 2019
//

#include "ordt_pio_common.hpp"
#include "ordt_pio.hpp"

// ------------------ ordt_addr_elem methods ------------------

ordt_addr_elem::ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : m_startaddress(_m_startaddress),
    m_endaddress(_m_endaddress) {
}

bool  ordt_addr_elem::containsAddress(const uint64_t &addr) {
  return ((addr >= m_startaddress) && (addr <= m_endaddress));
}

bool  ordt_addr_elem::isBelowAddress(const uint64_t &addr) {
  return (addr > m_endaddress);
}

bool  ordt_addr_elem::isAboveAddress(const uint64_t &addr) {
  return (addr < m_startaddress);
}

bool  ordt_addr_elem::hasStartAddress(const uint64_t &addr) {
  return (addr == m_startaddress);
}

void  ordt_addr_elem::update_child_ptrs() {
}

// ------------------ ordt_regset methods ------------------

ordt_addr_elem*  ordt_regset::findAddrElem(const uint64_t &addr) {
  int lo = 0;
  int hi = m_children.size()-1;
  int mid = 0;
  while (lo <= hi) {
     mid = (lo + hi) / 2;
     if (m_children[mid]->containsAddress(addr)) {
        //outElem = m_children[mid];
        return m_children[mid];
     }
     else if (m_children[mid]->isAboveAddress(addr))
        hi = mid - 1;
     else
        lo = mid + 1;
  }
  return nullptr;
}

ordt_regset::ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

int  ordt_regset::write(const uint64_t &addr, const ordt_data &wdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->write(addr, wdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in regset\n";
  #endif
     return 8;
}

int  ordt_regset::read(const uint64_t &addr, ordt_data &rdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->read(addr, rdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in regset\n";
  #endif
     rdata.clear();
     return 8;
}

// ------------------ ordt_reg methods ------------------

ordt_reg::ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

ordt_reg::ordt_reg(const ordt_reg &_old)
  : ordt_addr_elem(_old),
    m_mutex() {
}

void  ordt_reg::write(const ordt_data &wdata) {
}

int  ordt_reg::write(const uint64_t &addr, const ordt_data &wdata) {
     return 0;
}

void  ordt_reg::read(ordt_data &rdata) {
}

int  ordt_reg::read(const uint64_t &addr, ordt_data &rdata) {
     return 0;
}

// ------------------ ordt_rg_bar_a_reg methods ------------------

ordt_rg_bar_a_reg::ordt_rg_bar_a_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    fld1(0, 10, 0x0, r_std, w_std),
    fld2(15, 1, 0, r_std, w_std) {
}

int  ordt_rg_bar_a_reg::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_bar_a_reg at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_bar_a_reg\n";
  #endif
     return 8;
}

void  ordt_rg_bar_a_reg::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  fld1.write(wdata);
  fld2.write(wdata);
}

int  ordt_rg_bar_a_reg::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_bar_a_reg at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_bar_a_reg\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_bar_a_reg::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  fld1.read(rdata);
  fld2.read(rdata);
}

// ------------------ ordt_rg_bar_intr_reg1 methods ------------------

ordt_rg_bar_intr_reg1::ordt_rg_bar_intr_reg1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    int1(0, 1, 0x0, r_std, w_1clr),
    int2(1, 1, 0x0, r_std, w_1clr) {
}

int  ordt_rg_bar_intr_reg1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_bar_intr_reg1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_bar_intr_reg1\n";
  #endif
     return 8;
}

void  ordt_rg_bar_intr_reg1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  int1.write(wdata);
  int2.write(wdata);
}

int  ordt_rg_bar_intr_reg1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_bar_intr_reg1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_bar_intr_reg1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_bar_intr_reg1::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  int1.read(rdata);
  int2.read(rdata);
}

// ------------------ ordt_rg_bar_log_reg1 methods ------------------

ordt_rg_bar_log_reg1::ordt_rg_bar_log_reg1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    err_log(0, 10, 0x0, r_std, w_std) {
}

int  ordt_rg_bar_log_reg1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_bar_log_reg1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_bar_log_reg1\n";
  #endif
     return 8;
}

void  ordt_rg_bar_log_reg1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  err_log.write(wdata);
}

int  ordt_rg_bar_log_reg1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_bar_log_reg1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_bar_log_reg1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_bar_log_reg1::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  err_log.read(rdata);
}

// ------------------ ordt_rg_bar_log_reg2 methods ------------------

ordt_rg_bar_log_reg2::ordt_rg_bar_log_reg2(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    err_log(0, 10, 0x0, r_std, w_std) {
}

int  ordt_rg_bar_log_reg2::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_bar_log_reg2 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_bar_log_reg2\n";
  #endif
     return 8;
}

void  ordt_rg_bar_log_reg2::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  err_log.write(wdata);
}

int  ordt_rg_bar_log_reg2::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_bar_log_reg2 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_bar_log_reg2\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_bar_log_reg2::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  err_log.read(rdata);
}

// ------------------ ordt_rg_bar_log_reg3 methods ------------------

ordt_rg_bar_log_reg3::ordt_rg_bar_log_reg3(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    err_log(0, 10, 0x0, r_std, w_std) {
}

int  ordt_rg_bar_log_reg3::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_bar_log_reg3 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_bar_log_reg3\n";
  #endif
     return 8;
}

void  ordt_rg_bar_log_reg3::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  err_log.write(wdata);
}

int  ordt_rg_bar_log_reg3::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_bar_log_reg3 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_bar_log_reg3\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_bar_log_reg3::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  err_log.read(rdata);
}

// ------------------ ordt_rg_bar_sub_intr_reg2 methods ------------------

ordt_rg_bar_sub_intr_reg2::ordt_rg_bar_sub_intr_reg2(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    int1(0, 1, 0x0, r_std, w_1clr),
    int2(1, 1, 0x0, r_std, w_1clr) {
}

int  ordt_rg_bar_sub_intr_reg2::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_bar_sub_intr_reg2 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_bar_sub_intr_reg2\n";
  #endif
     return 8;
}

void  ordt_rg_bar_sub_intr_reg2::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  int1.write(wdata);
  int2.write(wdata);
}

int  ordt_rg_bar_sub_intr_reg2::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_bar_sub_intr_reg2 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_bar_sub_intr_reg2\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_bar_sub_intr_reg2::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  int1.read(rdata);
  int2.read(rdata);
}

// ------------------ ordt_rg_bar_sub_intr_reg3 methods ------------------

ordt_rg_bar_sub_intr_reg3::ordt_rg_bar_sub_intr_reg3(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    int1(0, 1, 0x0, r_std, w_1clr),
    int2(1, 1, 0x0, r_std, w_1clr) {
}

int  ordt_rg_bar_sub_intr_reg3::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_bar_sub_intr_reg3 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_bar_sub_intr_reg3\n";
  #endif
     return 8;
}

void  ordt_rg_bar_sub_intr_reg3::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  int1.write(wdata);
  int2.write(wdata);
}

int  ordt_rg_bar_sub_intr_reg3::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_bar_sub_intr_reg3 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_bar_sub_intr_reg3\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_bar_sub_intr_reg3::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  int1.read(rdata);
  int2.read(rdata);
}

// ------------------ ordt_rset_bar_sub methods ------------------

ordt_rset_bar_sub::ordt_rset_bar_sub(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    intr_reg2(_m_startaddress + 0x0, _m_startaddress + 0x3),
    intr_reg3(_m_startaddress + 0x100, _m_startaddress + 0x103) {
  m_children.push_back(&intr_reg2);
  m_children.push_back(&intr_reg3);
}

void  ordt_rset_bar_sub::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&intr_reg2);
  m_children.push_back(&intr_reg3);
}

// ------------------ ordt_rg_bar_rst_reg methods ------------------

ordt_rg_bar_rst_reg::ordt_rg_bar_rst_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    fld2(0, 4, 0x2, r_std, w_std),
    fld1(4, 4, 0x1, r_std, w_std),
    fld3(8, 3, 0x3, r_std, w_std),
    fld4(11, 3, 0x4, r_std, w_std) {
}

int  ordt_rg_bar_rst_reg::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_bar_rst_reg at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_bar_rst_reg\n";
  #endif
     return 8;
}

void  ordt_rg_bar_rst_reg::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  fld2.write(wdata);
  fld1.write(wdata);
  fld3.write(wdata);
  fld4.write(wdata);
}

int  ordt_rg_bar_rst_reg::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_bar_rst_reg at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_bar_rst_reg\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_bar_rst_reg::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  fld2.read(rdata);
  fld1.read(rdata);
  fld3.read(rdata);
  fld4.read(rdata);
}

// ------------------ ordt_rg_bar_negintr methods ------------------

ordt_rg_bar_negintr::ordt_rg_bar_negintr(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    interrupt(0, 1, 0x0, r_std, w_1clr) {
}

int  ordt_rg_bar_negintr::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_bar_negintr at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_bar_negintr\n";
  #endif
     return 8;
}

void  ordt_rg_bar_negintr::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  interrupt.write(wdata);
}

int  ordt_rg_bar_negintr::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_bar_negintr at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_bar_negintr\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_bar_negintr::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  interrupt.read(rdata);
}

// ------------------ ordt_rg_bar_bothintr methods ------------------

ordt_rg_bar_bothintr::ordt_rg_bar_bothintr(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    interrupt(0, 1, 0x0, r_std, w_1clr) {
}

int  ordt_rg_bar_bothintr::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_bar_bothintr at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_bar_bothintr\n";
  #endif
     return 8;
}

void  ordt_rg_bar_bothintr::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  interrupt.write(wdata);
}

int  ordt_rg_bar_bothintr::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_bar_bothintr at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_bar_bothintr\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_bar_bothintr::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  interrupt.read(rdata);
}

// ------------------ ordt_rset_bar methods ------------------

ordt_rset_bar::ordt_rset_bar(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    a_reg(_m_startaddress + 0x0, _m_startaddress + 0x3, 2, 0x4),
    intr_reg1(_m_startaddress + 0x100, _m_startaddress + 0x103),
    log_reg1(_m_startaddress + 0x104, _m_startaddress + 0x107),
    log_reg2(_m_startaddress + 0x108, _m_startaddress + 0x10b),
    log_reg3(_m_startaddress + 0x10c, _m_startaddress + 0x10f),
    sub(_m_startaddress + 0x200, _m_startaddress + 0x3ff),
    rst_reg(_m_startaddress + 0x304, _m_startaddress + 0x307),
    negintr(_m_startaddress + 0x500, _m_startaddress + 0x503),
    bothintr(_m_startaddress + 0x504, _m_startaddress + 0x507) {
  m_children.push_back(&a_reg);
  m_children.push_back(&intr_reg1);
  m_children.push_back(&log_reg1);
  m_children.push_back(&log_reg2);
  m_children.push_back(&log_reg3);
  m_children.push_back(&sub);
  m_children.push_back(&rst_reg);
  m_children.push_back(&negintr);
  m_children.push_back(&bothintr);
}

void  ordt_rset_bar::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&a_reg);
  m_children.push_back(&intr_reg1);
  m_children.push_back(&log_reg1);
  m_children.push_back(&log_reg2);
  m_children.push_back(&log_reg3);
  m_children.push_back(&sub);
  m_children.push_back(&rst_reg);
  m_children.push_back(&negintr);
  m_children.push_back(&bothintr);
}

// ------------------ ordt_rg_intr_cascade_merge methods ------------------

ordt_rg_intr_cascade_merge::ordt_rg_intr_cascade_merge(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    fld1(0, 1, 0x0, r_std, w_none),
    fld2(1, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_intr_cascade_merge::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_intr_cascade_merge at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_intr_cascade_merge\n";
  #endif
     return 8;
}

void  ordt_rg_intr_cascade_merge::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  fld1.write(wdata);
  fld2.write(wdata);
}

int  ordt_rg_intr_cascade_merge::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_intr_cascade_merge at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_intr_cascade_merge\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_intr_cascade_merge::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  fld1.read(rdata);
  fld2.read(rdata);
}

// ------------------ ordt_rset_intr_cascade methods ------------------

ordt_rset_intr_cascade::ordt_rset_intr_cascade(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    merge(_m_startaddress + 0x0, _m_startaddress + 0x3) {
  m_children.push_back(&merge);
}

void  ordt_rset_intr_cascade::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&merge);
}

// ------------------ ordt_root methods ------------------

ordt_root::ordt_root()
  : ordt_root(0x0, 0x1003) {
}

ordt_root::ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    bar(_m_startaddress + 0x0, _m_startaddress + 0x7ff),
    intr_cascade(_m_startaddress + 0x1000, _m_startaddress + 0x1003) {
  m_children.push_back(&bar);
  m_children.push_back(&intr_cascade);
}

void  ordt_root::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&bar);
  m_children.push_back(&intr_cascade);
}

