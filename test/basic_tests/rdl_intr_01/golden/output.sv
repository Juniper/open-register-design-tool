//   Ordt 190725.01 autogenerated file 
//   Input: ./rdl_intr_01/test.rdl
//   Parms: ./rdl_intr_01/test.parms
//   Date: Sun Nov 17 17:04:17 EST 2019
//

//
//---------- module foo_jrdl_logic
//
module foo_jrdl_logic
(
  clk,
  reset,
  d2l_bar_a_reg_0_w,
  d2l_bar_a_reg_0_we,
  d2l_bar_a_reg_0_re,
  d2l_bar_a_reg_1_w,
  d2l_bar_a_reg_1_we,
  d2l_bar_a_reg_1_re,
  d2l_bar_intr_reg1_w,
  d2l_bar_intr_reg1_we,
  d2l_bar_intr_reg1_re,
  d2l_bar_log_reg1_w,
  d2l_bar_log_reg1_we,
  d2l_bar_log_reg1_re,
  d2l_bar_log_reg2_w,
  d2l_bar_log_reg2_we,
  d2l_bar_log_reg2_re,
  d2l_bar_log_reg3_w,
  d2l_bar_log_reg3_we,
  d2l_bar_log_reg3_re,
  d2l_bar_sub_intr_reg2_w,
  d2l_bar_sub_intr_reg2_we,
  d2l_bar_sub_intr_reg2_re,
  d2l_bar_sub_intr_reg3_w,
  d2l_bar_sub_intr_reg3_we,
  d2l_bar_sub_intr_reg3_re,
  d2l_bar_rst_reg_w,
  d2l_bar_rst_reg_we,
  d2l_bar_rst_reg_re,
  d2l_bar_negintr_w,
  d2l_bar_negintr_we,
  d2l_bar_negintr_re,
  d2l_bar_bothintr_w,
  d2l_bar_bothintr_we,
  d2l_bar_bothintr_re,
  d2l_intr_cascade_merge_w,
  d2l_intr_cascade_merge_we,
  d2l_intr_cascade_merge_re,
  h2l_bar_a_reg_0_fld1_w,
  h2l_bar_a_reg_0_fld1_we,
  h2l_bar_a_reg_1_fld1_w,
  h2l_bar_a_reg_1_fld1_we,
  h2l_bar_intr_reg1_int1_intr,
  h2l_bar_intr_reg1_int2_intr,
  h2l_bar_log_reg1_err_log_w,
  h2l_bar_log_reg2_err_log_w,
  h2l_bar_log_reg3_err_log_w,
  h2l_bar_sub_intr_reg2_int1_intr,
  h2l_bar_sub_intr_reg2_int2_intr,
  h2l_bar_sub_intr_reg3_int1_intr,
  h2l_bar_sub_intr_reg3_int2_intr,
  h2l_bar_negintr_interrupt_intr,
  h2l_bar_bothintr_interrupt_intr,
  h2l_intr_cascade_merge_fld2_intr,

  l2d_bar_a_reg_0_r,
  l2d_bar_a_reg_1_r,
  l2d_bar_intr_reg1_r,
  l2d_bar_log_reg1_r,
  l2d_bar_log_reg2_r,
  l2d_bar_log_reg3_r,
  l2d_bar_sub_intr_reg2_r,
  l2d_bar_sub_intr_reg3_r,
  l2d_bar_rst_reg_r,
  l2d_bar_negintr_r,
  l2d_bar_bothintr_r,
  l2d_intr_cascade_merge_r,
  l2h_bar_a_reg_0_fld1_r,
  l2h_bar_a_reg_0_fld2_r,
  l2h_bar_a_reg_1_fld1_r,
  l2h_bar_a_reg_1_fld2_r,
  l2h_bar_intr_reg1_intr_o,
  l2h_bar_sub_intr_reg2_intr_o,
  l2h_bar_sub_intr_reg3_intr_o,
  l2h_bar_rst_reg_fld1_r,
  l2h_bar_rst_reg_fld2_r,
  l2h_bar_rst_reg_fld3_r,
  l2h_bar_rst_reg_fld4_r,
  l2h_bar_negintr_intr_o,
  l2h_bar_bothintr_intr_o,
  l2h_intr_cascade_merge_intr_o );

  //------- inputs
  input    clk;
  input    reset;
  input     [31:0] d2l_bar_a_reg_0_w;
  input    d2l_bar_a_reg_0_we;
  input    d2l_bar_a_reg_0_re;
  input     [31:0] d2l_bar_a_reg_1_w;
  input    d2l_bar_a_reg_1_we;
  input    d2l_bar_a_reg_1_re;
  input     [31:0] d2l_bar_intr_reg1_w;
  input    d2l_bar_intr_reg1_we;
  input    d2l_bar_intr_reg1_re;
  input     [31:0] d2l_bar_log_reg1_w;
  input    d2l_bar_log_reg1_we;
  input    d2l_bar_log_reg1_re;
  input     [31:0] d2l_bar_log_reg2_w;
  input    d2l_bar_log_reg2_we;
  input    d2l_bar_log_reg2_re;
  input     [31:0] d2l_bar_log_reg3_w;
  input    d2l_bar_log_reg3_we;
  input    d2l_bar_log_reg3_re;
  input     [31:0] d2l_bar_sub_intr_reg2_w;
  input    d2l_bar_sub_intr_reg2_we;
  input    d2l_bar_sub_intr_reg2_re;
  input     [31:0] d2l_bar_sub_intr_reg3_w;
  input    d2l_bar_sub_intr_reg3_we;
  input    d2l_bar_sub_intr_reg3_re;
  input     [31:0] d2l_bar_rst_reg_w;
  input    d2l_bar_rst_reg_we;
  input    d2l_bar_rst_reg_re;
  input     [31:0] d2l_bar_negintr_w;
  input    d2l_bar_negintr_we;
  input    d2l_bar_negintr_re;
  input     [31:0] d2l_bar_bothintr_w;
  input    d2l_bar_bothintr_we;
  input    d2l_bar_bothintr_re;
  input     [31:0] d2l_intr_cascade_merge_w;
  input    d2l_intr_cascade_merge_we;
  input    d2l_intr_cascade_merge_re;
  input     [9:0] h2l_bar_a_reg_0_fld1_w;
  input    h2l_bar_a_reg_0_fld1_we;
  input     [9:0] h2l_bar_a_reg_1_fld1_w;
  input    h2l_bar_a_reg_1_fld1_we;
  input    h2l_bar_intr_reg1_int1_intr;
  input    h2l_bar_intr_reg1_int2_intr;
  input     [9:0] h2l_bar_log_reg1_err_log_w;
  input     [9:0] h2l_bar_log_reg2_err_log_w;
  input     [9:0] h2l_bar_log_reg3_err_log_w;
  input    h2l_bar_sub_intr_reg2_int1_intr;
  input    h2l_bar_sub_intr_reg2_int2_intr;
  input    h2l_bar_sub_intr_reg3_int1_intr;
  input    h2l_bar_sub_intr_reg3_int2_intr;
  input    h2l_bar_negintr_interrupt_intr;
  input    h2l_bar_bothintr_interrupt_intr;
  input    h2l_intr_cascade_merge_fld2_intr;

  //------- outputs
  output     [31:0] l2d_bar_a_reg_0_r;
  output     [31:0] l2d_bar_a_reg_1_r;
  output     [31:0] l2d_bar_intr_reg1_r;
  output     [31:0] l2d_bar_log_reg1_r;
  output     [31:0] l2d_bar_log_reg2_r;
  output     [31:0] l2d_bar_log_reg3_r;
  output     [31:0] l2d_bar_sub_intr_reg2_r;
  output     [31:0] l2d_bar_sub_intr_reg3_r;
  output     [31:0] l2d_bar_rst_reg_r;
  output     [31:0] l2d_bar_negintr_r;
  output     [31:0] l2d_bar_bothintr_r;
  output     [31:0] l2d_intr_cascade_merge_r;
  output     [9:0] l2h_bar_a_reg_0_fld1_r;
  output    l2h_bar_a_reg_0_fld2_r;
  output     [9:0] l2h_bar_a_reg_1_fld1_r;
  output    l2h_bar_a_reg_1_fld2_r;
  output    l2h_bar_intr_reg1_intr_o;
  output    l2h_bar_sub_intr_reg2_intr_o;
  output    l2h_bar_sub_intr_reg3_intr_o;
  output     [3:0] l2h_bar_rst_reg_fld1_r;
  output     [3:0] l2h_bar_rst_reg_fld2_r;
  output     [2:0] l2h_bar_rst_reg_fld3_r;
  output     [2:0] l2h_bar_rst_reg_fld4_r;
  output    l2h_bar_negintr_intr_o;
  output    l2h_bar_bothintr_intr_o;
  output    l2h_intr_cascade_merge_intr_o;


  //------- wire defines
  logic  h2l_bar_intr_reg1_int1_intr;
  logic  h2l_bar_intr_reg1_int2_intr;
  logic  h2l_bar_sub_intr_reg2_int1_intr;
  logic  h2l_bar_sub_intr_reg2_int2_intr;
  logic  h2l_bar_sub_intr_reg3_int1_intr;
  logic  h2l_bar_sub_intr_reg3_int2_intr;
  logic  h2l_bar_negintr_interrupt_intr;
  logic  h2l_bar_bothintr_interrupt_intr;
  logic  h2l_intr_cascade_merge_fld2_intr;
  
  //------- reg defines
  logic   [9:0] rg_bar_a_reg_0_fld1;
  logic   [9:0] reg_bar_a_reg_0_fld1_next;
  logic   [9:0] l2h_bar_a_reg_0_fld1_r;
  logic  rg_bar_a_reg_0_fld2;
  logic  reg_bar_a_reg_0_fld2_next;
  logic  l2h_bar_a_reg_0_fld2_r;
  logic   [31:0] l2d_bar_a_reg_0_r;
  logic   [9:0] rg_bar_a_reg_1_fld1;
  logic   [9:0] reg_bar_a_reg_1_fld1_next;
  logic   [9:0] l2h_bar_a_reg_1_fld1_r;
  logic  rg_bar_a_reg_1_fld2;
  logic  reg_bar_a_reg_1_fld2_next;
  logic  l2h_bar_a_reg_1_fld2_r;
  logic   [31:0] l2d_bar_a_reg_1_r;
  logic  rg_bar_intr_reg1_int1;
  logic  reg_bar_intr_reg1_int1_next;
  logic  l2h_bar_intr_reg1_intr_o;
  logic  rg_bar_intr_reg1_int2;
  logic  reg_bar_intr_reg1_int2_next;
  logic   [31:0] l2d_bar_intr_reg1_r;
  logic   [9:0] rg_bar_log_reg1_err_log;
  logic   [9:0] reg_bar_log_reg1_err_log_next;
  logic   [31:0] l2d_bar_log_reg1_r;
  logic   [9:0] rg_bar_log_reg2_err_log;
  logic   [9:0] reg_bar_log_reg2_err_log_next;
  logic   [31:0] l2d_bar_log_reg2_r;
  logic   [9:0] rg_bar_log_reg3_err_log;
  logic   [9:0] reg_bar_log_reg3_err_log_next;
  logic   [31:0] l2d_bar_log_reg3_r;
  logic  rg_bar_sub_intr_reg2_int1;
  logic  reg_bar_sub_intr_reg2_int1_next;
  logic  l2h_bar_sub_intr_reg2_intr_o;
  logic  rg_bar_sub_intr_reg2_int2;
  logic  reg_bar_sub_intr_reg2_int2_next;
  logic   [31:0] l2d_bar_sub_intr_reg2_r;
  logic  rg_bar_sub_intr_reg3_int1;
  logic  reg_bar_sub_intr_reg3_int1_next;
  logic  l2h_bar_sub_intr_reg3_intr_o;
  logic  rg_bar_sub_intr_reg3_int2;
  logic  reg_bar_sub_intr_reg3_int2_next;
  logic   [31:0] l2d_bar_sub_intr_reg3_r;
  logic   [3:0] rg_bar_rst_reg_fld1;
  logic   [3:0] reg_bar_rst_reg_fld1_next;
  logic   [3:0] l2h_bar_rst_reg_fld1_r;
  logic   [3:0] rg_bar_rst_reg_fld2;
  logic   [3:0] reg_bar_rst_reg_fld2_next;
  logic   [3:0] l2h_bar_rst_reg_fld2_r;
  logic   [2:0] rg_bar_rst_reg_fld3;
  logic   [2:0] reg_bar_rst_reg_fld3_next;
  logic   [2:0] l2h_bar_rst_reg_fld3_r;
  logic   [2:0] rg_bar_rst_reg_fld4;
  logic   [2:0] reg_bar_rst_reg_fld4_next;
  logic   [2:0] l2h_bar_rst_reg_fld4_r;
  logic   [31:0] l2d_bar_rst_reg_r;
  logic  rg_bar_negintr_interrupt;
  logic  reg_bar_negintr_interrupt_next;
  logic  l2h_bar_negintr_intr_o;
  logic  intr_bar_negintr_interrupt_previntr;
  logic   [31:0] l2d_bar_negintr_r;
  logic  rg_bar_bothintr_interrupt;
  logic  reg_bar_bothintr_interrupt_next;
  logic  l2h_bar_bothintr_intr_o;
  logic  intr_bar_bothintr_interrupt_previntr;
  logic   [31:0] l2d_bar_bothintr_r;
  logic  rg_intr_cascade_merge_fld1;
  logic  reg_intr_cascade_merge_fld1_next;
  logic  l2h_intr_cascade_merge_intr_o;
  logic  rg_intr_cascade_merge_fld2;
  logic  reg_intr_cascade_merge_fld2_next;
  logic   [31:0] l2d_intr_cascade_merge_r;
  
  
  //------- combinatorial assigns for bar_rst_reg
  always_comb begin
    reg_bar_rst_reg_fld1_next = rg_bar_rst_reg_fld1;
    l2h_bar_rst_reg_fld1_r = rg_bar_rst_reg_fld1;
    reg_bar_rst_reg_fld2_next = rg_bar_rst_reg_fld2;
    l2h_bar_rst_reg_fld2_r = rg_bar_rst_reg_fld2;
    reg_bar_rst_reg_fld3_next = rg_bar_rst_reg_fld3;
    l2h_bar_rst_reg_fld3_r = rg_bar_rst_reg_fld3;
    reg_bar_rst_reg_fld4_next = rg_bar_rst_reg_fld4;
    l2h_bar_rst_reg_fld4_r = rg_bar_rst_reg_fld4;
    if (d2l_bar_rst_reg_we) reg_bar_rst_reg_fld1_next = d2l_bar_rst_reg_w [7:4] ;
    if (d2l_bar_rst_reg_we) reg_bar_rst_reg_fld2_next = d2l_bar_rst_reg_w [3:0] ;
    if (d2l_bar_rst_reg_we) reg_bar_rst_reg_fld3_next = d2l_bar_rst_reg_w [10:8] ;
    if (d2l_bar_rst_reg_we) reg_bar_rst_reg_fld4_next = d2l_bar_rst_reg_w [13:11] ;
  end
  
  //------- reg assigns for bar_rst_reg
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_bar_rst_reg_fld1 <= #1 4'd1;
      rg_bar_rst_reg_fld2 <= #1 4'd2;
      rg_bar_rst_reg_fld3 <= #1 3'd3;
      rg_bar_rst_reg_fld4 <= #1 3'd4;
    end
    else begin
      rg_bar_rst_reg_fld1 <= #1  reg_bar_rst_reg_fld1_next;
      rg_bar_rst_reg_fld2 <= #1  reg_bar_rst_reg_fld2_next;
      rg_bar_rst_reg_fld3 <= #1  reg_bar_rst_reg_fld3_next;
      rg_bar_rst_reg_fld4 <= #1  reg_bar_rst_reg_fld4_next;
    end
  end
  
  //------- combinatorial assigns for bar_a_reg_0
  always_comb begin
    reg_bar_a_reg_0_fld1_next = rg_bar_a_reg_0_fld1;
    l2h_bar_a_reg_0_fld1_r = rg_bar_a_reg_0_fld1;
    reg_bar_a_reg_0_fld2_next = rg_bar_a_reg_0_fld2;
    l2h_bar_a_reg_0_fld2_r = rg_bar_a_reg_0_fld2;
    if (h2l_bar_a_reg_0_fld1_we) reg_bar_a_reg_0_fld1_next = h2l_bar_a_reg_0_fld1_w;
    if (d2l_bar_a_reg_0_we) reg_bar_a_reg_0_fld1_next = d2l_bar_a_reg_0_w [9:0] ;
    if (d2l_bar_a_reg_0_we) reg_bar_a_reg_0_fld2_next = d2l_bar_a_reg_0_w [15] ;
  end
  
  //------- reg assigns for bar_a_reg_0
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_bar_a_reg_0_fld1 <= #1 10'd0;
    end
    else begin
      rg_bar_a_reg_0_fld1 <= #1  reg_bar_a_reg_0_fld1_next;
    end
    rg_bar_a_reg_0_fld2 <= #1  reg_bar_a_reg_0_fld2_next;
  end
  
  //------- combinatorial assigns for bar_intr_reg1
  always_comb begin
    reg_bar_intr_reg1_int1_next = rg_bar_intr_reg1_int1;
    reg_bar_intr_reg1_int2_next = rg_bar_intr_reg1_int2;
    l2h_bar_intr_reg1_intr_o = 1'b0;
    reg_bar_intr_reg1_int1_next = (h2l_bar_intr_reg1_int1_intr | rg_bar_intr_reg1_int1);
    l2h_bar_intr_reg1_intr_o = l2h_bar_intr_reg1_intr_o | (rg_bar_intr_reg1_int1);
    reg_bar_intr_reg1_int2_next = (h2l_bar_intr_reg1_int2_intr | rg_bar_intr_reg1_int2);
    l2h_bar_intr_reg1_intr_o = l2h_bar_intr_reg1_intr_o | (rg_bar_intr_reg1_int2);
    if (d2l_bar_intr_reg1_we) reg_bar_intr_reg1_int1_next = (reg_bar_intr_reg1_int1_next & ~d2l_bar_intr_reg1_w [0] );
    if (d2l_bar_intr_reg1_we) reg_bar_intr_reg1_int2_next = (reg_bar_intr_reg1_int2_next & ~d2l_bar_intr_reg1_w [1] );
  end
  
  //------- reg assigns for bar_intr_reg1
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_bar_intr_reg1_int1 <= #1 1'd0;
      rg_bar_intr_reg1_int2 <= #1 1'd0;
    end
    else begin
      rg_bar_intr_reg1_int1 <= #1  reg_bar_intr_reg1_int1_next;
      rg_bar_intr_reg1_int2 <= #1  reg_bar_intr_reg1_int2_next;
    end
  end
  
  //------- combinatorial assigns for intr_cascade_merge
  always_comb begin
    reg_intr_cascade_merge_fld1_next = rg_intr_cascade_merge_fld1;
    reg_intr_cascade_merge_fld2_next = rg_intr_cascade_merge_fld2;
    l2h_intr_cascade_merge_intr_o = 1'b0;
    l2h_intr_cascade_merge_intr_o = l2h_intr_cascade_merge_intr_o | (rg_intr_cascade_merge_fld1);
    reg_intr_cascade_merge_fld1_next = l2h_bar_intr_reg1_intr_o;
    reg_intr_cascade_merge_fld2_next = (h2l_intr_cascade_merge_fld2_intr | rg_intr_cascade_merge_fld2);
    l2h_intr_cascade_merge_intr_o = l2h_intr_cascade_merge_intr_o | (rg_intr_cascade_merge_fld2);
  end
  
  //------- reg assigns for intr_cascade_merge
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_intr_cascade_merge_fld1 <= #1 1'd0;
      rg_intr_cascade_merge_fld2 <= #1 1'd0;
    end
    else begin
      rg_intr_cascade_merge_fld1 <= #1  reg_intr_cascade_merge_fld1_next;
      rg_intr_cascade_merge_fld2 <= #1  reg_intr_cascade_merge_fld2_next;
    end
  end
  
  //------- combinatorial assigns for bar_a_reg_1
  always_comb begin
    reg_bar_a_reg_1_fld1_next = rg_bar_a_reg_1_fld1;
    l2h_bar_a_reg_1_fld1_r = rg_bar_a_reg_1_fld1;
    reg_bar_a_reg_1_fld2_next = rg_bar_a_reg_1_fld2;
    l2h_bar_a_reg_1_fld2_r = rg_bar_a_reg_1_fld2;
    if (h2l_bar_a_reg_1_fld1_we) reg_bar_a_reg_1_fld1_next = h2l_bar_a_reg_1_fld1_w;
    if (d2l_bar_a_reg_1_we) reg_bar_a_reg_1_fld1_next = d2l_bar_a_reg_1_w [9:0] ;
    if (d2l_bar_a_reg_1_we) reg_bar_a_reg_1_fld2_next = d2l_bar_a_reg_1_w [15] ;
  end
  
  //------- reg assigns for bar_a_reg_1
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_bar_a_reg_1_fld1 <= #1 10'd0;
    end
    else begin
      rg_bar_a_reg_1_fld1 <= #1  reg_bar_a_reg_1_fld1_next;
    end
    rg_bar_a_reg_1_fld2 <= #1  reg_bar_a_reg_1_fld2_next;
  end
  
  //------- combinatorial assigns for bar_sub_intr_reg3 (pio read data)
  always_comb begin
    l2d_bar_sub_intr_reg3_r = 32'b0;
    l2d_bar_sub_intr_reg3_r [0]  = rg_bar_sub_intr_reg3_int1;
    l2d_bar_sub_intr_reg3_r [1]  = rg_bar_sub_intr_reg3_int2;
  end
  
  //------- combinatorial assigns for bar_intr_reg1 (pio read data)
  always_comb begin
    l2d_bar_intr_reg1_r = 32'b0;
    l2d_bar_intr_reg1_r [0]  = rg_bar_intr_reg1_int1;
    l2d_bar_intr_reg1_r [1]  = rg_bar_intr_reg1_int2;
  end
  
  //------- combinatorial assigns for bar_sub_intr_reg2
  always_comb begin
    reg_bar_sub_intr_reg2_int1_next = rg_bar_sub_intr_reg2_int1;
    reg_bar_sub_intr_reg2_int2_next = rg_bar_sub_intr_reg2_int2;
    l2h_bar_sub_intr_reg2_intr_o = 1'b0;
    reg_bar_sub_intr_reg2_int1_next = (h2l_bar_sub_intr_reg2_int1_intr | rg_bar_sub_intr_reg2_int1);
    l2h_bar_sub_intr_reg2_intr_o = l2h_bar_sub_intr_reg2_intr_o | (rg_bar_sub_intr_reg2_int1 & rg_bar_intr_reg1_int1);
    reg_bar_sub_intr_reg2_int2_next = (h2l_bar_sub_intr_reg2_int2_intr | rg_bar_sub_intr_reg2_int2) & rg_bar_intr_reg1_int2;
    l2h_bar_sub_intr_reg2_intr_o = l2h_bar_sub_intr_reg2_intr_o | (rg_bar_sub_intr_reg2_int2);
    if (d2l_bar_sub_intr_reg2_we) reg_bar_sub_intr_reg2_int1_next = (reg_bar_sub_intr_reg2_int1_next & ~d2l_bar_sub_intr_reg2_w [0] );
    if (d2l_bar_sub_intr_reg2_we) reg_bar_sub_intr_reg2_int2_next = (reg_bar_sub_intr_reg2_int2_next & ~d2l_bar_sub_intr_reg2_w [1] );
  end
  
  //------- reg assigns for bar_sub_intr_reg2
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_bar_sub_intr_reg2_int1 <= #1 1'd0;
      rg_bar_sub_intr_reg2_int2 <= #1 1'd0;
    end
    else begin
      rg_bar_sub_intr_reg2_int1 <= #1  reg_bar_sub_intr_reg2_int1_next;
      rg_bar_sub_intr_reg2_int2 <= #1  reg_bar_sub_intr_reg2_int2_next;
    end
  end
  
  //------- combinatorial assigns for bar_log_reg3 (pio read data)
  always_comb begin
    l2d_bar_log_reg3_r = 32'b0;
    l2d_bar_log_reg3_r [9:0]  = rg_bar_log_reg3_err_log;
  end
  
  //------- combinatorial assigns for bar_rst_reg (pio read data)
  always_comb begin
    l2d_bar_rst_reg_r = 32'b0;
    l2d_bar_rst_reg_r [7:4]  = rg_bar_rst_reg_fld1;
    l2d_bar_rst_reg_r [3:0]  = rg_bar_rst_reg_fld2;
    l2d_bar_rst_reg_r [10:8]  = rg_bar_rst_reg_fld3;
    l2d_bar_rst_reg_r [13:11]  = rg_bar_rst_reg_fld4;
  end
  
  //------- combinatorial assigns for bar_negintr
  always_comb begin
    reg_bar_negintr_interrupt_next = rg_bar_negintr_interrupt;
    l2h_bar_negintr_intr_o = 1'b0;
    reg_bar_negintr_interrupt_next = ((intr_bar_negintr_interrupt_previntr & ~h2l_bar_negintr_interrupt_intr) | rg_bar_negintr_interrupt);
    l2h_bar_negintr_intr_o = l2h_bar_negintr_intr_o | (rg_bar_negintr_interrupt);
    if (d2l_bar_negintr_we) reg_bar_negintr_interrupt_next = (reg_bar_negintr_interrupt_next & ~d2l_bar_negintr_w [0] );
  end
  
  //------- reg assigns for bar_negintr
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_bar_negintr_interrupt <= #1 1'b0;
      intr_bar_negintr_interrupt_previntr <= #1 1'b0;
    end
    else begin
      rg_bar_negintr_interrupt <= #1  reg_bar_negintr_interrupt_next;
      intr_bar_negintr_interrupt_previntr <= #1 h2l_bar_negintr_interrupt_intr;
    end
  end
  
  //------- combinatorial assigns for bar_a_reg_0 (pio read data)
  always_comb begin
    l2d_bar_a_reg_0_r = 32'b0;
    l2d_bar_a_reg_0_r [9:0]  = rg_bar_a_reg_0_fld1;
    l2d_bar_a_reg_0_r [15]  = rg_bar_a_reg_0_fld2;
  end
  
  //------- combinatorial assigns for bar_log_reg1
  always_comb begin
    reg_bar_log_reg1_err_log_next = rg_bar_log_reg1_err_log;
    if (~rg_bar_intr_reg1_int1) reg_bar_log_reg1_err_log_next = h2l_bar_log_reg1_err_log_w;
    if (d2l_bar_log_reg1_we) reg_bar_log_reg1_err_log_next = d2l_bar_log_reg1_w [9:0] ;
  end
  
  //------- reg assigns for bar_log_reg1
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_bar_log_reg1_err_log <= #1 10'd0;
    end
    else begin
      rg_bar_log_reg1_err_log <= #1  reg_bar_log_reg1_err_log_next;
    end
  end
  
  //------- combinatorial assigns for intr_cascade_merge (pio read data)
  always_comb begin
    l2d_intr_cascade_merge_r = 32'b0;
    l2d_intr_cascade_merge_r [0]  = rg_intr_cascade_merge_fld1;
    l2d_intr_cascade_merge_r [1]  = rg_intr_cascade_merge_fld2;
  end
  
  //------- combinatorial assigns for bar_log_reg2
  always_comb begin
    reg_bar_log_reg2_err_log_next = rg_bar_log_reg2_err_log;
    if ((reg_bar_intr_reg1_int1_next & ~rg_bar_intr_reg1_int1)) reg_bar_log_reg2_err_log_next = h2l_bar_log_reg2_err_log_w;
    if (d2l_bar_log_reg2_we) reg_bar_log_reg2_err_log_next = d2l_bar_log_reg2_w [9:0] ;
  end
  
  //------- reg assigns for bar_log_reg2
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_bar_log_reg2_err_log <= #1 10'd0;
    end
    else begin
      rg_bar_log_reg2_err_log <= #1  reg_bar_log_reg2_err_log_next;
    end
  end
  
  //------- combinatorial assigns for bar_log_reg3
  always_comb begin
    reg_bar_log_reg3_err_log_next = rg_bar_log_reg3_err_log;
    if (~l2h_bar_intr_reg1_intr_o) reg_bar_log_reg3_err_log_next = h2l_bar_log_reg3_err_log_w;
    if (d2l_bar_log_reg3_we) reg_bar_log_reg3_err_log_next = d2l_bar_log_reg3_w [9:0] ;
  end
  
  //------- reg assigns for bar_log_reg3
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_bar_log_reg3_err_log <= #1 10'd0;
    end
    else begin
      rg_bar_log_reg3_err_log <= #1  reg_bar_log_reg3_err_log_next;
    end
  end
  
  //------- combinatorial assigns for bar_a_reg_1 (pio read data)
  always_comb begin
    l2d_bar_a_reg_1_r = 32'b0;
    l2d_bar_a_reg_1_r [9:0]  = rg_bar_a_reg_1_fld1;
    l2d_bar_a_reg_1_r [15]  = rg_bar_a_reg_1_fld2;
  end
  
  //------- combinatorial assigns for bar_bothintr (pio read data)
  always_comb begin
    l2d_bar_bothintr_r = 32'b0;
    l2d_bar_bothintr_r [0]  = rg_bar_bothintr_interrupt;
  end
  
  //------- combinatorial assigns for bar_log_reg2 (pio read data)
  always_comb begin
    l2d_bar_log_reg2_r = 32'b0;
    l2d_bar_log_reg2_r [9:0]  = rg_bar_log_reg2_err_log;
  end
  
  //------- combinatorial assigns for bar_bothintr
  always_comb begin
    reg_bar_bothintr_interrupt_next = rg_bar_bothintr_interrupt;
    l2h_bar_bothintr_intr_o = 1'b0;
    reg_bar_bothintr_interrupt_next = ((h2l_bar_bothintr_interrupt_intr ^ intr_bar_bothintr_interrupt_previntr) | rg_bar_bothintr_interrupt);
    l2h_bar_bothintr_intr_o = l2h_bar_bothintr_intr_o | (rg_bar_bothintr_interrupt);
    if (d2l_bar_bothintr_we) reg_bar_bothintr_interrupt_next = (reg_bar_bothintr_interrupt_next & ~d2l_bar_bothintr_w [0] );
  end
  
  //------- reg assigns for bar_bothintr
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_bar_bothintr_interrupt <= #1 1'b0;
      intr_bar_bothintr_interrupt_previntr <= #1 1'b0;
    end
    else begin
      rg_bar_bothintr_interrupt <= #1  reg_bar_bothintr_interrupt_next;
      intr_bar_bothintr_interrupt_previntr <= #1 h2l_bar_bothintr_interrupt_intr;
    end
  end
  
  //------- combinatorial assigns for bar_sub_intr_reg3
  always_comb begin
    reg_bar_sub_intr_reg3_int1_next = rg_bar_sub_intr_reg3_int1;
    reg_bar_sub_intr_reg3_int2_next = rg_bar_sub_intr_reg3_int2;
    l2h_bar_sub_intr_reg3_intr_o = 1'b0;
    reg_bar_sub_intr_reg3_int1_next = (h2l_bar_sub_intr_reg3_int1_intr | rg_bar_sub_intr_reg3_int1);
    l2h_bar_sub_intr_reg3_intr_o = l2h_bar_sub_intr_reg3_intr_o | (rg_bar_sub_intr_reg3_int1 & rg_bar_sub_intr_reg2_int1);
    reg_bar_sub_intr_reg3_int2_next = (h2l_bar_sub_intr_reg3_int2_intr | rg_bar_sub_intr_reg3_int2) & rg_bar_sub_intr_reg2_int2;
    l2h_bar_sub_intr_reg3_intr_o = l2h_bar_sub_intr_reg3_intr_o | (rg_bar_sub_intr_reg3_int2);
    if (d2l_bar_sub_intr_reg3_we) reg_bar_sub_intr_reg3_int1_next = (reg_bar_sub_intr_reg3_int1_next & ~d2l_bar_sub_intr_reg3_w [0] );
    if (d2l_bar_sub_intr_reg3_we) reg_bar_sub_intr_reg3_int2_next = (reg_bar_sub_intr_reg3_int2_next & ~d2l_bar_sub_intr_reg3_w [1] );
  end
  
  //------- reg assigns for bar_sub_intr_reg3
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_bar_sub_intr_reg3_int1 <= #1 1'd0;
      rg_bar_sub_intr_reg3_int2 <= #1 1'd0;
    end
    else begin
      rg_bar_sub_intr_reg3_int1 <= #1  reg_bar_sub_intr_reg3_int1_next;
      rg_bar_sub_intr_reg3_int2 <= #1  reg_bar_sub_intr_reg3_int2_next;
    end
  end
  
  //------- combinatorial assigns for bar_log_reg1 (pio read data)
  always_comb begin
    l2d_bar_log_reg1_r = 32'b0;
    l2d_bar_log_reg1_r [9:0]  = rg_bar_log_reg1_err_log;
  end
  
  //------- combinatorial assigns for bar_sub_intr_reg2 (pio read data)
  always_comb begin
    l2d_bar_sub_intr_reg2_r = 32'b0;
    l2d_bar_sub_intr_reg2_r [0]  = rg_bar_sub_intr_reg2_int1;
    l2d_bar_sub_intr_reg2_r [1]  = rg_bar_sub_intr_reg2_int2;
  end
  
  //------- combinatorial assigns for bar_negintr (pio read data)
  always_comb begin
    l2d_bar_negintr_r = 32'b0;
    l2d_bar_negintr_r [0]  = rg_bar_negintr_interrupt;
  end
  
endmodule

//
//---------- module foo_jrdl_decode
//
module foo_jrdl_decode
(
  clk,
  reset,
  h2d_pio_dec_address,
  h2d_pio_dec_write_data,
  h2d_pio_dec_write,
  h2d_pio_dec_read,
  l2d_bar_a_reg_0_r,
  l2d_bar_a_reg_1_r,
  l2d_bar_intr_reg1_r,
  l2d_bar_log_reg1_r,
  l2d_bar_log_reg2_r,
  l2d_bar_log_reg3_r,
  l2d_bar_sub_intr_reg2_r,
  l2d_bar_sub_intr_reg3_r,
  l2d_bar_rst_reg_r,
  l2d_bar_negintr_r,
  l2d_bar_bothintr_r,
  l2d_intr_cascade_merge_r,

  d2h_dec_pio_read_data,
  d2h_dec_pio_ack,
  d2h_dec_pio_nack,
  d2l_bar_a_reg_0_w,
  d2l_bar_a_reg_0_we,
  d2l_bar_a_reg_0_re,
  d2l_bar_a_reg_1_w,
  d2l_bar_a_reg_1_we,
  d2l_bar_a_reg_1_re,
  d2l_bar_intr_reg1_w,
  d2l_bar_intr_reg1_we,
  d2l_bar_intr_reg1_re,
  d2l_bar_log_reg1_w,
  d2l_bar_log_reg1_we,
  d2l_bar_log_reg1_re,
  d2l_bar_log_reg2_w,
  d2l_bar_log_reg2_we,
  d2l_bar_log_reg2_re,
  d2l_bar_log_reg3_w,
  d2l_bar_log_reg3_we,
  d2l_bar_log_reg3_re,
  d2l_bar_sub_intr_reg2_w,
  d2l_bar_sub_intr_reg2_we,
  d2l_bar_sub_intr_reg2_re,
  d2l_bar_sub_intr_reg3_w,
  d2l_bar_sub_intr_reg3_we,
  d2l_bar_sub_intr_reg3_re,
  d2l_bar_rst_reg_w,
  d2l_bar_rst_reg_we,
  d2l_bar_rst_reg_re,
  d2l_bar_negintr_w,
  d2l_bar_negintr_we,
  d2l_bar_negintr_re,
  d2l_bar_bothintr_w,
  d2l_bar_bothintr_we,
  d2l_bar_bothintr_re,
  d2l_intr_cascade_merge_w,
  d2l_intr_cascade_merge_we,
  d2l_intr_cascade_merge_re );

  //------- inputs
  input    clk;
  input    reset;
  input     [12:2] h2d_pio_dec_address;
  input     [31:0] h2d_pio_dec_write_data;
  input    h2d_pio_dec_write;
  input    h2d_pio_dec_read;
  input     [31:0] l2d_bar_a_reg_0_r;
  input     [31:0] l2d_bar_a_reg_1_r;
  input     [31:0] l2d_bar_intr_reg1_r;
  input     [31:0] l2d_bar_log_reg1_r;
  input     [31:0] l2d_bar_log_reg2_r;
  input     [31:0] l2d_bar_log_reg3_r;
  input     [31:0] l2d_bar_sub_intr_reg2_r;
  input     [31:0] l2d_bar_sub_intr_reg3_r;
  input     [31:0] l2d_bar_rst_reg_r;
  input     [31:0] l2d_bar_negintr_r;
  input     [31:0] l2d_bar_bothintr_r;
  input     [31:0] l2d_intr_cascade_merge_r;

  //------- outputs
  output     [31:0] d2h_dec_pio_read_data;
  output    d2h_dec_pio_ack;
  output    d2h_dec_pio_nack;
  output     [31:0] d2l_bar_a_reg_0_w;
  output    d2l_bar_a_reg_0_we;
  output    d2l_bar_a_reg_0_re;
  output     [31:0] d2l_bar_a_reg_1_w;
  output    d2l_bar_a_reg_1_we;
  output    d2l_bar_a_reg_1_re;
  output     [31:0] d2l_bar_intr_reg1_w;
  output    d2l_bar_intr_reg1_we;
  output    d2l_bar_intr_reg1_re;
  output     [31:0] d2l_bar_log_reg1_w;
  output    d2l_bar_log_reg1_we;
  output    d2l_bar_log_reg1_re;
  output     [31:0] d2l_bar_log_reg2_w;
  output    d2l_bar_log_reg2_we;
  output    d2l_bar_log_reg2_re;
  output     [31:0] d2l_bar_log_reg3_w;
  output    d2l_bar_log_reg3_we;
  output    d2l_bar_log_reg3_re;
  output     [31:0] d2l_bar_sub_intr_reg2_w;
  output    d2l_bar_sub_intr_reg2_we;
  output    d2l_bar_sub_intr_reg2_re;
  output     [31:0] d2l_bar_sub_intr_reg3_w;
  output    d2l_bar_sub_intr_reg3_we;
  output    d2l_bar_sub_intr_reg3_re;
  output     [31:0] d2l_bar_rst_reg_w;
  output    d2l_bar_rst_reg_we;
  output    d2l_bar_rst_reg_re;
  output     [31:0] d2l_bar_negintr_w;
  output    d2l_bar_negintr_we;
  output    d2l_bar_negintr_re;
  output     [31:0] d2l_bar_bothintr_w;
  output    d2l_bar_bothintr_we;
  output    d2l_bar_bothintr_re;
  output     [31:0] d2l_intr_cascade_merge_w;
  output    d2l_intr_cascade_merge_we;
  output    d2l_intr_cascade_merge_re;


  //------- wire defines
  logic   [12:2] pio_dec_address;
  logic   [31:0] pio_dec_write_data;
  logic  pio_dec_read;
  logic  pio_dec_write;
  
  //------- reg defines
  logic   [31:0] d2l_bar_a_reg_0_w;
  logic  d2l_bar_a_reg_0_we;
  logic  d2l_bar_a_reg_0_re;
  logic   [31:0] d2l_bar_a_reg_1_w;
  logic  d2l_bar_a_reg_1_we;
  logic  d2l_bar_a_reg_1_re;
  logic   [31:0] d2l_bar_intr_reg1_w;
  logic  d2l_bar_intr_reg1_we;
  logic  d2l_bar_intr_reg1_re;
  logic   [31:0] d2l_bar_log_reg1_w;
  logic  d2l_bar_log_reg1_we;
  logic  d2l_bar_log_reg1_re;
  logic   [31:0] d2l_bar_log_reg2_w;
  logic  d2l_bar_log_reg2_we;
  logic  d2l_bar_log_reg2_re;
  logic   [31:0] d2l_bar_log_reg3_w;
  logic  d2l_bar_log_reg3_we;
  logic  d2l_bar_log_reg3_re;
  logic   [31:0] d2l_bar_sub_intr_reg2_w;
  logic  d2l_bar_sub_intr_reg2_we;
  logic  d2l_bar_sub_intr_reg2_re;
  logic   [31:0] d2l_bar_sub_intr_reg3_w;
  logic  d2l_bar_sub_intr_reg3_we;
  logic  d2l_bar_sub_intr_reg3_re;
  logic   [31:0] d2l_bar_rst_reg_w;
  logic  d2l_bar_rst_reg_we;
  logic  d2l_bar_rst_reg_re;
  logic   [31:0] d2l_bar_negintr_w;
  logic  d2l_bar_negintr_we;
  logic  d2l_bar_negintr_re;
  logic   [31:0] d2l_bar_bothintr_w;
  logic  d2l_bar_bothintr_we;
  logic  d2l_bar_bothintr_re;
  logic   [31:0] d2l_intr_cascade_merge_w;
  logic  d2l_intr_cascade_merge_we;
  logic  d2l_intr_cascade_merge_re;
  logic  pio_write_active;
  logic  pio_read_active;
  logic   [12:2] pio_dec_address_d1;
  logic   [31:0] pio_dec_write_data_d1;
  logic   [31:0] dec_pio_read_data;
  logic   [31:0] dec_pio_read_data_d1;
  logic  dec_pio_ack;
  logic  dec_pio_nack;
  logic  dec_pio_ack_next;
  logic  dec_pio_nack_next;
  logic  pio_internal_ack;
  logic  pio_internal_nack;
  logic  pio_external_ack;
  logic  pio_external_nack;
  logic  pio_external_ack_next;
  logic  pio_external_nack_next;
  logic  pio_no_acks;
  logic  pio_activate_write;
  logic  pio_activate_read;
  logic   [31:0] dec_pio_read_data_next;
  logic  external_transaction_active;
  
  
  //------- assigns
  assign  pio_dec_address = h2d_pio_dec_address;
  assign  pio_dec_write_data = h2d_pio_dec_write_data;
  assign  pio_dec_read = h2d_pio_dec_read;
  assign  pio_dec_write = h2d_pio_dec_write;
  assign  d2h_dec_pio_read_data = dec_pio_read_data;
  assign  d2h_dec_pio_ack = dec_pio_ack;
  assign  d2h_dec_pio_nack = dec_pio_nack;
  
  //------- combinatorial assigns for pio read data
  always_comb begin
    dec_pio_read_data = dec_pio_read_data_d1;
  end
  
  //------- reg assigns for pio read data
  always_ff @ (posedge clk) begin
    if (reset) begin
      dec_pio_read_data_d1 <= #1  32'b0;
    end
    else begin
      dec_pio_read_data_d1 <= #1 dec_pio_read_data_next;
    end
  end
  
  //------- reg assigns for pio i/f
  always_ff @ (posedge clk) begin
    if (reset) begin
      pio_write_active <= #1  1'b0;
      pio_read_active <= #1  1'b0;
    end
    else begin
      pio_write_active <= #1  pio_write_active ? pio_no_acks : pio_activate_write;
      pio_read_active <= #1  pio_read_active ? pio_no_acks : pio_activate_read;
    end
    pio_dec_address_d1 <= #1   pio_dec_address;
    pio_dec_write_data_d1 <= #1  pio_dec_write_data;
  end
  
  //------- combinatorial assigns for pio ack/nack
  always_comb begin
    pio_internal_nack = (pio_read_active | pio_write_active) & ~pio_internal_ack & ~external_transaction_active;
    dec_pio_ack_next = (pio_internal_ack | (pio_external_ack_next & external_transaction_active));
    dec_pio_nack_next = (pio_internal_nack | (pio_external_nack_next & external_transaction_active));
    pio_no_acks = ~(dec_pio_ack | dec_pio_nack | pio_external_ack | pio_external_nack);
    pio_activate_write = (pio_dec_write & ~(dec_pio_ack | dec_pio_nack));
    pio_activate_read = (pio_dec_read & ~(dec_pio_ack | dec_pio_nack));
  end
  
  //------- reg assigns for pio ack/nack
  always_ff @ (posedge clk) begin
    if (reset) begin
      dec_pio_ack <= #1 1'b0;
      dec_pio_nack <= #1 1'b0;
      pio_external_ack <= #1  1'b0;
      pio_external_nack <= #1  1'b0;
    end
    else begin
      dec_pio_ack <= #1 dec_pio_ack ? 1'b0 : dec_pio_ack_next;
      dec_pio_nack <= #1 dec_pio_nack ? 1'b0 : dec_pio_nack_next;
      pio_external_ack <= #1 pio_external_ack_next;
      pio_external_nack <= #1 pio_external_nack_next;
    end
  end
  
  
  //------- address decode
  always_comb begin
    pio_internal_ack = 1'b0;
    external_transaction_active = 1'b0;
    pio_external_ack_next = 1'b0;
    pio_external_nack_next = 1'b0;
    dec_pio_read_data_next = 32'b0;
    
    d2l_bar_a_reg_0_w = pio_dec_write_data_d1  [31:0] ;
    d2l_bar_a_reg_0_we = 1'b0;
    d2l_bar_a_reg_0_re = 1'b0;
    d2l_bar_a_reg_1_w = pio_dec_write_data_d1  [31:0] ;
    d2l_bar_a_reg_1_we = 1'b0;
    d2l_bar_a_reg_1_re = 1'b0;
    d2l_bar_intr_reg1_w = pio_dec_write_data_d1  [31:0] ;
    d2l_bar_intr_reg1_we = 1'b0;
    d2l_bar_intr_reg1_re = 1'b0;
    d2l_bar_log_reg1_w = pio_dec_write_data_d1  [31:0] ;
    d2l_bar_log_reg1_we = 1'b0;
    d2l_bar_log_reg1_re = 1'b0;
    d2l_bar_log_reg2_w = pio_dec_write_data_d1  [31:0] ;
    d2l_bar_log_reg2_we = 1'b0;
    d2l_bar_log_reg2_re = 1'b0;
    d2l_bar_log_reg3_w = pio_dec_write_data_d1  [31:0] ;
    d2l_bar_log_reg3_we = 1'b0;
    d2l_bar_log_reg3_re = 1'b0;
    d2l_bar_sub_intr_reg2_w = pio_dec_write_data_d1  [31:0] ;
    d2l_bar_sub_intr_reg2_we = 1'b0;
    d2l_bar_sub_intr_reg2_re = 1'b0;
    d2l_bar_sub_intr_reg3_w = pio_dec_write_data_d1  [31:0] ;
    d2l_bar_sub_intr_reg3_we = 1'b0;
    d2l_bar_sub_intr_reg3_re = 1'b0;
    d2l_bar_rst_reg_w = pio_dec_write_data_d1  [31:0] ;
    d2l_bar_rst_reg_we = 1'b0;
    d2l_bar_rst_reg_re = 1'b0;
    d2l_bar_negintr_w = pio_dec_write_data_d1  [31:0] ;
    d2l_bar_negintr_we = 1'b0;
    d2l_bar_negintr_re = 1'b0;
    d2l_bar_bothintr_w = pio_dec_write_data_d1  [31:0] ;
    d2l_bar_bothintr_we = 1'b0;
    d2l_bar_bothintr_re = 1'b0;
    d2l_intr_cascade_merge_w = pio_dec_write_data_d1  [31:0] ;
    d2l_intr_cascade_merge_we = 1'b0;
    d2l_intr_cascade_merge_re = 1'b0;
    
    casez(pio_dec_address_d1)
    //  Register: bar.a_reg_0     Address: 0x0     External: false
    11'b00000000000:
      begin
        d2l_bar_a_reg_0_we = pio_write_active & ~dec_pio_ack;
        d2l_bar_a_reg_0_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_bar_a_reg_0_r;
      end
    //  Register: bar.a_reg_1     Address: 0x4     External: false
    11'b00000000001:
      begin
        d2l_bar_a_reg_1_we = pio_write_active & ~dec_pio_ack;
        d2l_bar_a_reg_1_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_bar_a_reg_1_r;
      end
    //  Register: bar.intr_reg1     Address: 0x100     External: false
    11'b00001000000:
      begin
        d2l_bar_intr_reg1_we = pio_write_active & ~dec_pio_ack;
        d2l_bar_intr_reg1_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_bar_intr_reg1_r;
      end
    //  Register: bar.log_reg1     Address: 0x104     External: false
    11'b00001000001:
      begin
        d2l_bar_log_reg1_we = pio_write_active & ~dec_pio_ack;
        d2l_bar_log_reg1_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_bar_log_reg1_r;
      end
    //  Register: bar.log_reg2     Address: 0x108     External: false
    11'b00001000010:
      begin
        d2l_bar_log_reg2_we = pio_write_active & ~dec_pio_ack;
        d2l_bar_log_reg2_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_bar_log_reg2_r;
      end
    //  Register: bar.log_reg3     Address: 0x10c     External: false
    11'b00001000011:
      begin
        d2l_bar_log_reg3_we = pio_write_active & ~dec_pio_ack;
        d2l_bar_log_reg3_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_bar_log_reg3_r;
      end
    //  Register: bar.sub.intr_reg2     Address: 0x200     External: false
    11'b00010000000:
      begin
        d2l_bar_sub_intr_reg2_we = pio_write_active & ~dec_pio_ack;
        d2l_bar_sub_intr_reg2_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_bar_sub_intr_reg2_r;
      end
    //  Register: bar.sub.intr_reg3     Address: 0x300     External: false
    11'b00011000000:
      begin
        d2l_bar_sub_intr_reg3_we = pio_write_active & ~dec_pio_ack;
        d2l_bar_sub_intr_reg3_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_bar_sub_intr_reg3_r;
      end
    //  Register: bar.rst_reg     Address: 0x304     External: false
    11'b00011000001:
      begin
        d2l_bar_rst_reg_we = pio_write_active & ~dec_pio_ack;
        d2l_bar_rst_reg_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_bar_rst_reg_r;
      end
    //  Register: bar.negintr     Address: 0x500     External: false
    11'b00101000000:
      begin
        d2l_bar_negintr_we = pio_write_active & ~dec_pio_ack;
        d2l_bar_negintr_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_bar_negintr_r;
      end
    //  Register: bar.bothintr     Address: 0x504     External: false
    11'b00101000001:
      begin
        d2l_bar_bothintr_we = pio_write_active & ~dec_pio_ack;
        d2l_bar_bothintr_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_bar_bothintr_r;
      end
    //  Register: intr_cascade.merge     Address: 0x1000     External: false
    11'b10000000000:
      begin
        d2l_intr_cascade_merge_we = pio_write_active & ~dec_pio_ack;
        d2l_intr_cascade_merge_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active;
        dec_pio_read_data_next  [31:0]  = l2d_intr_cascade_merge_r;
      end
    endcase
  end
  
endmodule

//
//---------- module foo_pio
//
module foo_pio
(
  clk,
  reset,
  h2l_bar_a_reg_0_fld1_w,
  h2l_bar_a_reg_0_fld1_we,
  h2l_bar_a_reg_1_fld1_w,
  h2l_bar_a_reg_1_fld1_we,
  h2l_bar_intr_reg1_int1_intr,
  h2l_bar_intr_reg1_int2_intr,
  h2l_bar_log_reg1_err_log_w,
  h2l_bar_log_reg2_err_log_w,
  h2l_bar_log_reg3_err_log_w,
  h2l_bar_sub_intr_reg2_int1_intr,
  h2l_bar_sub_intr_reg2_int2_intr,
  h2l_bar_sub_intr_reg3_int1_intr,
  h2l_bar_sub_intr_reg3_int2_intr,
  h2l_bar_negintr_interrupt_intr,
  h2l_bar_bothintr_interrupt_intr,
  h2l_intr_cascade_merge_fld2_intr,
  h2d_pio_dec_address,
  h2d_pio_dec_write_data,
  h2d_pio_dec_write,
  h2d_pio_dec_read,

  l2h_bar_a_reg_0_fld1_r,
  l2h_bar_a_reg_0_fld2_r,
  l2h_bar_a_reg_1_fld1_r,
  l2h_bar_a_reg_1_fld2_r,
  l2h_bar_intr_reg1_intr_o,
  l2h_bar_sub_intr_reg2_intr_o,
  l2h_bar_sub_intr_reg3_intr_o,
  l2h_bar_rst_reg_fld1_r,
  l2h_bar_rst_reg_fld2_r,
  l2h_bar_rst_reg_fld3_r,
  l2h_bar_rst_reg_fld4_r,
  l2h_bar_negintr_intr_o,
  l2h_bar_bothintr_intr_o,
  l2h_intr_cascade_merge_intr_o,
  d2h_dec_pio_read_data,
  d2h_dec_pio_ack,
  d2h_dec_pio_nack );

  //------- inputs
  input    clk;
  input    reset;
  input     [9:0] h2l_bar_a_reg_0_fld1_w;
  input    h2l_bar_a_reg_0_fld1_we;
  input     [9:0] h2l_bar_a_reg_1_fld1_w;
  input    h2l_bar_a_reg_1_fld1_we;
  input    h2l_bar_intr_reg1_int1_intr;
  input    h2l_bar_intr_reg1_int2_intr;
  input     [9:0] h2l_bar_log_reg1_err_log_w;
  input     [9:0] h2l_bar_log_reg2_err_log_w;
  input     [9:0] h2l_bar_log_reg3_err_log_w;
  input    h2l_bar_sub_intr_reg2_int1_intr;
  input    h2l_bar_sub_intr_reg2_int2_intr;
  input    h2l_bar_sub_intr_reg3_int1_intr;
  input    h2l_bar_sub_intr_reg3_int2_intr;
  input    h2l_bar_negintr_interrupt_intr;
  input    h2l_bar_bothintr_interrupt_intr;
  input    h2l_intr_cascade_merge_fld2_intr;
  input     [12:2] h2d_pio_dec_address;
  input     [31:0] h2d_pio_dec_write_data;
  input    h2d_pio_dec_write;
  input    h2d_pio_dec_read;

  //------- outputs
  output     [9:0] l2h_bar_a_reg_0_fld1_r;
  output    l2h_bar_a_reg_0_fld2_r;
  output     [9:0] l2h_bar_a_reg_1_fld1_r;
  output    l2h_bar_a_reg_1_fld2_r;
  output    l2h_bar_intr_reg1_intr_o;
  output    l2h_bar_sub_intr_reg2_intr_o;
  output    l2h_bar_sub_intr_reg3_intr_o;
  output     [3:0] l2h_bar_rst_reg_fld1_r;
  output     [3:0] l2h_bar_rst_reg_fld2_r;
  output     [2:0] l2h_bar_rst_reg_fld3_r;
  output     [2:0] l2h_bar_rst_reg_fld4_r;
  output    l2h_bar_negintr_intr_o;
  output    l2h_bar_bothintr_intr_o;
  output    l2h_intr_cascade_merge_intr_o;
  output     [31:0] d2h_dec_pio_read_data;
  output    d2h_dec_pio_ack;
  output    d2h_dec_pio_nack;


  //------- wire defines
  logic   [31:0] d2l_bar_a_reg_0_w;
  logic  d2l_bar_a_reg_0_we;
  logic  d2l_bar_a_reg_0_re;
  logic   [31:0] d2l_bar_a_reg_1_w;
  logic  d2l_bar_a_reg_1_we;
  logic  d2l_bar_a_reg_1_re;
  logic   [31:0] d2l_bar_intr_reg1_w;
  logic  d2l_bar_intr_reg1_we;
  logic  d2l_bar_intr_reg1_re;
  logic   [31:0] d2l_bar_log_reg1_w;
  logic  d2l_bar_log_reg1_we;
  logic  d2l_bar_log_reg1_re;
  logic   [31:0] d2l_bar_log_reg2_w;
  logic  d2l_bar_log_reg2_we;
  logic  d2l_bar_log_reg2_re;
  logic   [31:0] d2l_bar_log_reg3_w;
  logic  d2l_bar_log_reg3_we;
  logic  d2l_bar_log_reg3_re;
  logic   [31:0] d2l_bar_sub_intr_reg2_w;
  logic  d2l_bar_sub_intr_reg2_we;
  logic  d2l_bar_sub_intr_reg2_re;
  logic   [31:0] d2l_bar_sub_intr_reg3_w;
  logic  d2l_bar_sub_intr_reg3_we;
  logic  d2l_bar_sub_intr_reg3_re;
  logic   [31:0] d2l_bar_rst_reg_w;
  logic  d2l_bar_rst_reg_we;
  logic  d2l_bar_rst_reg_re;
  logic   [31:0] d2l_bar_negintr_w;
  logic  d2l_bar_negintr_we;
  logic  d2l_bar_negintr_re;
  logic   [31:0] d2l_bar_bothintr_w;
  logic  d2l_bar_bothintr_we;
  logic  d2l_bar_bothintr_re;
  logic   [31:0] d2l_intr_cascade_merge_w;
  logic  d2l_intr_cascade_merge_we;
  logic  d2l_intr_cascade_merge_re;
  logic   [31:0] l2d_bar_a_reg_0_r;
  logic   [31:0] l2d_bar_a_reg_1_r;
  logic   [31:0] l2d_bar_intr_reg1_r;
  logic   [31:0] l2d_bar_log_reg1_r;
  logic   [31:0] l2d_bar_log_reg2_r;
  logic   [31:0] l2d_bar_log_reg3_r;
  logic   [31:0] l2d_bar_sub_intr_reg2_r;
  logic   [31:0] l2d_bar_sub_intr_reg3_r;
  logic   [31:0] l2d_bar_rst_reg_r;
  logic   [31:0] l2d_bar_negintr_r;
  logic   [31:0] l2d_bar_bothintr_r;
  logic   [31:0] l2d_intr_cascade_merge_r;
  
  
  foo_jrdl_decode pio_decode ( .* );
    
  foo_jrdl_logic pio_logic ( .* );
    
endmodule

