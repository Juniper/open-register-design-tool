//   Ordt 190725.01 autogenerated file 
//   Input: ./rdl_iwrap/test.rdl
//   Parms: ./rdl_iwrap/test.parms
//   Date: Sun Nov 17 17:09:31 EST 2019
//

#include "ordt_pio_common.hpp"
#include "ordt_pio.hpp"

// ------------------ ordt_addr_elem methods ------------------

ordt_addr_elem::ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : m_startaddress(_m_startaddress),
    m_endaddress(_m_endaddress) {
}

bool  ordt_addr_elem::containsAddress(const uint64_t &addr) {
  return ((addr >= m_startaddress) && (addr <= m_endaddress));
}

bool  ordt_addr_elem::isBelowAddress(const uint64_t &addr) {
  return (addr > m_endaddress);
}

bool  ordt_addr_elem::isAboveAddress(const uint64_t &addr) {
  return (addr < m_startaddress);
}

bool  ordt_addr_elem::hasStartAddress(const uint64_t &addr) {
  return (addr == m_startaddress);
}

void  ordt_addr_elem::update_child_ptrs() {
}

// ------------------ ordt_regset methods ------------------

ordt_addr_elem*  ordt_regset::findAddrElem(const uint64_t &addr) {
  int lo = 0;
  int hi = m_children.size()-1;
  int mid = 0;
  while (lo <= hi) {
     mid = (lo + hi) / 2;
     if (m_children[mid]->containsAddress(addr)) {
        //outElem = m_children[mid];
        return m_children[mid];
     }
     else if (m_children[mid]->isAboveAddress(addr))
        hi = mid - 1;
     else
        lo = mid + 1;
  }
  return nullptr;
}

ordt_regset::ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

int  ordt_regset::write(const uint64_t &addr, const ordt_data &wdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->write(addr, wdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in regset\n";
  #endif
     return 8;
}

int  ordt_regset::read(const uint64_t &addr, ordt_data &rdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->read(addr, rdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in regset\n";
  #endif
     rdata.clear();
     return 8;
}

// ------------------ ordt_reg methods ------------------

ordt_reg::ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

ordt_reg::ordt_reg(const ordt_reg &_old)
  : ordt_addr_elem(_old),
    m_mutex() {
}

void  ordt_reg::write(const ordt_data &wdata) {
}

int  ordt_reg::write(const uint64_t &addr, const ordt_data &wdata) {
     return 0;
}

void  ordt_reg::read(ordt_data &rdata) {
}

int  ordt_reg::read(const uint64_t &addr, ordt_data &rdata) {
     return 0;
}

// ------------------ ordt_rg_regs_none_reg_none methods ------------------

ordt_rg_regs_none_reg_none::ordt_rg_regs_none_reg_none(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    fld_none(0, 1, 0x0, r_std, w_std),
    fld_gen(1, 1, 0x0, r_std, w_std),
    fld_ext(2, 1, 0x0, r_std, w_std),
    fld_int(3, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_regs_none_reg_none::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_regs_none_reg_none at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_regs_none_reg_none\n";
  #endif
     return 8;
}

void  ordt_rg_regs_none_reg_none::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  fld_none.write(wdata);
  fld_gen.write(wdata);
  fld_ext.write(wdata);
  fld_int.write(wdata);
}

int  ordt_rg_regs_none_reg_none::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_regs_none_reg_none at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_regs_none_reg_none\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_regs_none_reg_none::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  fld_none.read(rdata);
  fld_gen.read(rdata);
  fld_ext.read(rdata);
  fld_int.read(rdata);
}

// ------------------ ordt_rg_regs_none_reg_int methods ------------------

ordt_rg_regs_none_reg_int::ordt_rg_regs_none_reg_int(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    fld_none(0, 1, 0x0, r_std, w_std),
    fld_gen(1, 1, 0x0, r_std, w_std),
    fld_ext(2, 1, 0x0, r_std, w_std),
    fld_int(3, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_regs_none_reg_int::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_regs_none_reg_int at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_regs_none_reg_int\n";
  #endif
     return 8;
}

void  ordt_rg_regs_none_reg_int::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  fld_none.write(wdata);
  fld_gen.write(wdata);
  fld_ext.write(wdata);
  fld_int.write(wdata);
}

int  ordt_rg_regs_none_reg_int::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_regs_none_reg_int at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_regs_none_reg_int\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_regs_none_reg_int::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  fld_none.read(rdata);
  fld_gen.read(rdata);
  fld_ext.read(rdata);
  fld_int.read(rdata);
}

// ------------------ ordt_rset_regs_none methods ------------------

ordt_rset_regs_none::ordt_rset_regs_none(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    reg_none(_m_startaddress + 0x0, _m_startaddress + 0x3),
    reg_int(_m_startaddress + 0x4, _m_startaddress + 0x7) {
  m_children.push_back(&reg_none);
  m_children.push_back(&reg_int);
}

void  ordt_rset_regs_none::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&reg_none);
  m_children.push_back(&reg_int);
}

// ------------------ ordt_rg_regs_ext_reg_none methods ------------------

ordt_rg_regs_ext_reg_none::ordt_rg_regs_ext_reg_none(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    fld_none(0, 1, 0x0, r_std, w_std),
    fld_gen(1, 1, 0x0, r_std, w_std),
    fld_ext(2, 1, 0x0, r_std, w_std),
    fld_int(3, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_regs_ext_reg_none::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_regs_ext_reg_none at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_regs_ext_reg_none\n";
  #endif
     return 8;
}

void  ordt_rg_regs_ext_reg_none::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  fld_none.write(wdata);
  fld_gen.write(wdata);
  fld_ext.write(wdata);
  fld_int.write(wdata);
}

int  ordt_rg_regs_ext_reg_none::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_regs_ext_reg_none at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_regs_ext_reg_none\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_regs_ext_reg_none::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  fld_none.read(rdata);
  fld_gen.read(rdata);
  fld_ext.read(rdata);
  fld_int.read(rdata);
}

// ------------------ ordt_rg_regs_ext_reg_int methods ------------------

ordt_rg_regs_ext_reg_int::ordt_rg_regs_ext_reg_int(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    fld_none(0, 1, 0x0, r_std, w_std),
    fld_gen(1, 1, 0x0, r_std, w_std),
    fld_ext(2, 1, 0x0, r_std, w_std),
    fld_int(3, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_regs_ext_reg_int::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_regs_ext_reg_int at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_regs_ext_reg_int\n";
  #endif
     return 8;
}

void  ordt_rg_regs_ext_reg_int::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  fld_none.write(wdata);
  fld_gen.write(wdata);
  fld_ext.write(wdata);
  fld_int.write(wdata);
}

int  ordt_rg_regs_ext_reg_int::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_regs_ext_reg_int at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_regs_ext_reg_int\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_regs_ext_reg_int::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  fld_none.read(rdata);
  fld_gen.read(rdata);
  fld_ext.read(rdata);
  fld_int.read(rdata);
}

// ------------------ ordt_rset_regs_ext methods ------------------

ordt_rset_regs_ext::ordt_rset_regs_ext(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    reg_none(_m_startaddress + 0x0, _m_startaddress + 0x3),
    reg_int(_m_startaddress + 0x4, _m_startaddress + 0x7) {
  m_children.push_back(&reg_none);
  m_children.push_back(&reg_int);
}

void  ordt_rset_regs_ext::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&reg_none);
  m_children.push_back(&reg_int);
}

// ------------------ ordt_rg_wrap_info_reg methods ------------------

ordt_rg_wrap_info_reg::ordt_rg_wrap_info_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    bar1(0, 1, 0x0, r_std, w_std),
    bar2(1, 1, 0x0, r_std, w_std),
    bar3(2, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_wrap_info_reg::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_wrap_info_reg at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_wrap_info_reg\n";
  #endif
     return 8;
}

void  ordt_rg_wrap_info_reg::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  bar1.write(wdata);
  bar2.write(wdata);
  bar3.write(wdata);
}

int  ordt_rg_wrap_info_reg::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_wrap_info_reg at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_wrap_info_reg\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_wrap_info_reg::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  bar1.read(rdata);
  bar2.read(rdata);
  bar3.read(rdata);
}

// ------------------ ordt_root methods ------------------

ordt_root::ordt_root()
  : ordt_root(0x0, 0x203) {
}

ordt_root::ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    regs_none(_m_startaddress + 0x0, _m_startaddress + 0x7),
    regs_ext(_m_startaddress + 0x8, _m_startaddress + 0xf),
    wrap_info_reg(_m_startaddress + 0x200, _m_startaddress + 0x203) {
  m_children.push_back(&regs_none);
  m_children.push_back(&regs_ext);
  m_children.push_back(&wrap_info_reg);
}

void  ordt_root::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&regs_none);
  m_children.push_back(&regs_ext);
  m_children.push_back(&wrap_info_reg);
}

